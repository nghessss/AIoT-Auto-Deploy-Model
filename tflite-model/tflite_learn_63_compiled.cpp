/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 29.07.2025 16:40:18

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1227792;
#else
constexpr int kTensorArenaSize = 1226768;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,224,224,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 20852, -28342, -41693, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00025678102974779904, 0.00018360967806074768, 0.00020381507056299597, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 18,82,115,-74,-69,27,47,-3,-8,30,21,-3,0,-70,50,17,-33,81,115,127,20,7,23,-58,-83,111,-41,13,127,-17,-51,20, 
  /* [1][0][][] */ 67,-31,-85,29,-3,119,-81,-2,127,-43,1,-72,-64,112,40,-47,97,-43,-10,-100,-115,28,119,76,27,26,6,-10,-101,-47,11,-21, 
  /* [2][0][][] */ -19,74,-95,82,86,-25,-81,113,94,40,127,12,-92,-66,89,119,-63,-50,20,-111,59,118,-29,-66,97,-30,-11,-104,-1,-68,92,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0045984354801476002, 0.0032880825456231833, 0.0036499206908047199, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 526, -443, 595, 364, -291, 31, 1311, 326, 403, -394, 949, -288, -251, 281, 717, -286, 299, 144, 1136, 665, -103, 652, 441, 237, 499, 564, -442, -336, 1320, -585, 769, -395, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.6174612836912274e-05, 5.5127817176980898e-05, 5.7713881687959656e-05, 6.1717757489532232e-05, 5.1120088755851611e-05, 4.9477494030725211e-05, 8.4319544839672744e-05, 6.364134605973959e-05, 5.5356005759676918e-05, 5.4274241847451776e-05, 6.0894264606758952e-05, 5.153501479071565e-05, 4.7457837354158983e-05, 5.5497810535598546e-05, 5.7860488595906645e-05, 5.2854207751806825e-05, 5.518346733879298e-05, 5.9129382862010971e-05, 6.265434785746038e-05, 5.1132108637830243e-05, 4.8447116569150239e-05, 5.2473595133051276e-05, 5.3193063649814576e-05, 5.1836610509781167e-05, 5.5453790992032737e-05, 5.7768109400058165e-05, 5.5251424782909453e-05, 5.297806637827307e-05, 7.7078177127987146e-05, 5.0743768952088431e-05, 6.103150371927768e-05, 5.1714901928789914e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -20,-55,127,1,107,4,-86,-83,71,-83,-99,20,62,8,-36,66,-45,-18,-44,-65,-55,-105,8,117,-91,38,76,-36,107,-1,-19,-53,95,-43,-89,70,-93,-70,-79,44,87,-73,-80,98,59,-88,109,-14, 
  /* [1][0][][] */ -72,26,-77,-6,-51,66,38,-3,65,-112,-113,88,52,-25,18,52,107,-52,21,127,-59,-13,23,10,25,-1,-49,94,1,-5,96,-76,46,89,-23,15,43,46,-24,-78,-77,-5,-28,-98,-47,24,-42,-64, 
  /* [2][0][][] */ 46,49,-42,106,-16,-39,112,103,-90,92,-7,109,89,10,104,-95,-33,-23,44,92,-88,10,127,26,-25,68,126,8,-57,107,95,99,-63,-19,-72,-89,-65,96,100,-31,-106,-57,31,28,-68,110,-20,-62, 
  /* [3][0][][] */ 83,2,29,-21,-48,59,-127,47,67,29,48,19,96,57,49,19,77,107,-44,6,118,-57,-42,-86,-13,-78,-87,109,44,-90,86,13,-33,-16,7,13,-80,1,47,60,-6,-68,-91,-14,80,39,-23,-59, 
  /* [4][0][][] */ 53,98,-24,48,-34,-38,19,10,75,85,-35,43,31,-43,-44,-80,-50,5,-95,18,115,-67,101,22,-38,-3,34,-60,-59,21,-68,-80,74,114,36,-83,-74,11,-127,47,-57,-64,-103,-105,39,102,52,70, 
  /* [5][0][][] */ 107,-110,67,85,46,-126,9,61,112,-127,-24,-73,24,88,30,36,38,66,-96,96,35,41,10,-33,-115,-79,-38,-99,52,14,-5,-109,-40,7,-91,1,-127,-48,51,29,-103,-59,42,83,-40,28,35,-59, 
  /* [6][0][][] */ 24,6,127,88,-28,-8,18,77,-11,-18,41,-44,70,41,120,-42,82,12,19,90,-31,-68,86,48,-15,-41,29,-18,3,-33,38,-11,-47,-60,-31,-65,38,39,-50,59,58,65,45,17,-54,85,-59,-17, 
  /* [7][0][][] */ 100,69,-35,-10,-60,85,-24,2,108,8,-92,1,55,-85,36,51,47,23,-19,127,52,55,8,68,-72,84,28,54,-59,93,-20,16,26,15,73,102,-86,88,-6,-30,74,-54,84,57,50,-6,102,-80, 
  /* [8][0][][] */ 27,31,-42,-86,70,40,-85,-10,21,47,38,110,14,-52,-89,-59,-73,108,-56,12,43,-19,88,121,-104,110,35,86,-62,17,-94,123,105,-18,55,11,120,16,-8,84,92,111,-112,-127,0,-15,-11,116, 
  /* [9][0][][] */ -8,1,107,40,73,-116,-51,-127,32,41,-17,45,-36,-80,-108,-34,2,-10,-106,-76,-5,92,-118,-115,104,-18,-17,17,-19,-67,-94,92,52,-9,18,-28,-84,7,-44,-54,38,-77,49,-99,72,12,-114,45, 
  /* [10][0][][] */ -45,93,99,-16,0,91,86,42,53,46,11,-65,107,61,-26,9,-5,88,-101,-18,1,56,70,-56,19,50,-113,-83,-28,78,-90,-82,93,97,127,86,-11,25,-13,36,-27,127,-71,-37,-67,-43,21,-26, 
  /* [11][0][][] */ 106,17,-17,108,114,36,68,23,107,90,-76,105,-14,-77,37,-80,-57,-117,63,50,24,77,21,-127,-118,-115,-7,65,78,-5,36,-27,-103,-87,50,42,-71,71,-40,-74,-40,103,-73,16,-52,-73,-104,-101, 
  /* [12][0][][] */ 3,81,-64,2,92,1,-14,33,-96,61,-13,5,-59,12,62,-98,-111,-48,-58,-75,21,-17,12,102,-87,-64,121,-123,100,16,-41,127,-107,-89,-60,9,-6,-96,-29,38,121,40,-116,-30,-32,-105,-54,126, 
  /* [13][0][][] */ 123,-65,100,90,103,127,70,72,84,-93,10,-9,96,65,56,-33,-125,-56,-60,10,77,-30,119,-33,-53,60,-4,29,-85,-94,77,45,52,116,-17,46,-79,-19,33,83,-48,82,-61,3,-34,40,5,-24, 
  /* [14][0][][] */ -41,-92,91,83,89,-15,-19,-90,-55,-19,64,88,-13,-86,-85,-69,-61,-39,25,43,-25,51,12,67,-90,-44,-41,44,-99,-111,-79,51,116,-6,-17,24,107,127,45,-91,6,-86,29,80,79,-90,76,-64, 
  /* [15][0][][] */ 6,-23,-33,81,87,-106,66,-106,56,-8,-82,-6,105,5,-93,-127,92,4,-112,47,43,34,75,100,72,51,36,91,22,61,71,-114,-3,-5,-60,-3,-73,113,106,-82,4,112,-51,-21,21,-90,-44,-81, 
  /* [16][0][][] */ -52,-4,103,-62,54,127,-60,50,62,57,-105,90,-3,-51,-57,-45,100,92,81,49,121,76,-33,66,-21,76,-73,74,-95,11,37,23,-90,92,60,68,-29,63,-38,-51,37,-37,66,82,72,115,109,-6, 
  /* [17][0][][] */ 23,-98,31,86,-44,-106,-53,-89,34,-81,81,41,92,64,-91,48,42,46,94,127,-87,-5,17,-52,15,54,-65,29,103,-41,-25,69,-38,-27,34,7,-37,91,-80,-39,-88,-36,-14,-3,9,5,80,-96, 
  /* [18][0][][] */ -86,124,127,-18,3,-86,-12,30,-2,88,-40,-57,-16,49,100,-43,57,-25,78,57,95,14,57,-63,31,-96,37,101,53,85,76,59,45,-23,-63,-82,9,33,-20,44,-40,28,-2,60,-79,16,32,20, 
  /* [19][0][][] */ 27,58,107,73,73,-83,121,113,102,-46,45,-2,-89,51,-32,67,120,-96,127,90,-7,95,-44,24,86,-85,52,-56,-70,-107,-55,70,90,-81,45,6,34,-66,-42,-107,56,-101,-22,27,-77,42,89,-81, 
  /* [20][0][][] */ -15,80,81,108,-98,99,76,65,12,14,-74,-1,-8,99,53,-85,-48,-46,-70,-18,23,-44,-77,-83,83,-86,-105,50,28,20,13,127,109,46,-14,63,49,-38,-22,-126,-96,-38,-91,-65,-30,-75,-80,117, 
  /* [21][0][][] */ 112,83,72,-98,115,-65,40,32,20,-55,-85,54,20,30,-73,-79,-118,-12,35,-1,127,-20,92,-73,67,-70,-65,92,23,0,1,-18,24,35,-71,-89,121,123,-108,-20,7,24,21,-22,-84,-72,-62,115, 
  /* [22][0][][] */ 48,-54,-66,-96,104,-40,113,71,-84,101,-71,-92,127,-119,-113,-72,42,101,-98,-65,103,-77,39,46,108,16,-121,115,-54,-79,-71,-99,64,79,23,22,13,-6,-50,-102,16,-3,11,92,68,-105,102,-15, 
  /* [23][0][][] */ 80,-108,-1,48,111,-97,-5,-99,70,-80,86,97,24,-119,-2,-22,76,-23,-103,80,106,-97,110,-23,-6,8,71,31,72,24,69,-34,-29,59,20,41,101,0,-110,22,-95,4,-6,-127,-66,-83,123,30, 
  /* [24][0][][] */ -57,-49,-109,-67,-69,-93,-84,-76,90,126,66,61,127,45,-58,-101,-97,65,25,-54,112,-59,-40,-22,61,-6,54,73,108,38,-7,-57,17,26,69,55,-51,-59,71,-2,-56,-82,101,-11,38,-23,64,88, 
  /* [25][0][][] */ -73,-42,-56,5,99,-55,-96,64,47,-92,-26,33,76,-3,-80,-9,-51,62,52,-87,73,73,-8,-46,30,-36,-83,44,82,-70,34,127,97,-91,37,64,112,-59,-10,-7,-70,102,-77,7,101,53,62,38, 
  /* [26][0][][] */ 48,-122,-34,-29,-100,-2,-18,-19,-110,-127,99,81,-84,-44,1,-11,93,20,-70,-85,6,60,90,15,47,61,4,41,5,0,-94,-4,-34,-60,-104,-107,-76,78,-58,107,-94,92,46,20,-76,65,-47,91, 
  /* [27][0][][] */ 4,3,-69,-110,-127,-78,-71,-23,36,96,36,-117,-33,58,81,-36,64,-26,60,-90,-102,4,-34,-28,-112,40,-113,-9,64,25,-34,-15,56,64,-98,-97,-95,-74,-120,84,-102,11,22,17,95,19,63,99, 
  /* [28][0][][] */ 55,36,118,82,-65,-53,-67,-33,-34,-43,51,49,-25,-62,36,63,127,87,-36,87,3,32,-59,-67,-45,43,-52,-19,-6,-51,0,16,-70,9,64,55,59,-77,11,0,72,57,-8,50,-64,17,22,59, 
  /* [29][0][][] */ 46,50,53,-63,-103,4,-127,-3,94,-25,-105,-110,103,-113,-56,-59,-110,99,18,-80,-90,-49,47,-4,-44,-4,-51,-40,-119,-14,106,-12,44,-9,-97,-72,-21,98,-20,91,41,103,-53,80,-11,102,-68,-38, 
  /* [30][0][][] */ 42,-45,-79,47,-70,30,-69,5,127,1,0,-27,-68,-2,34,19,-47,55,83,-71,58,-57,-77,27,-105,41,-68,123,-1,-92,-81,2,-53,-46,-78,-20,12,13,9,39,93,-44,-10,90,115,-26,117,79, 
  /* [31][0][][] */ 77,-100,37,105,46,59,-49,-111,-41,-27,-87,-100,99,-127,-49,109,-60,-102,34,60,60,33,-39,103,40,-127,40,35,-80,-79,49,109,12,14,-104,-16,99,-41,-78,-125,55,-78,-30,36,-2,-64,-50,20, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023874209728091955, 0.0023429321590811014, 0.0024528398644179106, 0.0026230046059936285, 0.0021726037375628948, 0.0021027934271842241, 0.0035835804883390665, 0.0027047572657465935, 0.002352630253881216, 0.0023066552821546793, 0.0025880062021315098, 0.0021902380976825953, 0.0020169580820947886, 0.0023586568422615528, 0.0024590706452727318, 0.0022463037166744471, 0.0023452972527593374, 0.0025129986461251974, 0.0026628097984939814, 0.0021731145679950714, 0.0020590024068951607, 0.0022301278077065945, 0.0022607052233070135, 0.0022030558902770281, 0.002356786048039794, 0.0024551446549594402, 0.0023481855168938637, 0.0022515677846968174, 0.0032758223824203014, 0.0021566101349890232, 0.0025938388425856829, 0.0021978833246976137, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -179, 935, 1498, 2114, 8029, -462, -948, 8895, 689, 5424, 356, -703, 2762, -2705, 2614, -1114, -13, -1149, 487, 1014, 2521, 1828, 3008, 605, -2008, -895, 571, 1765, 827, 2890, -1058, 2488, 3289, 2159, 2577, 1017, 8028, 937, 691, -900, 550, 7084, -520, 1509, 5431, -42, 1317, 4816, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00043466882198117673, 0.00036344985710456967, 0.00021286441187839955, 0.00027432414935901761, 0.00011786246614065021, 0.00026394450105726719, 0.00032490058219991624, 0.00011140315473312512, 0.00038265108014456928, 0.00015507049101870507, 0.00021131591347511858, 0.000486559554701671, 0.00023959818645380437, 0.00026074095512740314, 0.00027613888960331678, 0.00025961818755604327, 0.00021688939887098968, 0.0001016944443108514, 0.00041814261930994689, 0.00053498527267947793, 0.00026523930137045681, 0.00025527444086037576, 0.00021616007143165916, 0.00028698975802399218, 0.00025833485415205359, 0.00045407415018416941, 0.00027869356563314795, 0.00030742367380298674, 0.00036656134761869907, 0.00020989739277865738, 0.00019181941752322018, 0.00026781074120663106, 0.0002169406070606783, 0.00035364495124667883, 0.0001719415740808472, 0.00023225016775541008, 0.00011189885844942182, 0.00023880523804109544, 0.00017439080693293363, 0.00023865909315645695, 0.00030458360561169684, 0.00013323228631634265, 0.00030940270517021418, 0.00015542020264547318, 0.00015525090566370636, 0.000222055270569399, 0.00021808418387081474, 0.00016781679005362093, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 31,-17,-65,12,-127,17,-72,-5, 
  /* [1][0][][] */ -127,25,124,15,-120,-10,1,-15, 
  /* [2][0][][] */ 18,77,-41,12,-62,-127,-24,76, 
  /* [3][0][][] */ -77,29,-9,127,6,-52,-58,-35, 
  /* [4][0][][] */ 28,-11,38,-127,-20,12,-116,18, 
  /* [5][0][][] */ 77,127,-66,-58,-43,-2,26,-125, 
  /* [6][0][][] */ 58,-49,48,100,-47,-127,11,-95, 
  /* [7][0][][] */ 49,127,-62,-71,-58,-33,18,-122, 
  /* [8][0][][] */ 0,-26,52,-4,12,11,-51,-127, 
  /* [9][0][][] */ -86,-3,-98,25,-127,-73,-86,-31, 
  /* [10][0][][] */ 98,-4,94,-46,-127,20,88,93, 
  /* [11][0][][] */ 127,-27,-59,3,45,10,-73,-10, 
  /* [12][0][][] */ -13,-104,127,10,24,16,-83,68, 
  /* [13][0][][] */ 29,-55,66,-6,15,-127,58,-103, 
  /* [14][0][][] */ -122,38,127,7,-34,-85,60,-37, 
  /* [15][0][][] */ 30,127,-32,-45,-79,-12,48,-119, 
  /* [16][0][][] */ 31,101,-56,59,-1,-37,-14,127, 
  /* [17][0][][] */ 35,71,-8,73,-60,82,-127,33, 
  /* [18][0][][] */ 59,-22,127,-25,66,-100,20,-27, 
  /* [19][0][][] */ 11,-3,4,127,38,-40,-36,-92, 
  /* [20][0][][] */ 10,20,-21,35,-14,54,-127,5, 
  /* [21][0][][] */ -5,-8,54,31,41,127,59,-45, 
  /* [22][0][][] */ 73,-127,-15,51,-84,70,14,12, 
  /* [23][0][][] */ -31,-101,-10,-116,0,-66,-15,-127, 
  /* [24][0][][] */ 14,26,-20,-56,-36,-127,-40,53, 
  /* [25][0][][] */ 65,76,127,11,9,26,-57,-5, 
  /* [26][0][][] */ -108,33,127,-55,-95,-11,95,-16, 
  /* [27][0][][] */ -69,40,-29,-100,22,127,-27,80, 
  /* [28][0][][] */ 10,-112,70,59,47,8,-29,127, 
  /* [29][0][][] */ -126,39,88,-36,-127,18,108,-39, 
  /* [30][0][][] */ 108,-98,16,68,-127,-25,50,-89, 
  /* [31][0][][] */ 68,91,55,-48,-127,-18,5,125, 
  /* [32][0][][] */ -22,-5,87,-52,27,-1,-127,-100, 
  /* [33][0][][] */ 49,43,94,-127,25,36,-38,65, 
  /* [34][0][][] */ -7,-106,80,-37,32,127,54,-95, 
  /* [35][0][][] */ 59,20,88,-6,12,127,17,-54, 
  /* [36][0][][] */ -8,41,-30,34,57,-127,-2,21, 
  /* [37][0][][] */ 9,-29,61,31,-124,127,-32,-22, 
  /* [38][0][][] */ -127,-22,-100,-10,90,-34,-103,-22, 
  /* [39][0][][] */ 29,4,37,-123,-36,46,-127,15, 
  /* [40][0][][] */ 91,-23,-73,-127,65,74,61,-29, 
  /* [41][0][][] */ 21,-19,-15,127,-103,10,-90,-64, 
  /* [42][0][][] */ -89,25,75,127,-59,-69,-60,10, 
  /* [43][0][][] */ 85,-104,114,46,-127,14,120,67, 
  /* [44][0][][] */ 22,-34,33,-75,-24,127,34,14, 
  /* [45][0][][] */ -37,40,-47,5,79,-55,-127,-39, 
  /* [46][0][][] */ -87,-88,-11,-26,20,127,-43,-112, 
  /* [47][0][][] */ -100,-79,-51,18,15,127,-32,-69, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0034493093844503164, 0.0028841521125286818, 0.0016891831764951348, 0.0021768962033092976, 0.0009352962370030582, 0.0020945286378264427, 0.0025782447773963213, 0.00088403845438733697, 0.00303652323782444, 0.0012305601267144084, 0.0016768950736150146, 0.0038610878400504589, 0.0019013286801055074, 0.0020691067911684513, 0.0021912970114499331, 0.0020601970609277487, 0.00172112334985286, 0.00080699508544057608, 0.0033181658945977688, 0.0042453696951270103, 0.002104803454130888, 0.0020257274154573679, 0.0017153357621282339, 0.0022774040699005127, 0.0020500132814049721, 0.0036033003125339746, 0.0022115695755928755, 0.002439557109028101, 0.0029088433366268873, 0.0016656384104862809, 0.0015221808571368456, 0.0021252091974020004, 0.0017215297557413578, 0.0028063454665243626, 0.0013644404243677855, 0.0018430185737088323, 0.0008879721281118691, 0.0018950361991301179, 0.0013838763115927577, 0.001893876469694078, 0.0024170198012143373, 0.0010572633473202586, 0.0024552615359425545, 0.0012333352351561189, 0.001231991802342236, 0.001762117026373744, 0.001730604562908411, 0.0013317082775756717, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -2123, -502, -12402, 9496, 8058, -2353, 10430, 1976, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 9.3639915576204658e-05, 0.00015310884919017553, 7.3465249442961067e-05, 0.00011847442510770634, 0.00010800199379445985, 9.470374061493203e-05, 0.00013736399705521762, 0.00017413304885849357, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 6,36,35,37,-10,-38,55,48,-12,31,-9,-15,49,-27,50,-24,-51,-25,-127,-13,44,-39,23,48,10,-10,40,-7,-9,-59,6,40,-44,47,46,11,53,85,-57,-64,8,23,-101,-41,34,18,-24,-60, 
  /* [1][0][][] */ -11,-38,-6,67,-25,4,-8,-17,20,13,-13,-47,-6,-1,18,10,42,21,56,-38,5,27,21,-54,6,-16,-26,-26,-35,6,-16,-9,-27,-28,-97,74,17,15,-127,-13,23,-13,64,27,101,-19,-41,49, 
  /* [2][0][][] */ -15,0,20,-31,-26,-26,-19,127,-41,81,-39,-9,124,-3,51,-25,-48,-75,-8,26,-14,-24,25,2,4,66,1,37,14,16,83,27,-71,-25,30,59,6,67,64,-117,40,26,-37,-27,12,33,-4,-13, 
  /* [3][0][][] */ 31,-1,-127,-30,17,-2,37,-32,-9,-20,-7,16,-51,-50,38,25,14,46,10,36,-52,19,-65,-10,-32,-66,32,11,-68,-54,-55,7,77,39,-35,13,-53,-3,33,-5,26,-62,-18,16,55,-39,40,-9, 
  /* [4][0][][] */ 12,40,-4,-4,21,-12,-71,-115,-34,24,-16,69,7,-24,1,53,41,55,-74,4,23,-2,-31,-11,41,-20,3,1,-36,4,-5,-34,16,-29,-127,36,-33,12,41,37,-35,-32,68,43,7,-49,13,11, 
  /* [5][0][][] */ -62,-32,101,17,79,9,61,-2,-127,-3,-90,-11,-75,-73,46,65,-15,25,14,-2,39,22,31,14,-27,5,2,-22,-37,-1,-15,-18,-31,37,60,19,-9,70,-25,-16,55,-36,-54,45,-7,20,32,19, 
  /* [6][0][][] */ 105,61,-26,23,26,-15,-121,-76,12,1,-9,70,-29,-31,3,49,-40,36,22,-3,127,-28,62,122,17,-65,16,-21,-64,-18,-36,-71,47,-33,24,-8,-9,29,-40,50,-63,-54,-68,-40,-23,-51,54,1, 
  /* [7][0][][] */ 12,52,35,-80,58,-43,-42,-21,17,16,34,26,-39,2,28,-7,-23,21,-23,55,-48,-3,-15,54,13,-40,9,42,-8,25,-42,-16,47,-5,-33,-40,-62,12,127,-6,18,-31,-25,-10,45,3,59,4, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0039796964265406132, 0.0065071256831288338, 0.0031222731340676546, 0.0050351629033684731, 0.0045900847762823105, 0.0040249088779091835, 0.0058379699476063251, 0.0074006547220051289, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -1117, -3508, 571, -223, -284, 371, 2010, 14458, -5247, 15376, 11869, -2987, 5673, 2746, 4186, -692, 2075, -156, 3044, -2523, -2627, -2663, -17563, -1705, 1921, -339, -451, 2580, 9398, 5934, 8695, -1862, -4930, -338, -2368, -4526, 4873, 8109, -2096, 12551, 2042, -1629, -4513, -3397, -5642, 10769, -87, 8039, };
const TfArray<48, float> quant10_scale = { 48, { 9.4161208835430443e-05, 0.00029126499430276453, 0.00018908423953689635, 0.00022836131392978132, 8.4433719166554511e-05, 0.00053352530812844634, 0.00029932014876976609, 0.00052742584375664592, 0.00027561254682950675, 7.3378323577344418e-05, 0.00011919203825527802, 0.00013817631406709552, 0.00019794181571342051, 0.00044016138417646289, 0.00019612265168689191, 0.00018536679272074252, 0.00075278047006577253, 0.00040542028727941215, 9.566753578837961e-05, 0.00018686935072764754, 0.00012465308827813715, 0.00010246100282529369, 8.0068544775713235e-05, 0.00049044867046177387, 0.0001834664581110701, 0.00038083599065430462, 0.00014442650717683136, 0.00019747707119677216, 0.00020025699632242322, 0.00012525715283118188, 0.00015467967023141682, 0.00010960505460388958, 0.00030570928356610239, 0.00028841610765084624, 0.00029823312070220709, 0.00016405041969846934, 0.00011914290371350944, 9.3477123300544918e-05, 0.00038324727211147547, 0.00015402925782836974, 0.00033435455407015979, 0.00034509075339883566, 0.00018402084242552519, 0.00035809481050819159, 0.0002967831096611917, 9.4692542916163802e-05, 9.6056435722857714e-05, 9.7390671726316214e-05, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 66,115,53,21,2,-64,32,31,-55,-14,-40,32,43,18,-1,18,47,-42,78,86,49,-13,10,7,2,-57,65,12,-51,-50,12,29,44,-82,4,33,-24,35,-14,-127,-7,-85,-26,-6,1,-122,73,-127, 120,30,71,-97,66,53,34,-50,-101,-90,17,127,0,-69,-127,27,-9,96,69,78,51,95,98,41,127,-41,-2,-127,-127,-33,-127,120,32,-71,-90,127,23,-86,-88,-108,12,127,-85,33,-57,-77,91,0, 63,14,33,-83,-11,-42,32,21,-51,3,-11,18,20,11,48,9,-50,15,71,56,-29,-32,-54,-1,21,-50,-56,-40,-67,-75,-3,0,74,-45,40,35,-64,-50,-3,-75,0,-24,111,-18,-17,-127,20,-73, 
  /* [0][1][][] */ 127,17,30,54,64,66,3,-127,105,-127,-117,-76,8,49,-49,127,-127,91,60,43,-3,100,76,-48,-17,123,101,20,26,-32,-96,54,76,83,-73,34,-64,-5,0,-92,-18,-49,41,-82,42,-3,94,-29, 24,127,-127,78,127,51,-127,13,83,-41,-20,113,-127,127,-24,-4,38,-127,-127,7,127,48,127,-124,-76,89,-35,-6,3,-20,44,-31,127,-2,107,-85,112,-127,127,99,127,74,-127,1,127,79,-116,-38, 77,4,16,-127,74,49,15,-92,127,-39,-127,-16,12,21,-45,103,70,-7,22,59,33,-127,52,127,-37,127,-73,-28,37,-11,-46,43,-8,64,127,37,-64,-31,-56,-28,-26,-21,122,127,96,-25,110,-25, 
  /* [0][2][][] */ -1,55,38,45,15,-15,39,10,20,-33,-4,-5,42,-75,46,-56,-13,24,76,-51,103,-15,9,-74,-71,-70,127,77,6,-92,-54,127,27,36,-22,-4,-75,18,4,-4,-25,-58,44,-6,10,-4,68,-63, 23,0,9,5,0,-127,-1,-88,-3,-48,4,-12,-14,-78,-12,16,0,-48,26,127,100,87,68,25,56,-49,-56,39,-118,-24,-58,50,3,127,-62,-4,-118,-117,23,-21,-89,89,-20,19,-31,-72,127,-37, -6,7,38,-58,24,-9,44,28,8,-2,8,6,37,-81,60,-31,-8,-32,65,-115,14,-60,-60,65,-39,-73,-115,19,-2,-127,19,83,45,-29,-4,27,-127,-76,-32,-17,-26,-1,-5,17,-4,36,-17,-70, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0040018511936068535, 0.012378761544823647, 0.0080360798165202141, 0.0097053553909063339, 0.0035884329117834568, 0.022674825042486191, 0.012721105478703976, 0.022415598854422569, 0.011713532730937004, 0.003118578577414155, 0.0050656613893806934, 0.0058724931441247463, 0.0084125269204378128, 0.018706858158111572, 0.0083352122455835342, 0.0078780883923172951, 0.031993169337511063, 0.017230361700057983, 0.0040658703073859215, 0.0079419473186135292, 0.0052977562882006168, 0.0043545924127101898, 0.0034029132220894098, 0.020844068378210068, 0.0077973240986466408, 0.01618552953004837, 0.006138126365840435, 0.0083927754312753677, 0.0085109220817685127, 0.0053234286606311798, 0.0065738861449062824, 0.0046582147479057312, 0.012992644682526588, 0.012257684953510761, 0.012674907222390175, 0.0069721429608762264, 0.0050635733641684055, 0.0039727776311337948, 0.016288008540868759, 0.0065462430939078331, 0.014210067689418793, 0.014666357077658176, 0.0078208856284618378, 0.015219029039144516, 0.012613281607627869, 0.004024432972073555, 0.0040823984891176224, 0.0041391034610569477, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -925, -1187, 1913, -438, -1761, 1629, 1367, 16605, 1298, 1232, 3834, 1602, 933, 7835, 3827, -1369, 9802, 1580, 437, -1876, -17, -265, 1105, 16091, 504, 3801, 1265, -100, 4975, 173, 1553, -719, -962, -1594, -3935, 1188, 1872, 1366, 1470, 1694, 2301, 687, 3144, 2350, 10242, 2773, -1169, 400, };
const TfArray<48, float> quant12_scale = { 48, { 0.00038849614793434739, 0.00036735666799359024, 0.00032446294790133834, 0.00027510800282470882, 0.00024941540323197842, 0.00018177632591687143, 0.00035596036468632519, 7.5156043749302626e-05, 0.00020286731887608767, 0.00045400651288218796, 0.00020893517648801208, 0.00026485553826205432, 0.000378927041310817, 0.00011132145300507545, 0.00018813704082276672, 0.00032901862869039178, 9.8114498541690409e-05, 0.00016113040328491479, 0.00056125078117474914, 0.00033223172067664564, 0.00019235115905757993, 0.00041829221299849451, 0.00035207506152801216, 6.1909500800538808e-05, 0.00040416829870082438, 0.00016794183466117829, 0.00044276888365857303, 0.0003345134318806231, 0.00011184332834091038, 0.00046648283023387194, 0.000190616978215985, 0.00050171191105619073, 0.00045780793880112469, 0.00021896082034800202, 0.00013990473235026002, 0.00039129200740717351, 0.000244750059209764, 0.00028979746275581419, 0.00031059960019774735, 0.0003083546762354672, 0.00029084287234582007, 0.00026108522433787584, 0.00021841182024218142, 0.00020808864792343229, 8.9096531155519187e-05, 0.00024977722205221653, 0.00016155006596818566, 0.00050980143714696169, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-45,-52,109,3,-84,-82,-127, 
  /* [1][0][][] */ 127,-25,37,-23,28,-77,8,31, 
  /* [2][0][][] */ -11,38,16,-127,7,98,-72,57, 
  /* [3][0][][] */ -27,127,-49,-96,-111,0,40,-95, 
  /* [4][0][][] */ 8,-67,-93,-50,27,-80,-77,-127, 
  /* [5][0][][] */ -28,-83,74,43,30,127,29,-112, 
  /* [6][0][][] */ -3,-3,-29,23,-3,17,-127,-44, 
  /* [7][0][][] */ 12,-20,7,31,-42,47,127,60, 
  /* [8][0][][] */ 16,61,-86,-17,-50,-127,-77,67, 
  /* [9][0][][] */ 64,-4,-43,-29,0,127,-48,102, 
  /* [10][0][][] */ -19,52,71,117,102,127,-14,-60, 
  /* [11][0][][] */ -27,-54,-1,34,-127,63,-17,-35, 
  /* [12][0][][] */ -10,33,96,-72,63,-96,-127,-78, 
  /* [13][0][][] */ 45,41,-89,-127,-6,-72,-73,107, 
  /* [14][0][][] */ -33,-127,18,-69,-7,-80,25,-125, 
  /* [15][0][][] */ -3,70,58,93,97,127,-14,-25, 
  /* [16][0][][] */ 31,-1,-29,-127,64,83,-67,88, 
  /* [17][0][][] */ -90,127,-118,44,41,80,-81,59, 
  /* [18][0][][] */ -127,55,18,-15,-85,14,-17,7, 
  /* [19][0][][] */ 127,-5,-34,-26,78,-60,70,-87, 
  /* [20][0][][] */ 127,-74,44,-44,-61,39,77,1, 
  /* [21][0][][] */ 21,-36,-28,30,-10,30,127,27, 
  /* [22][0][][] */ 90,35,-127,-94,21,100,58,122, 
  /* [23][0][][] */ -35,59,-66,-96,65,-3,-127,22, 
  /* [24][0][][] */ 127,-49,-80,-23,88,-51,-1,20, 
  /* [25][0][][] */ -24,-67,59,-60,64,127,-32,-83, 
  /* [26][0][][] */ 19,-44,32,37,127,-60,-28,-47, 
  /* [27][0][][] */ -19,-127,72,113,15,-22,-33,125, 
  /* [28][0][][] */ -11,56,-112,-49,114,-105,-38,127, 
  /* [29][0][][] */ -106,35,127,-98,22,-47,48,42, 
  /* [30][0][][] */ 101,-78,71,-16,-83,-127,70,-21, 
  /* [31][0][][] */ 26,21,49,-14,-23,0,-127,5, 
  /* [32][0][][] */ 22,-18,23,127,-30,-92,-52,-89, 
  /* [33][0][][] */ 127,-73,-74,102,-110,114,-76,-62, 
  /* [34][0][][] */ 35,-80,18,-63,-118,127,36,-35, 
  /* [35][0][][] */ 16,127,86,22,12,10,-52,5, 
  /* [36][0][][] */ 15,115,-94,-127,-94,12,110,-74, 
  /* [37][0][][] */ 30,-6,55,21,37,127,78,28, 
  /* [38][0][][] */ -70,-92,103,64,27,-11,-64,127, 
  /* [39][0][][] */ 8,32,127,-53,-25,52,-30,35, 
  /* [40][0][][] */ 9,0,17,4,0,-28,127,-1, 
  /* [41][0][][] */ -14,-2,-80,-125,-96,-127,-67,64, 
  /* [42][0][][] */ 50,-12,61,-23,-127,-37,-41,15, 
  /* [43][0][][] */ 62,-3,25,37,-55,-127,109,36, 
  /* [44][0][][] */ -83,-127,-6,-65,-9,6,0,-119, 
  /* [45][0][][] */ 26,127,79,84,52,117,-61,37, 
  /* [46][0][][] */ -111,-5,-17,69,120,59,-82,127, 
  /* [47][0][][] */ 21,81,-52,-36,7,-28,22,-127, 
};
const TfArray<48, float> quant13_scale = { 48, { 0.0036094209644943476, 0.003413019236177206, 0.0030145044438540936, 0.0025559598580002785, 0.0023172562941908836, 0.0016888385871425271, 0.0033071390353143215, 0.00069825607351958752, 0.0018847897881641984, 0.0042180614545941353, 0.0019411647226661444, 0.0024607067462056875, 0.0035205166786909103, 0.0010342599125579, 0.0017479343805462122, 0.0030568302609026432, 0.00091155734844505787, 0.0014970224583521485, 0.0052144411019980907, 0.0030866821762174368, 0.0017870867159217596, 0.0038862486835569143, 0.0032710416708141565, 0.00057518575340509415, 0.003755026962608099, 0.0015603057108819485, 0.0041136555373668671, 0.0031078809406608343, 0.00103910849429667, 0.004333975724875927, 0.0017709748353809118, 0.004661280196160078, 0.0042533795349299908, 0.0020343104843050241, 0.0012998200254514813, 0.0036353964824229479, 0.0022739118430763483, 0.0026924361009150743, 0.0028857034631073475, 0.0028648464940488338, 0.0027021486312150955, 0.0024256778415292501, 0.0020292098633944988, 0.0019332998199388385, 0.00082777364877983928, 0.0023206179030239582, 0.0015009214403107762, 0.0047364379279315472, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 17174, 5775, 14859, -6946, -12741, 9619, 531, 15938, };
const TfArray<8, float> quant14_scale = { 8, { 6.1345708672888577e-05, 7.7638935181312263e-05, 6.6148379119113088e-05, 0.00010823163756867871, 8.2088961789850146e-05, 0.00011567604087758809, 9.4135422841645777e-05, 8.1310710811521858e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-17,-12,-18,-28,-78,-37,-11,65,-34,-53,-31,-20,77,-58,10,9,-12,6,7,35,-34,3,9,42,3,5,34,11,57,-53,-100,18,-58,7,-21,34,-46,-5,27,-56,-18,-31,-41,-79,-94,2,-23, 
  /* [1][0][][] */ -78,-3,92,-66,63,47,51,21,-20,20,-2,105,24,-28,-127,-57,-95,-87,30,-23,-3,94,-48,4,18,-101,40,96,37,-23,29,44,39,40,-2,42,-79,-29,24,12,-2,-37,-95,28,-19,-61,-93,34, 
  /* [2][0][][] */ 87,35,-21,-56,-43,-4,-43,-80,35,20,-86,-42,-20,49,-60,42,-11,78,13,8,56,44,4,-2,-116,19,26,-51,-4,31,44,-87,20,-34,21,13,-55,-49,18,21,-127,-120,-25,-58,-44,-79,31,15, 
  /* [3][0][][] */ 19,5,25,31,-106,-28,1,51,-52,-67,-18,83,12,-21,-84,-60,-30,25,-3,-57,-56,127,19,-66,21,47,53,-56,15,18,27,34,33,27,17,3,50,65,23,5,29,-35,21,-44,-12,16,28,47, 
  /* [4][0][][] */ -53,18,-123,20,-16,95,9,35,-19,127,30,62,25,-73,-24,38,-12,0,-20,39,1,29,-80,11,-5,2,53,-5,37,-62,126,84,50,52,0,-52,-82,16,2,-38,51,25,19,18,35,38,22,58, 
  /* [5][0][][] */ -30,-5,34,-7,53,-68,-38,-29,-24,-58,9,-34,36,-1,-13,7,21,-4,9,26,27,58,16,14,20,-1,-33,-4,-30,-4,-127,-17,-37,-8,25,-24,-1,-33,8,-16,-10,2,-32,-11,27,36,-8,44, 
  /* [6][0][][] */ 7,55,-1,74,-13,38,-51,54,-85,-37,40,20,46,8,43,7,6,-38,-52,41,-11,59,42,-40,-90,-9,-32,17,-96,-2,-60,20,6,-36,-44,-46,127,5,-40,-65,42,24,35,-61,-72,-11,-52,-41, 
  /* [7][0][][] */ -53,12,-84,29,-22,6,-1,-12,-61,-44,44,64,53,20,-69,-86,-71,92,-11,-8,35,19,41,-36,-47,109,-47,-117,-43,-7,-122,-12,-19,-42,-55,15,-33,-44,-47,-30,-23,50,59,-9,-59,-77,127,-59, 
};
const TfArray<8, float> quant15_scale = { 8, { 0.0026071926113218069, 0.0032996546942740679, 0.0028113059233874083, 0.0045998445712029934, 0.0034887809306383133, 0.0049162316136062145, 0.0040007554925978184, 0.0034557052422314882, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 8843, 4789, 10815, 7043, 28843, -2732, -2045, 100, 575, -14163, -2066, -3104, 18159, 10821, 5850, -1410, 5610, 6860, 259, -3552, 9481, -2186, 11321, 556, 7502, 12289, -107, 407, -2723, 2709, 5940, 4966, 3126, -1819, 2436, 2386, 5248, 8585, 2457, 180, 7497, -5735, 5769, 21, 1376, 1966, 5603, 194, };
const TfArray<48, float> quant16_scale = { 48, { 0.00034117535687983036, 0.00014632615784648806, 6.1309066950343549e-05, 0.00020989611221011728, 7.0104302722029388e-05, 0.00032360089244320989, 0.00020278147712815553, 0.0004632802156265825, 0.00039827803266234696, 0.00026535539655014873, 0.00015918959979899228, 0.000233408049098216, 4.792935578734614e-05, 9.2429923824965954e-05, 0.00021791094332002103, 0.0001994201447814703, 0.00013312835653778166, 0.00014928975724615157, 0.0003773178905248642, 0.00024893856607377529, 0.00017248290532734245, 0.00017513286729808897, 0.00017832986486610025, 0.00012671250442508608, 0.00017174979439005256, 0.0001284163590753451, 0.00058772618649527431, 0.00021892122458666563, 0.00043240722152404487, 0.00021318337530829012, 0.00020645643235184252, 0.00045596336713060737, 0.00033360198722220957, 0.00044366161455400288, 0.0001803353225113824, 0.00018792779883369803, 0.00024944584583863616, 0.00014641095185652375, 0.00022714996885042638, 0.00021965907944831997, 0.00016164717089850456, 0.00024605583166703582, 0.00026921764947474003, 0.00039313518209382892, 0.00053254381055012345, 0.0004909994313493371, 0.00022507405083160847, 0.00041629682527855039, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -118,-51,60,0,-127,24,-115,-1,-16,127,55,20,-31,48,-4,33,21,18,38,-7,-127,-26,6,50,-34,-7,-8,-69,26,-116,95,52,-10,43,38,-44,26,-127,-31,127,-71,39,-12,-3,-9,-1,6,-27, 6,-127,-4,39,-64,34,-96,-8,17,22,127,82,-89,-88,-125,-51,-1,-54,127,127,15,53,-64,19,-78,-14,1,-127,7,-71,-23,-127,-13,22,-51,-127,-16,13,15,88,127,-4,-18,127,5,-127,5,-41, -127,-14,59,20,-117,32,-74,-4,-12,116,-1,-5,-86,51,11,60,-46,-10,38,-34,-119,-28,31,17,-2,-30,12,-50,-30,-127,46,3,-1,31,-58,-40,26,-104,16,98,-67,29,-8,8,5,1,10,31, 
  /* [0][1][][] */ 56,-37,52,16,-55,7,76,-13,-62,57,53,50,-84,-47,-101,113,-32,4,63,103,-6,38,-76,-13,-39,-114,-19,-64,127,16,44,119,-127,12,105,-5,5,15,-127,-107,43,-28,8,13,-127,42,2,-60, 118,6,-127,-127,82,127,14,127,-127,-104,-15,127,-102,-127,-127,-127,-11,-127,-74,82,127,127,-50,84,-127,68,-113,82,-55,-43,-127,-117,6,127,-127,83,-127,-82,109,-32,-71,127,-127,-77,101,81,-127,-80, 64,2,110,22,-27,-26,15,-24,-37,24,9,-15,-55,-96,-96,98,-127,-45,46,90,-36,49,-27,-127,12,-93,127,-11,-39,88,-51,93,96,-29,-54,6,3,-34,-19,-42,21,-29,-13,-9,-4,28,-14,127, 
  /* [0][2][][] */ -119,-47,59,-50,-29,23,63,1,80,64,42,24,-59,62,11,-2,70,46,6,-61,-47,-18,-30,29,-52,-21,-10,9,15,17,89,-29,-14,24,82,13,31,-90,-60,-20,-39,7,-2,-16,-21,-10,-13,2, -80,-53,78,-77,-68,-13,127,0,89,65,72,-29,120,-116,-102,-16,-31,35,-124,8,-73,22,-127,-11,-1,-127,-5,29,14,47,15,-98,-11,-43,-17,23,-7,51,32,-67,-5,18,18,-53,15,-26,-10,11, -61,-10,43,-24,-44,48,38,-5,41,37,7,34,-127,41,30,4,-54,52,7,-61,-47,-20,20,-66,-29,-25,7,25,-3,10,28,-60,-15,32,-28,9,37,-77,-11,-47,-36,32,12,-2,-17,4,5,2, 
};
const TfArray<48, float> quant17_scale = { 48, { 0.014499952085316181, 0.0062188613228499889, 0.0026056354399770498, 0.0089205848053097725, 0.0029794329311698675, 0.01375303789973259, 0.0086182123050093651, 0.01968940906226635, 0.01692681573331356, 0.011277603916823864, 0.0067655579186975956, 0.0099198417738080025, 0.0020369975827634335, 0.0039282715879380703, 0.0092612151056528091, 0.0084753558039665222, 0.0056579550728201866, 0.0063448143191635609, 0.016036009415984154, 0.010579888708889484, 0.0073305233381688595, 0.0074431467801332474, 0.0075790188275277615, 0.0053852810524404049, 0.0072993659414350986, 0.0054576951079070568, 0.024978362023830414, 0.0093041518703103065, 0.018377305939793587, 0.009060293436050415, 0.0087743978947401047, 0.019378442317247391, 0.014178084209561348, 0.018855618312954903, 0.0076642511412501335, 0.0079869311302900314, 0.010601447895169258, 0.0062224650755524635, 0.0096538737416267395, 0.0093355104327201843, 0.0068700048141181469, 0.010457373224198818, 0.011441749520599842, 0.016708245500922203, 0.022633111104369164, 0.020867476239800453, 0.0095656467601656914, 0.01769261434674263, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 7150, -346, 771, 1118, 1724, 781, 4256, -563, 6484, 7236, -518, 76, 1129, 949, 250, 2058, 2573, 1849, -877, -148, 1756, 1876, 3213, 52, 2571, 1376, 5211, -387, 4637, -169, 4312, 3892, 2151, 786, 1067, 1745, 1326, 1460, 1415, 1031, -335, 1947, 1065, 3120, 4088, 2099, 169, 1712, };
const TfArray<48, float> quant18_scale = { 48, { 0.00014674908015877008, 0.00047451714635826647, 0.00055481249000877142, 0.00032208589254878461, 0.00039298628689721227, 0.00028826869674958289, 0.00015412466018460691, 0.00033976769191212952, 0.00013958461931906641, 0.00010764640319393948, 0.00028886893414892256, 0.00028590689180418849, 0.00043387131881900132, 0.00036162693868391216, 0.00016316048277076334, 0.00026186913601122797, 0.000223159120650962, 0.00039807127905078232, 0.00044730477384291589, 0.00018633622676134109, 0.00040387819171883166, 0.00017872010357677937, 0.00020554375078063458, 0.00036392355104908347, 0.00025482039200142026, 0.00047502949018962681, 0.00018100370652973652, 0.00065086717950180173, 0.00020073891209904104, 0.00018323116819374263, 0.00018298297072760761, 0.0001537515054224059, 0.00041998494998551905, 0.00016730729839764535, 0.00031134238815866411, 0.00040568780968897045, 0.00047642865683883429, 0.00030890805646777153, 0.00041860141209326684, 0.00020210270304232836, 0.00029463774990290403, 0.0003386481839697808, 0.00068562943488359451, 0.00022524295491166413, 0.00021939702855888754, 0.00018550452659837902, 0.00045163743197917938, 0.00038796613807789981, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 66,-76,21,-8,58,-127,-22,-75, 
  /* [1][0][][] */ -44,-62,-91,58,-127,62,-42,19, 
  /* [2][0][][] */ 55,-55,43,-23,127,-21,-12,80, 
  /* [3][0][][] */ -13,127,-25,106,11,11,-54,-37, 
  /* [4][0][][] */ -31,127,74,-32,43,14,-52,29, 
  /* [5][0][][] */ -85,32,-8,15,127,-12,76,-7, 
  /* [6][0][][] */ 127,-36,116,39,33,97,87,2, 
  /* [7][0][][] */ -36,-52,56,61,81,18,-49,127, 
  /* [8][0][][] */ 19,7,-78,-74,-59,127,-113,28, 
  /* [9][0][][] */ -127,40,-96,9,111,-55,-58,19, 
  /* [10][0][][] */ -17,-98,60,32,-45,-99,-127,-102, 
  /* [11][0][][] */ 41,86,-24,-7,-26,-74,24,127, 
  /* [12][0][][] */ 45,-45,-102,62,-98,127,62,105, 
  /* [13][0][][] */ -52,-35,-127,21,-97,83,22,42, 
  /* [14][0][][] */ -57,127,-88,89,96,30,-7,72, 
  /* [15][0][][] */ -103,-3,-19,-17,99,87,-88,-127, 
  /* [16][0][][] */ 89,-127,-97,-29,-57,109,-54,-14, 
  /* [17][0][][] */ 23,127,-105,-47,-83,26,69,-120, 
  /* [18][0][][] */ -64,-127,50,13,122,-55,-42,54, 
  /* [19][0][][] */ -78,98,-31,36,15,-96,-127,53, 
  /* [20][0][][] */ 70,-2,31,-47,-14,-51,24,127, 
  /* [21][0][][] */ 74,-51,127,96,-29,127,74,-22, 
  /* [22][0][][] */ -22,127,4,21,112,-90,-98,-56, 
  /* [23][0][][] */ 35,-70,36,127,-9,-43,69,-47, 
  /* [24][0][][] */ -37,50,127,-59,-28,-29,21,-32, 
  /* [25][0][][] */ -53,-123,102,70,26,-7,-29,127, 
  /* [26][0][][] */ 46,-24,-127,-69,-84,57,36,96, 
  /* [27][0][][] */ 44,122,-111,-60,-50,33,28,-127, 
  /* [28][0][][] */ -18,43,-45,-81,-19,-37,-127,-41, 
  /* [29][0][][] */ -111,35,-119,-43,127,63,-31,-30, 
  /* [30][0][][] */ 97,-34,18,-14,-127,91,125,83, 
  /* [31][0][][] */ -62,84,-58,92,127,-87,-7,-17, 
  /* [32][0][][] */ 2,67,43,-53,127,-31,-18,-72, 
  /* [33][0][][] */ -127,51,-125,-6,52,30,-26,6, 
  /* [34][0][][] */ 64,-21,72,-93,-48,-127,60,101, 
  /* [35][0][][] */ -127,46,40,-12,-93,-2,-12,18, 
  /* [36][0][][] */ 3,-45,-33,31,-15,4,127,32, 
  /* [37][0][][] */ -37,-27,-92,-53,-32,-127,-82,-16, 
  /* [38][0][][] */ -127,38,14,12,-127,12,56,23, 
  /* [39][0][][] */ -43,-63,57,-48,-35,127,-122,-97, 
  /* [40][0][][] */ 76,-127,25,68,-60,-51,115,56, 
  /* [41][0][][] */ 29,127,91,46,25,30,-96,-38, 
  /* [42][0][][] */ 40,127,-28,-19,-31,23,-16,-48, 
  /* [43][0][][] */ -43,32,-64,-127,3,26,-77,50, 
  /* [44][0][][] */ -42,26,-27,20,40,127,-2,-14, 
  /* [45][0][][] */ 5,86,-100,-51,-55,-74,-23,127, 
  /* [46][0][][] */ 27,104,-99,-30,-67,26,10,-127, 
  /* [47][0][][] */ 20,-1,-10,-68,-64,-127,-34,44, 
};
const TfArray<48, float> quant19_scale = { 48, { 0.0013532711891457438, 0.00437583914026618, 0.0051162960007786751, 0.0029701688326895237, 0.0036239887122064829, 0.0026583177968859673, 0.0014212862588465214, 0.003133224556222558, 0.0012872028164565563, 0.00099267926998436451, 0.0026638531126081944, 0.0026365381199866533, 0.004001016728579998, 0.0033348030410706997, 0.0015046115731820464, 0.0024148698430508375, 0.002057899022474885, 0.0036708808038383722, 0.0041248956695199013, 0.0017183306626975536, 0.0037244302220642567, 0.0016480972990393639, 0.0018954559927806258, 0.003355981782078743, 0.0023498686496168375, 0.0043805637396872044, 0.0016691558994352818, 0.0060020801611244678, 0.0018511473899707198, 0.0016896968008950353, 0.0016874079592525959, 0.001417845138348639, 0.0038729612715542316, 0.0015428521437570453, 0.0028710959013551474, 0.0037411178927868605, 0.0043934662826359272, 0.0028486470691859722, 0.0038602028507739305, 0.0018637238536030054, 0.0027170511893928051, 0.0031229008454829454, 0.0063226460479199886, 0.0020771154668182135, 0.0020232063252478838, 0.0017106609884649515, 0.0041648498736321926, 0.0035776945296674967, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 7153, -3281, -1518, 1388, 1829, -16065, -5173, -12140, };
const TfArray<8, float> quant20_scale = { 8, { 0.00034012633841484785, 0.00013999918883200735, 0.00025822018506005406, 0.00020902922551613301, 0.00017597833357285708, 9.7788259154185653e-05, 0.00019397641881369054, 0.00014173923409543931, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -23,16,1,31,-19,8,1,29,-47,-10,-35,-2,-19,13,36,4,-47,-20,31,-15,-23,127,-20,-19,-21,-32,4,30,-34,34,8,-24,-12,21,29,35,22,5,29,-23,9,-32,-18,-14,-19,25,22,13, 
  /* [1][0][][] */ 13,57,4,44,34,37,50,117,-46,-51,76,-29,-43,-29,27,-26,-21,-6,38,0,33,-127,-7,-66,7,14,-17,10,-9,9,-34,-55,-35,4,18,-14,19,68,66,-16,23,23,36,-28,-36,42,10,51, 
  /* [2][0][][] */ -5,26,4,28,25,19,-25,40,24,15,63,16,6,-16,32,-52,25,27,-7,9,-11,127,8,-12,16,-47,-6,3,-22,31,-16,-54,-14,5,22,-36,30,-8,-42,-27,21,-13,-8,-45,-29,32,14,20, 
  /* [3][0][][] */ -38,54,-6,1,-18,37,70,4,2,5,8,21,-14,38,39,21,-16,-2,8,-4,47,-80,-7,23,-14,0,-127,29,-38,-27,-11,7,-40,-11,14,27,36,-12,-42,-28,-1,-17,12,23,19,-8,47,22, 
  /* [4][0][][] */ 20,0,-41,7,18,-10,17,-11,-54,12,-5,19,3,-11,-20,12,-27,31,-17,-6,2,-127,-9,-8,38,37,30,-44,44,-8,0,8,-17,45,25,-10,-21,12,-4,4,-10,-59,-84,19,29,31,-2,-9, 
  /* [5][0][][] */ -10,45,81,15,-3,26,18,-109,67,-34,-15,-5,92,-75,-5,23,16,-36,38,9,-32,127,14,3,80,7,93,54,105,63,-3,-27,-82,-40,106,48,-54,-46,11,-99,19,-22,69,62,-48,-44,-32,-32, 
  /* [6][0][][] */ 66,-3,-26,13,51,-17,49,-37,51,35,9,-34,-11,52,18,-75,29,-127,-21,-21,34,-11,3,34,-42,-47,46,-17,57,-40,120,55,62,40,36,-60,-58,23,55,-30,-35,26,-74,71,43,15,49,-41, 
  /* [7][0][][] */ -11,51,44,51,-2,19,67,95,54,28,-3,76,-56,-1,32,-17,79,-21,-28,-15,3,-127,-5,-94,-68,76,49,17,3,24,16,-21,19,-22,17,20,-19,104,-97,-30,4,-1,25,-8,-48,-4,44,21, 
};
const TfArray<8, float> quant21_scale = { 8, { 0.014455369673669338, 0.0059499656781554222, 0.010974357835948467, 0.0088837416842579842, 0.0074790790677070618, 0.0041560009121894836, 0.0082439975813031197, 0.0060239173471927643, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 31278, 26735, 10137, 17288, 5199, 10415, 22389, 9487, 48866, -1744, 3034, 19681, 16210, 236, 8018, -79, 6533, 37065, 21486, 2751, 8016, -5037, 563, 1806, 45256, 38596, 7061, 1746, 3492, 14642, -842, 2014, -16884, 13492, 34509, 29037, 31480, 26160, -504, 1195, 4251, 43834, 1508, 5833, 648, -1096, 24482, 11196, };
const TfArray<48, float> quant22_scale = { 48, { 3.1872481486061588e-05, 7.7094293374102563e-05, 0.00010458593897055835, 5.9234531363472342e-05, 9.167966345557943e-05, 7.5794661825057119e-05, 0.000128630839753896, 0.00010153278708457947, 3.9097834815038368e-05, 7.2138354880735278e-05, 6.7205415689386427e-05, 5.67047500226181e-05, 0.00012341521505732089, 4.6060795284574851e-05, 7.1252907218877226e-05, 6.6714048443827778e-05, 3.2290623494191095e-05, 5.3515366744250059e-05, 4.8743029765319079e-05, 0.0001618180685909465, 4.9022295570466667e-05, 0.00037927567609585822, 0.00015498070570174605, 8.0325029557570815e-05, 3.9135848055593669e-05, 7.316422852454707e-05, 4.9874444812303409e-05, 7.7676326327491552e-05, 3.8619666156591848e-05, 8.1784462963696569e-05, 0.00025928954710252583, 0.00026657895068638027, 7.7887962106615305e-05, 7.0906018663663417e-05, 7.1291338826995343e-05, 0.00013306655455380678, 6.7657289037015289e-05, 0.00012047513155266643, 0.00015159326721914113, 8.5714265878777951e-05, 0.00016078134649433196, 3.3408618037356064e-05, 7.3126888310071081e-05, 4.1500639781588688e-05, 0.00035580334952101111, 0.0001239777629962191, 5.6952299928525463e-05, 6.003329690429382e-05, } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -50,-91,-42,-64,-67,-5,-62,-66,-38,23,40,-84,-42,25,-94,68,72,-101,-64,103,55,58,-60,93,-96,-57,74,87,75,-56,98,94,50,-55,-81,-45,-113,-74,124,70,-19,-14,34,73,127,108,-63,-42, -90,-105,-74,-111,-127,9,-80,-95,-55,64,78,-112,-72,66,-127,88,87,-100,-121,-3,93,77,103,118,-67,-73,105,115,108,-86,78,112,75,-100,-100,-75,-90,-77,127,103,-67,-64,62,86,42,127,-94,-80, -38,-39,-51,-70,-87,21,-70,-61,-46,13,36,-46,-41,56,-71,43,41,-52,-34,-32,58,-127,-54,44,-22,-49,50,39,64,-22,46,54,36,-67,-57,-35,-56,-57,15,42,-25,-46,47,49,-17,49,-48,-14, 
  /* [0][1][][] */ -57,-127,-78,-92,-89,-45,-97,-88,-84,84,70,-107,-66,68,-119,89,103,-117,-88,104,103,74,-74,117,-127,-80,85,115,93,-90,115,89,75,-80,-122,-75,-127,-101,110,108,-74,-69,67,98,122,116,-86,-62, -127,-127,-127,-127,-107,-125,-127,-127,-127,127,127,-127,-127,127,-44,127,127,-127,-127,-65,127,82,127,127,-121,-127,127,127,127,-127,127,127,127,-127,-122,-127,-126,-127,116,127,-127,-127,127,127,84,120,-127,-127, -47,-40,-75,-96,-112,-115,-115,-98,-68,76,58,-69,-52,84,-46,62,102,-61,-51,-127,102,-125,-75,56,-32,-82,50,36,83,-62,56,45,66,-72,-63,-64,-85,-83,37,47,-75,-70,75,82,-35,12,-65,-55, 
  /* [0][2][][] */ -69,-45,-40,-17,-60,-35,-52,-59,-56,61,36,-35,-33,17,-94,43,49,-36,-51,12,66,19,-39,74,-57,-62,37,51,41,-30,75,26,67,-35,-101,-55,-89,-52,1,90,-71,-42,47,51,44,45,-59,-54, -105,-33,-60,-26,-76,-127,-60,-54,-79,83,51,-77,-49,57,-104,41,70,-31,-60,-86,89,7,26,41,-51,-83,54,52,62,-73,71,47,84,-60,-127,-87,-69,-50,9,102,-67,-86,73,61,18,17,-78,-84, -67,6,-39,-24,-46,-106,-72,-64,-30,58,16,-48,-15,36,1,33,72,-29,-52,-84,58,-51,-40,39,-3,-67,25,20,52,-40,26,15,47,-39,-99,-54,-44,-54,7,52,-49,-46,49,36,-48,-7,-37,-62, 
};
const TfArray<48, float> quant23_scale = { 48, { 0.0013545803958550096, 0.0032765073701739311, 0.0044449022971093655, 0.0025174675974994898, 0.0038963856641203165, 0.0032212729565799236, 0.0054668104276061058, 0.0043151434510946274, 0.0016616579378023744, 0.0030658801551908255, 0.0028562301304191351, 0.0024099517613649368, 0.0052451463416218758, 0.0019575837068259716, 0.0030282484367489815, 0.0028353470843285322, 0.0013723515439778566, 0.002274403115734458, 0.0020715787541121244, 0.0068772677332162857, 0.0020834475290030241, 0.01611921563744545, 0.0065866797231137753, 0.003413813654333353, 0.0016632735496386886, 0.0031094795558601618, 0.0021196638699620962, 0.0033012437634170055, 0.0016413357807323337, 0.0034758397378027439, 0.011019805446267128, 0.011329605244100094, 0.0033102384768426418, 0.0030135058332234621, 0.003029881976544857, 0.005655328743159771, 0.0028754347003996372, 0.0051201931200921535, 0.006442713551223278, 0.0036428561434149742, 0.0068332068622112274, 0.0014198662247508764, 0.003107892582193017, 0.0017637771088629961, 0.015121642500162125, 0.005269054789096117, 0.0024204726796597242, 0.0025514150038361549, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 389, 1633, 839, -148, -418, 108, 3788, 1637, 1481, -1234, 663, 9, 2591, 56, 523, -533, -47, 2070, 389, 1110, -347, 18405, 1107, -721, 760, 2751, 642, -713, 190, 73, -1208, -952, 1567, 445, 3275, 6173, 2544, 3766, -1514, -1164, -482, 879, 577, 286, -1073, -1621, 1540, 488, };
const TfArray<48, float> quant24_scale = { 48, { 0.00061934179393574595, 0.00042723890510387719, 0.00054134294623509049, 0.00072017667116597295, 0.00059583754045888782, 0.00046762978308834136, 0.00024076724366750568, 0.00036593436379916966, 0.00037323631113395095, 0.000394775765016675, 0.00054200371960178018, 0.00050296320114284754, 0.00024956377455964684, 0.00078660761937499046, 0.00081456429325044155, 0.00055702321697026491, 0.00095521489856764674, 0.00031497186864726245, 0.00057340838247910142, 0.00034920650068670511, 0.00069144723238423467, 8.8987661001738161e-05, 0.00040685807471163571, 0.00031991672585718334, 0.00038656586548313498, 0.0002956438111141324, 0.00081334676360711455, 0.00059711851645261049, 0.00071272294735535979, 0.00086709746392443776, 0.0004051791038364172, 0.00042059615952894092, 0.00045546444016508758, 0.00057157856645062566, 0.00025938919861800969, 0.00016361531743314117, 0.00035992194898426533, 0.00023298994346987456, 0.00040365889435634017, 0.00029573909705504775, 0.00064381252741441131, 0.00056395120918750763, 0.00048103395965881646, 0.00057069235481321812, 0.00047855835873633623, 0.00035027114790864289, 0.0003893350949510932, 0.00032238318817690015, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -28,63,-63,41,50,127,32,13, 
  /* [1][0][][] */ 46,-127,-95,-22,-35,65,53,-28, 
  /* [2][0][][] */ -51,43,-33,-99,-34,-127,-27,-58, 
  /* [3][0][][] */ -17,127,65,29,4,-89,-34,35, 
  /* [4][0][][] */ -110,37,-127,78,19,-30,-60,-54, 
  /* [5][0][][] */ 86,-110,-127,37,10,-1,59,-23, 
  /* [6][0][][] */ -15,-84,-62,15,-127,-48,-48,87, 
  /* [7][0][][] */ -26,-38,-11,-42,49,2,-31,127, 
  /* [8][0][][] */ 24,26,-103,-106,47,-45,-127,-95, 
  /* [9][0][][] */ -127,62,1,102,-7,73,82,5, 
  /* [10][0][][] */ -34,-8,101,-127,-31,72,18,43, 
  /* [11][0][][] */ 91,-15,97,32,-50,51,87,127, 
  /* [12][0][][] */ 58,50,38,-55,50,100,106,-127, 
  /* [13][0][][] */ 32,48,-44,64,-9,-127,-53,61, 
  /* [14][0][][] */ 15,-127,-25,-27,10,64,36,-32, 
  /* [15][0][][] */ -92,-12,-13,-60,58,127,-67,-34, 
  /* [16][0][][] */ 4,-36,120,18,-26,33,127,74, 
  /* [17][0][][] */ 60,24,56,19,-10,-81,-31,-127, 
  /* [18][0][][] */ -127,15,-68,-7,-4,-111,13,-69, 
  /* [19][0][][] */ 51,24,105,-13,-64,46,114,127, 
  /* [20][0][][] */ 27,127,56,-8,30,46,38,2, 
  /* [21][0][][] */ -39,28,28,-116,-63,127,-9,-8, 
  /* [22][0][][] */ 39,7,86,-2,-44,18,127,86, 
  /* [23][0][][] */ -73,109,47,39,-96,-73,-127,127, 
  /* [24][0][][] */ -13,-2,102,29,-125,127,0,-91, 
  /* [25][0][][] */ -47,20,79,24,-127,52,-73,19, 
  /* [26][0][][] */ -42,-127,30,-41,14,46,-9,-17, 
  /* [27][0][][] */ -18,61,30,42,-22,127,-35,-16, 
  /* [28][0][][] */ 16,-114,51,26,45,127,43,31, 
  /* [29][0][][] */ 16,127,-24,30,-66,-52,-25,22, 
  /* [30][0][][] */ -50,80,103,94,-127,-60,-45,-107, 
  /* [31][0][][] */ 17,61,22,53,-42,-7,11,-127, 
  /* [32][0][][] */ -27,-32,-59,73,-127,-38,-60,15, 
  /* [33][0][][] */ 85,16,61,51,-35,67,55,127, 
  /* [34][0][][] */ 123,15,-127,-40,-58,-10,72,42, 
  /* [35][0][][] */ 120,107,114,-127,-63,-104,36,126, 
  /* [36][0][][] */ -38,-118,127,44,61,80,-2,-31, 
  /* [37][0][][] */ -14,11,-29,-5,-15,-49,-49,127, 
  /* [38][0][][] */ 127,5,51,3,-9,18,-62,38, 
  /* [39][0][][] */ 61,83,-124,-127,-117,98,43,-63, 
  /* [40][0][][] */ -53,127,-40,70,-62,-27,-77,-5, 
  /* [41][0][][] */ -127,43,-34,-61,78,51,3,-82, 
  /* [42][0][][] */ 44,-35,-9,-27,-24,127,7,78, 
  /* [43][0][][] */ -71,37,127,11,72,18,-42,8, 
  /* [44][0][][] */ 9,127,2,27,-44,-60,-21,-5, 
  /* [45][0][][] */ -87,88,76,-127,-75,13,-79,-44, 
  /* [46][0][][] */ 25,-52,-21,11,22,0,-127,68, 
  /* [47][0][][] */ -121,-127,26,57,34,-74,9,107, 
};
const TfArray<48, float> quant25_scale = { 48, { 0.0034545843955129385, 0.0023830668069422245, 0.0030195198487490416, 0.0040170243009924889, 0.0033234816510230303, 0.0026083602569997311, 0.0013429592363536358, 0.0020411203149706125, 0.0020818493794649839, 0.0022019927855581045, 0.0030232055578380823, 0.0028054441791027784, 0.001392024802044034, 0.0043875649571418762, 0.0045435028150677681, 0.0031069819815456867, 0.0053280279971659184, 0.0017568600596860051, 0.0031983754597604275, 0.0019478151807561517, 0.0038567765150219202, 0.00049635820323601365, 0.0022693858481943607, 0.0017844417598098516, 0.0021561994217336178, 0.0016490514390170574, 0.004536711610853672, 0.0033306267578154802, 0.003975448664277792, 0.0048365239053964615, 0.0022600209340453148, 0.002346014603972435, 0.0025405040942132473, 0.0031881690956652164, 0.0014468292938545346, 0.00091261870693415403, 0.0020075840875506401, 0.0012995786964893341, 0.0022515414748340845, 0.0016495828749611974, 0.0035910778678953648, 0.0031456251163035631, 0.002683126600459218, 0.0031832258682698011, 0.002669318113476038, 0.0019537536427378654, 0.0021716456394642591, 0.0017981991404667497, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 7007, -13189, -2637, 5560, 2980, -3644, 2048, 5071, };
const TfArray<8, float> quant26_scale = { 8, { 0.00022473080025520176, 0.00015868920309003443, 9.910955122904852e-05, 0.00017785387171898037, 0.00033776319469325244, 0.00014921391266398132, 0.00025963096413761377, 9.0263551101088524e-05, } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -25,-8,-10,-29,-71,-16,2,-17,61,10,5,-5,8,13,-15,8,-32,13,-19,-21,3,7,-19,-2,26,-11,87,4,-14,-78,-17,9,0,33,127,-14,-22,-46,28,-41,25,5,-5,-17,-18,-4,-23,-89, 
  /* [1][0][][] */ 24,-33,-7,69,-1,-7,22,44,71,86,40,-54,-53,71,7,3,-8,-31,24,-25,-64,44,-43,33,87,16,-27,27,29,1,127,20,-17,-36,-30,1,-13,15,-17,-11,2,-14,8,26,-6,37,30,21, 
  /* [2][0][][] */ -62,-11,-76,110,-72,-79,31,-63,-69,46,49,-100,-24,-17,-32,10,127,18,-74,-55,-71,-18,-31,25,88,-27,125,-12,84,-10,-60,10,-1,-14,49,-2,-36,23,-6,-103,56,-75,-57,-107,-30,-74,-67,108, 
  /* [3][0][][] */ 28,-56,15,-42,32,-22,-4,-75,49,-62,5,-22,-83,-74,-13,0,14,-14,43,-34,-13,33,-79,4,74,-36,45,20,0,-8,1,-25,-37,41,19,-25,-49,31,-2,-2,127,20,-49,39,-48,51,-6,-49, 
  /* [4][0][][] */ 18,8,9,13,8,33,-12,-14,44,19,11,-42,3,8,-67,17,2,19,23,-18,-25,28,0,37,37,1,-33,9,44,-15,-16,27,-2,-9,29,17,-127,-2,53,11,13,-9,-2,16,-31,49,-25,-95, 
  /* [5][0][][] */ -44,-92,29,120,-30,-6,-59,106,-108,77,57,36,-85,24,67,-41,-10,43,22,1,-2,32,39,49,-49,6,-31,55,-47,-108,39,30,-110,-55,-26,-8,127,-9,-25,20,-37,-18,82,98,28,44,49,46, 
  /* [6][0][][] */ 84,-4,-13,-12,82,-33,-23,-56,38,28,27,-33,-12,5,15,14,-3,-5,-12,-34,-28,16,18,23,64,-57,51,-8,-17,109,-21,7,45,29,-127,-16,-87,-40,26,-67,-14,-11,-6,-91,-8,3,-23,-9, 
  /* [7][0][][] */ -41,-76,66,-45,21,125,45,-60,6,-109,-55,3,-9,-14,-67,4,11,-57,116,67,53,-44,17,0,-27,19,116,-1,42,25,18,3,-45,-33,-51,111,-127,99,-50,-34,-43,63,6,-79,31,-15,77,-22, 
};
const TfArray<8, float> quant27_scale = { 8, { 0.0095510585233569145, 0.0067442911677062511, 0.0042121559381484985, 0.0075587895698845387, 0.01435493491590023, 0.0063415910117328167, 0.011034315451979637, 0.0038362008053809404, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 9417, 4122, -141, 8990, -611, -680, 7033, 133, 3570, 6508, 147, 4, -2747, 9428, 5134, -442, -4066, -148, -671, -630, 12126, 636, -16048, 1931, -6173, -218, 901, -125, -818, -2038, -3666, 43, 16272, -1906, 2340, 1207, 449, 271, -183, 2553, 27779, -272, 2478, 85, 301, -748, -3678, 6903, };
const TfArray<48, float> quant28_scale = { 48, { 0.00024183592176996171, 0.00022270237968768924, 0.00030034547671675682, 0.00037275539943948388, 0.00037952838465571404, 0.00072720547905191779, 0.0001109678196371533, 0.00023618755221832544, 6.3886283896863461e-05, 0.00019536500622052699, 0.00042705022497102618, 0.00042766047408804297, 0.0002739029296208173, 0.00016997185593936592, 0.00013112576561979949, 0.000286541209788993, 7.063298107823357e-05, 0.004046224057674408, 0.00049628771375864744, 0.00024985361960716546, 9.307786967838183e-05, 0.00054676155559718609, 9.7904128779191524e-05, 0.00016532745212316513, 0.00026067622820846736, 0.00041093598701991141, 0.0002812578750308603, 0.0003053203399758786, 0.00056096713524311781, 0.00024461708380840719, 0.00020421943918336183, 0.00053984409896656871, 6.7399392719380558e-05, 0.00037778477417305112, 0.00013235906953923404, 0.00073720421642065048, 0.00018265628023073077, 0.00029698415892198682, 0.0015255239559337497, 0.00031466735526919365, 3.3255386370001361e-05, 0.00040491885738447309, 0.00017353535804431885, 0.00011156377877341583, 0.00021891274082008749, 0.00025536151952110231, 0.00013494786981027573, 0.00043524455395527184, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -68,43,-43,-54,-7,-21,5,-16,-6,-20,3,44,-5,-98,-96,19,127,-5,54,45,-113,-61,127,-127,-3,-45,-8,96,-21,15,15,127,-40,-3,-18,0,-6,-27,-11,18,127,-78,-55,52,82,-104,-27,-3, -6,-127,32,-127,-2,-22,-88,127,67,-79,22,42,13,-127,-104,17,-22,9,-35,-73,-82,2,80,119,20,-4,12,127,23,-2,8,-101,-127,34,-12,-25,127,-115,51,-10,5,-102,-61,34,105,72,52,-33, -26,-7,12,-23,-1,30,8,63,-8,12,0,28,19,40,-86,27,81,10,-36,21,-116,49,77,7,0,70,4,-35,-25,2,10,-37,-77,7,-6,0,-19,127,-16,9,100,-54,10,-32,64,43,-40,-11, 
  /* [0][1][][] */ -24,-22,-127,-23,-27,23,-5,6,25,-69,-4,-104,-25,-41,-127,127,76,1,127,84,-19,127,127,101,13,-49,-41,6,39,-34,20,-100,15,-22,-57,0,-23,-80,41,21,112,127,-23,-11,-63,127,73,-35, -127,43,124,105,127,-117,-127,-15,-14,-127,-127,-127,127,-14,-24,46,-3,-127,-100,-127,127,-12,-98,-112,127,-31,127,-48,127,127,-30,74,-126,-127,127,-127,61,-76,-127,-127,40,109,-99,21,-127,-66,127,127, -23,0,3,18,43,127,-26,54,63,7,53,-54,-6,-2,-76,-12,58,48,-11,53,-48,-118,118,-30,18,127,15,12,35,30,127,25,25,13,54,14,-47,92,50,-11,14,73,127,-13,-52,-46,72,-8, 
  /* [0][2][][] */ -28,7,-62,-14,-1,-17,17,-14,38,10,1,45,-2,7,46,5,7,-5,62,15,-63,-11,53,12,0,-46,-17,-75,-9,-11,-27,-31,28,60,-15,4,-87,6,-9,4,46,-16,-39,-65,-20,15,-90,-41, -16,-45,44,-7,-76,-22,-87,-102,127,56,47,50,-3,-28,-4,19,52,97,-29,-15,-80,-4,7,-43,-2,-42,-68,-82,-25,-30,73,28,-40,54,-76,-3,-3,-105,31,40,-126,-24,-106,127,21,5,36,-52, 12,-11,14,-8,-37,25,15,-102,5,-16,-21,21,9,41,63,-118,39,-27,-24,-8,-46,1,11,-17,1,31,-32,1,-12,-25,1,13,7,52,-54,6,-124,91,-19,22,21,-31,43,51,-25,-9,-103,-24, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.010278026573359966, 0.0094648506492376328, 0.012764682993292809, 0.015842104330658913, 0.016129955649375916, 0.030906232073903084, 0.0047161323018372059, 0.01003797072917223, 0.0027151668909937143, 0.0083030126988887787, 0.018149634823203087, 0.018175570294260979, 0.011640873737633228, 0.0072238035500049591, 0.0055728452280163765, 0.012178000994026661, 0.0030019015539437532, 0.17196451127529144, 0.021092228591442108, 0.010618778876960278, 0.0039558093994855881, 0.023237366229295731, 0.004160925280302763, 0.0070264167152345181, 0.011078739538788795, 0.017464779317378998, 0.011953459121286869, 0.012976113706827164, 0.023841103538870811, 0.010396226309239864, 0.0086793256923556328, 0.022943373769521713, 0.0028644741978496313, 0.016055852174758911, 0.0056252600625157356, 0.031331177800893784, 0.0077628917060792446, 0.012621826492249966, 0.064834766089916229, 0.013373362831771374, 0.0014133538352325559, 0.017209051176905632, 0.0073752524331212044, 0.0047414605505764484, 0.0093037914484739304, 0.010852864943444729, 0.0057352841831743717, 0.018497893586754799, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 1781, 618, 2225, 4995, 199, 2813, 1429, 1202, 1331, 2458, 2179, 2993, 1476, 1156, 1795, 45, 200, -1393, 4112, 1375, 782, 3192, 5023, 333, 1784, 2861, 1734, -148, -1118, 1280, 3303, 2199, 654, 593, 449, -295, 631, 1187, 83, 1434, 903, 3104, 1198, 480, 1119, 624, -147, 7725, };
const TfArray<48, float> quant30_scale = { 48, { 0.00048777993652038276, 0.0007675986853428185, 0.00030587092624045908, 0.00021903173183090985, 0.0021552585531026125, 0.00026248619542457163, 0.00047994477790780365, 0.00043214744073338807, 0.00039300636854022741, 0.00031054118881002069, 0.00033679718035273254, 0.00022220760001800954, 0.00053165416466072202, 0.00039001440745778382, 0.00030296918703243136, 0.00034015404526144266, 0.00059718679403886199, 0.00052753806812688708, 0.00023233128013089299, 0.00072409928543493152, 0.00088095758110284805, 0.00026960519608110189, 0.00017697089060675353, 0.00070305122062563896, 0.00030495226383209229, 0.00033058493863791227, 0.00042946360190398991, 0.00050089583965018392, 0.00041689968202263117, 0.00077514915028586984, 0.00026815943419933319, 0.0003527090884745121, 0.00089460128219798207, 0.00040751261985860765, 0.0013882851926609874, 0.00046536821173503995, 0.00037775156670249999, 0.0003227067063562572, 0.00042554625542834401, 0.00049721170216798782, 0.00040522086783312261, 0.00027874187799170613, 0.00031055632280185819, 0.00046106407535262406, 0.00046382463187910616, 0.00075130077311769128, 0.00055090035311877728, 0.00013651562039740384, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -119,-14,33,-109,-127,114,2,-58, 
  /* [1][0][][] */ 78,0,24,-27,11,63,-127,46, 
  /* [2][0][][] */ -30,58,-127,73,-76,119,35,46, 
  /* [3][0][][] */ 94,-25,-34,72,-3,-73,3,127, 
  /* [4][0][][] */ -75,-2,-7,14,-20,-34,127,1, 
  /* [5][0][][] */ 62,99,5,30,-127,-42,25,-35, 
  /* [6][0][][] */ 1,-73,40,127,11,-104,-20,32, 
  /* [7][0][][] */ 101,-18,100,5,-63,30,56,127, 
  /* [8][0][][] */ -40,-127,52,51,88,-36,-32,6, 
  /* [9][0][][] */ -84,-98,18,-29,-28,-4,-49,127, 
  /* [10][0][][] */ -30,-127,27,94,86,125,20,-29, 
  /* [11][0][][] */ -113,-127,19,-59,49,69,-38,113, 
  /* [12][0][][] */ 80,-9,80,-67,11,-127,78,-6, 
  /* [13][0][][] */ 35,12,17,127,-6,23,37,-59, 
  /* [14][0][][] */ -45,-9,48,-5,127,-24,0,118, 
  /* [15][0][][] */ -98,127,45,69,72,84,-68,104, 
  /* [16][0][][] */ 0,-30,-60,-127,-48,66,19,58, 
  /* [17][0][][] */ 41,127,-1,74,-26,-43,-3,31, 
  /* [18][0][][] */ 30,46,-24,-127,-60,-85,36,-21, 
  /* [19][0][][] */ 36,-71,-127,-89,-86,88,5,2, 
  /* [20][0][][] */ 28,4,9,-6,127,21,31,-37, 
  /* [21][0][][] */ -127,-85,-61,-84,59,44,55,-12, 
  /* [22][0][][] */ -60,-38,76,127,33,-34,-42,115, 
  /* [23][0][][] */ 26,32,-37,127,104,34,37,80, 
  /* [24][0][][] */ 127,1,-110,-19,7,-15,53,-49, 
  /* [25][0][][] */ 0,-10,-45,-14,62,-37,-127,-60, 
  /* [26][0][][] */ 127,12,97,-38,-88,52,68,115, 
  /* [27][0][][] */ -4,-76,-14,127,53,5,-41,-87, 
  /* [28][0][][] */ -66,127,87,66,69,-26,-32,6, 
  /* [29][0][][] */ 0,0,54,5,-70,5,127,65, 
  /* [30][0][][] */ -57,-67,52,-66,-71,127,63,45, 
  /* [31][0][][] */ 114,19,94,-19,-108,78,83,127, 
  /* [32][0][][] */ -107,-15,-28,31,-24,20,127,15, 
  /* [33][0][][] */ -127,121,71,87,18,19,-95,19, 
  /* [34][0][][] */ 120,7,19,-19,8,50,-127,15, 
  /* [35][0][][] */ 7,-3,18,33,-42,34,12,-127, 
  /* [36][0][][] */ 19,-15,-61,-91,49,-5,41,127, 
  /* [37][0][][] */ 59,-36,-47,-54,-24,33,64,-127, 
  /* [38][0][][] */ 31,127,14,107,-73,-88,-14,-25, 
  /* [39][0][][] */ 102,-1,93,-4,-84,39,127,110, 
  /* [40][0][][] */ -69,-81,127,95,-7,-40,-101,31, 
  /* [41][0][][] */ 36,-13,5,15,19,-57,-1,127, 
  /* [42][0][][] */ 46,-108,-99,-100,-57,64,26,-127, 
  /* [43][0][][] */ 108,-5,113,-38,-88,-20,115,127, 
  /* [44][0][][] */ -90,-67,-72,127,68,-10,-53,46, 
  /* [45][0][][] */ 127,-11,81,-17,-41,30,-8,70, 
  /* [46][0][][] */ 26,-127,9,104,113,-2,43,17, 
  /* [47][0][][] */ 79,127,-19,119,-53,-86,32,-95, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0034356170799583197, 0.0054064854048192501, 0.0021543637849390507, 0.0015427226899191737, 0.015180295333266258, 0.0018487886991351843, 0.0033804310951381922, 0.003043776610866189, 0.0027680913917720318, 0.0021872580982744694, 0.0023721889592707157, 0.0015650915447622538, 0.0037446399219334126, 0.00274701789021492, 0.0021339256782084703, 0.0023958326783031225, 0.0042062108404934406, 0.0037156485486775637, 0.0016363963950425386, 0.0051001030951738358, 0.0062049147672951221, 0.0018989305244758725, 0.001246472354978323, 0.004951853770762682, 0.002147893188521266, 0.002328433794900775, 0.003024873323738575, 0.0035279975272715092, 0.0029363809153437614, 0.0054596662521362305, 0.0018887475598603487, 0.0024842624552547932, 0.0063010123558342457, 0.0028702642302960157, 0.0097782136872410774, 0.0032777630258351564, 0.002660646103322506, 0.0022729444317519665, 0.0029972819611430168, 0.0035020487848669291, 0.0028541225474327803, 0.001963283633813262, 0.0021873647347092628, 0.0032474473118782043, 0.003266890998929739, 0.0052916933782398701, 0.0038801981136202812, 0.00096153072081506252, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 4423, -31, 511, 9329, 6881, 4799, 2817, -2321, };
const TfArray<8, float> quant32_scale = { 8, { 0.00018066352640744299, 0.00010581376409390941, 0.00013701316493097693, 0.00019832912948913872, 0.00010947832197416574, 0.00014642241876572371, 0.00013068877160549164, 0.00039969268254935741, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -30,41,-31,0,-45,-32,-81,24,8,20,37,41,36,7,-52,11,-41,43,11,-62,30,42,-127,2,-8,9,-29,50,-6,-12,21,24,13,-23,34,19,-3,104,-70,-19,-13,20,-27,34,4,9,19,-8, 
  /* [1][0][][] */ -71,-108,-58,9,84,-23,-126,61,-26,-37,-10,-81,-17,74,6,-16,115,-127,-7,-16,-56,11,8,-21,14,0,-24,-57,31,-13,-119,-17,24,-56,-85,-101,49,12,-89,-5,-4,42,12,93,-12,8,0,45, 
  /* [2][0][][] */ 11,-70,12,60,106,21,100,-13,-34,-23,-3,-48,8,-27,16,32,-27,-92,47,-54,9,-70,-47,12,-68,60,68,-89,-28,1,-57,-47,21,5,-71,-49,-8,127,79,-35,-12,14,-20,-64,47,37,49,-27, 
  /* [3][0][][] */ 11,0,25,-13,30,21,24,-89,26,21,-9,11,6,-109,-22,6,-29,12,-14,0,-4,46,-127,10,17,-89,30,28,45,-7,-27,50,3,12,-3,-29,-93,-47,11,-12,-6,0,34,2,-13,2,5,-47, 
  /* [4][0][][] */ 40,-56,9,74,56,7,-27,-6,-35,-14,23,-33,77,38,-18,32,-52,-64,66,39,35,-55,127,24,-32,14,-55,-18,-14,19,-82,-46,87,-24,-46,-63,-40,-49,-20,4,-65,102,-1,-16,60,85,46,30, 
  /* [5][0][][] */ -65,-18,-37,50,0,4,-7,-49,-61,-34,-4,-17,17,34,-68,19,127,-13,55,-74,28,-95,-9,-6,93,-107,-109,-12,49,-44,34,-79,10,-61,-30,26,-76,-23,15,-35,-45,24,88,37,43,17,28,-40, 
  /* [6][0][][] */ -36,2,-38,35,-26,74,-77,11,-23,-1,-127,10,49,36,116,21,25,7,42,-17,40,-13,-47,-14,8,-3,-69,16,6,-54,7,-20,33,-46,6,5,-3,-7,-58,-25,-36,44,-25,32,28,30,33,-4, 
  /* [7][0][][] */ 31,-4,41,-17,2,8,14,-13,15,5,-7,0,-10,-6,-2,-11,12,-3,-24,-19,-20,13,127,15,6,-15,-1,10,5,-8,-19,14,-1,22,-1,-17,-11,13,8,28,5,-4,9,-2,-16,-1,-22,13, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0076782000251114368, 0.004497084766626358, 0.0058230594731867313, 0.0084289880469441414, 0.0046528284437954426, 0.0062229526229202747, 0.0055542727932333946, 0.016986938193440437, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 6722, -26, -83, -178, 6280, 1828, 2199, 1865, 2996, -665, 272, 75, 1315, 672, -1268, 289, 9734, -630, 1741, 32880, -55, 12898, -64, -1184, 925, -9031, 7252, -413, 926, -805, 4034, 5664, 935, 689, 1508, 1389, 6579, -2283, 3421, -226, 185, -517, 19725, -8438, 471, -55, 156, -642, };
const TfArray<48, float> quant34_scale = { 48, { 5.4793712479295209e-05, 0.00021865680173505098, 0.0023585578892379999, 0.0008554694359190762, 0.00015448725025635213, 0.00020156132814008743, 6.3610095821786672e-05, 0.00048897159285843372, 0.00019413746485952288, 0.00036260855267755687, 4.7001831262605265e-05, 0.00040988691034726799, 0.0011295519070699811, 0.00017518411914352328, 0.00013736150867771357, 0.0076179015450179577, 0.00019737868569791317, 0.00021208562247920781, 0.00032621569698676467, 9.5525887445546687e-05, 0.00082127447240054607, 8.5067287727724761e-05, 0.00041033656452782452, 0.0001498063065810129, 0.00011136211833218113, 0.00063838297501206398, 0.000127618812257424, 0.00036697855102829635, 0.00050799187738448381, 0.00025422158068977296, 7.790805830154568e-05, 0.0001146723298006691, 0.0015584932407364249, 0.00062198506202548742, 0.00014144252054393291, 0.00013943719386588782, 0.00017260127060580999, 7.9374614870175719e-05, 9.8008807981386781e-05, 0.00034751155180856586, 0.000326088338624686, 0.00059691234491765499, 8.2190614193677902e-05, 0.00023691394017077982, 0.0010485646780580282, 0.00090304279001429677, 0.004941125400364399, 0.00076782488031312823, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 115,-40,-74,-95,22,-104,68,-70,67,36,95,46,-98,46,56,-119,58,-89,0,-45,-127,-53,37,108,6,69,-19,70,-127,-31,104,-90,-46,-64,50,77,-127,46,112,77,-56,-127,-66,38,-73,-32,6,-82, 78,-59,73,127,91,38,113,-120,-71,114,61,68,-4,47,58,112,60,-83,-119,-64,85,-98,52,4,127,127,-46,85,0,56,92,-48,46,112,127,127,-90,50,68,-30,85,25,-44,94,127,114,-5,-10, 28,-26,6,-45,39,56,23,-83,-10,59,-76,33,84,-16,-62,-2,15,-26,98,-16,32,5,-83,-83,34,6,-17,32,25,90,33,21,-5,-45,28,30,-17,5,19,-58,-68,107,17,76,-64,-80,-3,79, 
  /* [0][1][][] */ 127,78,-127,17,-85,-127,79,-79,104,-74,127,-96,80,92,127,120,-53,113,-23,-82,114,-81,50,127,-1,-3,-28,26,-61,88,67,-127,-127,-76,-30,23,-16,99,127,127,-66,-79,-118,59,-2,-29,-127,-127, 123,127,112,-22,-127,17,127,-127,-127,-127,83,-127,30,127,99,-127,-48,127,127,-127,-66,-127,75,-29,73,12,-127,79,4,127,127,-106,115,127,-35,1,-22,127,93,-44,127,-7,-48,127,-13,127,121,47, 30,53,6,12,-31,85,33,-78,-4,-94,-80,-71,-127,-7,-73,-1,20,38,-124,-51,-49,-8,-127,-91,-34,3,-69,28,35,111,24,18,3,-63,-15,-11,-5,26,23,-75,-76,95,-3,108,7,-88,1,100, 
  /* [0][2][][] */ 53,-46,-29,3,30,-26,19,-31,68,18,35,44,5,42,-6,-14,-127,-33,-5,-17,21,-32,11,52,70,-14,-12,-96,17,68,-15,-75,-29,-44,-73,-10,83,22,47,71,-107,-49,-127,36,2,-2,91,-66, 10,-67,5,3,27,5,39,-50,-81,65,3,58,-22,51,-2,11,-97,-27,-18,-58,-24,-64,30,-1,114,-10,-48,-127,12,99,-2,-55,24,81,-59,5,91,45,26,-26,-60,4,-73,87,-4,-8,-97,61, 7,-27,28,7,-3,25,17,-20,-10,51,-33,31,13,-21,-21,1,13,-6,18,-34,15,10,-41,-43,-25,-7,-6,-41,8,98,-16,19,-9,-38,-46,-7,73,16,14,-43,-109,56,-27,53,6,9,3,13, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0023287327494472265, 0.0092929136008024216, 0.10023871064186096, 0.036357451230287552, 0.0065657077357172966, 0.0085663562640547752, 0.0027034289669245481, 0.020781293511390686, 0.0082508418709039688, 0.015410863794386387, 0.0019975777249783278, 0.017420193180441856, 0.048005957156419754, 0.007445325143635273, 0.0058378642424941063, 0.32376080751419067, 0.0083885937929153442, 0.0090136388316750526, 0.013864167034626007, 0.004059850238263607, 0.034904163330793381, 0.0036153595428913832, 0.017439303919672966, 0.0063667679205536842, 0.0047328900545835495, 0.027131276205182076, 0.0054237996228039265, 0.015596588142216206, 0.021589653566479683, 0.010804417543113232, 0.0033110924996435642, 0.0048735737800598145, 0.066235959529876709, 0.026434365659952164, 0.0060113072395324707, 0.0059260805137455463, 0.007335553877055645, 0.0033734210301190615, 0.0041653742082417011, 0.014769241213798523, 0.013858754187822342, 0.025368774309754372, 0.0034931011032313108, 0.010068842209875584, 0.044563997536897659, 0.03837931901216507, 0.20999781787395477, 0.032632555812597275, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -846, -6470, 18814, 3064, 8225, 2780, 2891, 308, -650, -5621, 218, 3619, 17920, -9726, -120, 7525, -5906, -856, 694, 5515, 8516, 2687, 1517, 250, 8426, 20726, 8342, -9759, 1825, -488, 199, -2835, 17184, 6709, 8128, -1280, -9275, 229, -2863, -128, -10176, -7945, -1751, 2308, 5671, -9786, 8984, -1119, };
const TfArray<48, float> quant36_scale = { 48, { 0.0004394493589643389, 0.00024397167726419866, 5.2284980483818799e-05, 0.00033773158793337643, 0.00031694487552158535, 0.0007164853741414845, 0.0011105310404673219, 0.00073033705120906234, 0.0006791367195546627, 0.00036762995296157897, 0.0019128827843815088, 0.00033367786090821028, 7.5544034189078957e-05, 0.00040338726830668747, 0.00079235562589019537, 3.9030703192111105e-05, 0.00028537801699712873, 0.00037092919228598475, 0.00049332441994920373, 0.00026486907154321671, 0.00014640236622653902, 0.0015147030353546143, 0.00039581430610269308, 0.0011705540819093585, 0.00027124895132146776, 9.4940318376757205e-05, 0.00044486322440207005, 0.00033447844907641411, 0.0011851807357743382, 0.00057723774807527661, 0.0015222268411889672, 0.0014791408320888877, 0.00012224121019244194, 0.00033305629040114582, 0.00037093472201377153, 0.0011645758058875799, 0.0004596863582264632, 0.00046688388101756573, 0.0012875285465270281, 0.00039876473601907492, 0.00037189398426562548, 0.00029599334811791778, 0.00029694969998672605, 0.0004563665424939245, 0.00016993345343507826, 0.00030225596856325865, 3.3344571420457214e-05, 0.00062940502539277077, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 10,49,5,-19,92,-21,127,-2, 
  /* [1][0][][] */ 123,75,77,6,-15,-33,-6,127, 
  /* [2][0][][] */ -64,12,-1,127,9,-19,-34,57, 
  /* [3][0][][] */ 53,-35,-127,2,0,-43,25,122, 
  /* [4][0][][] */ -114,82,-127,-9,16,31,-36,-38, 
  /* [5][0][][] */ 127,-17,-6,-49,-1,-32,10,-126, 
  /* [6][0][][] */ 3,-12,-8,0,-127,-24,64,-1, 
  /* [7][0][][] */ -5,-63,-5,1,-23,5,-127,-5, 
  /* [8][0][][] */ -16,23,30,-13,127,18,-69,-25, 
  /* [9][0][][] */ 127,-44,13,-18,-5,-29,36,108, 
  /* [10][0][][] */ 127,4,-3,-40,0,12,1,-119, 
  /* [11][0][][] */ -53,4,-2,127,-2,-47,-35,31, 
  /* [12][0][][] */ -127,7,-75,-27,8,101,-65,-114, 
  /* [13][0][][] */ 107,6,127,13,-9,20,19,47, 
  /* [14][0][][] */ -127,-7,18,20,-1,-13,5,127, 
  /* [15][0][][] */ -118,9,3,127,3,-2,-17,123, 
  /* [16][0][][] */ 66,-69,125,77,-18,-127,39,66, 
  /* [17][0][][] */ 23,-64,-76,125,-4,32,-14,127, 
  /* [18][0][][] */ 23,-34,-110,55,-5,3,29,127, 
  /* [19][0][][] */ 25,17,-13,127,-9,3,-74,-47, 
  /* [20][0][][] */ 19,55,113,-120,2,-72,11,-127, 
  /* [21][0][][] */ 3,-2,-8,-2,-127,-14,57,-1, 
  /* [22][0][][] */ 1,57,-2,-9,3,127,-12,2, 
  /* [23][0][][] */ 123,28,-9,91,-5,-1,-43,-127, 
  /* [24][0][][] */ -127,19,-74,-30,16,-23,-37,-54, 
  /* [25][0][][] */ -40,-6,-56,-42,6,-127,7,-39, 
  /* [26][0][][] */ -106,-23,-127,14,10,6,-24,-30, 
  /* [27][0][][] */ 95,-9,127,14,-10,66,22,38, 
  /* [28][0][][] */ 7,-56,-20,42,24,-127,2,14, 
  /* [29][0][][] */ -7,-9,25,-127,-13,-13,28,4, 
  /* [30][0][][] */ -47,5,127,-3,-1,10,-11,-125, 
  /* [31][0][][] */ 0,7,4,-2,127,26,-50,-1, 
  /* [32][0][][] */ -127,-13,-113,-5,-3,-33,-23,-65, 
  /* [33][0][][] */ 5,-63,8,-41,36,-127,11,-18, 
  /* [34][0][][] */ -41,-127,-112,53,-1,-45,-11,-11, 
  /* [35][0][][] */ 51,4,-115,-1,1,4,4,127, 
  /* [36][0][][] */ 65,31,81,17,1,127,11,35, 
  /* [37][0][][] */ -12,24,-4,127,4,-24,-17,14, 
  /* [38][0][][] */ -2,21,6,-4,127,28,-37,-5, 
  /* [39][0][][] */ -7,19,-12,35,-36,127,-108,-5, 
  /* [40][0][][] */ 127,-18,119,12,-18,20,17,54, 
  /* [41][0][][] */ 114,3,127,20,-16,6,31,42, 
  /* [42][0][][] */ 74,-66,1,-35,22,127,16,-18, 
  /* [43][0][][] */ -11,-66,-9,-1,-42,-17,-127,3, 
  /* [44][0][][] */ -16,-127,38,91,12,42,6,-109, 
  /* [45][0][][] */ 127,15,127,-2,-8,28,28,43, 
  /* [46][0][][] */ -86,15,0,127,7,5,-42,77, 
  /* [47][0][][] */ -5,47,-12,-4,-3,127,-14,-1, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0039890077896416187, 0.0022146007977426052, 0.00047460573841817677, 0.0030656864400953054, 0.0028769993223249912, 0.0065037431195378304, 0.010080608539283276, 0.0066294786520302296, 0.0061647184193134308, 0.0033370824530720711, 0.017363784834742546, 0.0030288894195109606, 0.0006857348489575088, 0.0036616616416722536, 0.0071924389339983463, 0.00035429286072030663, 0.002590457908809185, 0.0033670305274426937, 0.0044780471362173557, 0.0024042923469096422, 0.0013289361959323287, 0.013749393634498119, 0.0035929197911173105, 0.010625454597175121, 0.0024622045457363129, 0.0008618004503659904, 0.0040381508879363537, 0.0030361567623913288, 0.010758224874734879, 0.0052397525869309902, 0.013817689381539822, 0.013426585122942924, 0.0011096184607595205, 0.0030232472345232964, 0.0033670808188617229, 0.010571188293397427, 0.0041727046482264996, 0.0042380387894809246, 0.011687265709042549, 0.0036197016015648842, 0.0033757882192730904, 0.0026868165004998446, 0.0026954973582178354, 0.0041425698436796665, 0.0015425345627591014, 0.0027436639647930861, 0.0003026782360393554, 0.0057132896035909653, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 1042, 838, -908, -8759, 856, -1139, -164, 3424, };
const TfArray<8, float> quant38_scale = { 8, { 0.00025251039187423885, 0.00028926727827638388, 0.00039629725506529212, 0.00023733371926937252, 0.0002569757925812155, 0.00013364452752284706, 0.00036485044984146953, 0.00021890115749556571, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -13,-12,-22,9,-7,-127,12,38, 
  /* [1][0][][] */ -61,25,-127,117,11,60,-19,44, 
  /* [2][0][][] */ 12,-10,22,-6,-4,-127,10,26, 
  /* [3][0][][] */ 24,49,48,127,17,-38,-39,-6, 
  /* [4][0][][] */ 17,51,19,-23,-127,-10,26,-2, 
  /* [5][0][][] */ 63,-24,127,-105,20,-59,-8,-41, 
  /* [6][0][][] */ 25,127,46,-36,40,-13,-63,-19, 
  /* [7][0][][] */ -21,-27,-40,-15,-16,-127,19,43, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.010731691494584084, 0.012293859384953976, 0.016842633485794067, 0.010086682625114918, 0.010921470820903778, 0.0056798923760652542, 0.015506143681704998, 0.0093032987788319588, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 5874, 188, -683, 1282, 10695, -292, 1220, -5750, };
const TfArray<8, float> quant40_scale = { 8, { 0.00011130366328870878, 0.00047915332834236324, 0.00020517611119430512, 0.00075653108069673181, 0.00022652292682323605, 0.00033565406920388341, 0.0005414860206656158, 7.8263808973133564e-05, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -22,-7,2,-1,-1,27,-4,1, 19,1,7,-8,10,127,10,127, 8,0,6,-9,1,16,-5,16, 
  /* [0][1][][] */ 4,-127,-11,3,-13,-6,-116,3, -127,99,-74,127,-127,-6,127,-48, 13,-3,-1,-67,-3,1,40,-21, 
  /* [0][2][][] */ 17,-3,-2,-4,2,-22,5,11, 61,1,127,-23,12,-111,-6,22, 13,2,-6,-10,1,-20,-11,10, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0047304057516157627, 0.02036401629447937, 0.0087199844419956207, 0.032152570784091949, 0.0096272239461541176, 0.014265297912061214, 0.023013155907392502, 0.0033262118231505156, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 29260, 2969, 52546, 27183, 7867, 610353, 8514, 24831, };
const TfArray<8, float> quant42_scale = { 8, { 9.8783399153035134e-05, 7.3903531301766634e-05, 7.4895222496706992e-05, 4.380762402433902e-05, 0.00022388981597032398, 5.2673713071271777e-06, 2.2499894839711487e-05, 0.00013154324551578611, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 10,-2,15, 9,-22,33, 13,-22,23, 
  /* [0][1][][] */ 41,31,29, 67,20,62, 25,-32,41, 
  /* [0][2][][] */ -20,-92,-11, -29,-127,1, -7,-55,20, 
  /* [1][0][][] */ 28,74,24, 3,8,-2, -33,-70,-27, 
  /* [1][1][][] */ 50,120,39, 0,0,-3, -57,-127,-40, 
  /* [1][2][][] */ 27,44,11, 2,-2,0, -34,-53,-3, 
  /* [2][0][][] */ 42,91,9, 53,127,11, 15,42,-3, 
  /* [2][1][][] */ -49,-86,-30, -84,-97,-41, -33,-8,-23, 
  /* [2][2][][] */ 0,9,5, 4,15,-2, 0,10,-8, 
  /* [3][0][][] */ 44,-33,-18, 77,-38,-41, 30,-18,-14, 
  /* [3][1][][] */ 79,-57,-39, 127,-57,-77, 58,-30,-31, 
  /* [3][2][][] */ 18,-22,-5, 40,-30,-18, 14,-13,-3, 
  /* [4][0][][] */ -11,-23,-4, 28,45,9, -15,-29,-4, 
  /* [4][1][][] */ -28,-60,-10, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,2, 21,25,-3, -11,-13,-3, 
  /* [5][0][][] */ -41,-71,-42, -59,-95,-59, -43,-33,-29, 
  /* [5][1][][] */ -57,-107,-51, -81,-127,-68, -44,-34,-33, 
  /* [5][2][][] */ 1,5,-16, 1,0,-10, 4,13,0, 
  /* [6][0][][] */ -97,-6,33, 2,19,-14, 64,16,-21, 
  /* [6][1][][] */ -127,-37,40, 12,19,-28, 105,15,-32, 
  /* [6][2][][] */ -50,-14,16, 15,-8,-2, 32,-15,27, 
  /* [7][0][][] */ -6,15,-4, -16,21,-9, -7,21,-9, 
  /* [7][1][][] */ 17,84,-7, 23,127,-24, -2,60,-28, 
  /* [7][2][][] */ -28,-51,-22, -43,-53,-34, -20,4,-20, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.025189764797687531, 0.018845399841666222, 0.019098279997706413, 0.011170943267643452, 0.057091899216175079, 0.0013431796105578542, 0.0057374727912247181, 0.033543527126312256, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,112,112,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant46_scale = { 1, { 0.12169031053781509, } };
const TfArray<1, int> quant46_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<1, float> quant47_scale = { 1, { 0.11016508191823959, } };
const TfArray<1, int> quant47_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,112,112,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,113,113,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,56,56,48 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,56,56,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.14197738468647003, } };
const TfArray<1, int> quant51_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.12863688170909882, } };
const TfArray<1, int> quant54_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<1, float> quant55_scale = { 1, { 0.17928113043308258, } };
const TfArray<1, int> quant55_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,57,57,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,28,28,48 } };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,28,28,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.10844026505947113, } };
const TfArray<1, int> quant59_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.042999822646379471, } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&g0::quant55_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.10763392597436905, } };
const TfArray<1, int> quant63_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.068035192787647247, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<1, float> quant67_scale = { 1, { 0.12601618468761444, } };
const TfArray<1, int> quant67_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,28,28,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.055840957909822464, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,28,28,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.098669260740280151, } };
const TfArray<1, int> quant70_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 150528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 200704), (TfLiteIntArray*)&g0::tensor_dimension44, 100352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 100352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 100352), (TfLiteIntArray*)&g0::tensor_dimension44, 100352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 100352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 612912), (TfLiteIntArray*)&g0::tensor_dimension48, 602112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 612912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 612912), (TfLiteIntArray*)&g0::tensor_dimension50, 150528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 301056), (TfLiteIntArray*)&g0::tensor_dimension51, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 150528), (TfLiteIntArray*)&g0::tensor_dimension50, 150528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 150528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 150528), (TfLiteIntArray*)&g0::tensor_dimension51, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension51, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 155952), (TfLiteIntArray*)&g0::tensor_dimension50, 150528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 155952, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 155952), (TfLiteIntArray*)&g0::tensor_dimension58, 37632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 81536), (TfLiteIntArray*)&g0::tensor_dimension59, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 37632), (TfLiteIntArray*)&g0::tensor_dimension58, 37632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 37632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 37632), (TfLiteIntArray*)&g0::tensor_dimension59, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 75264), (TfLiteIntArray*)&g0::tensor_dimension59, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 37632), (TfLiteIntArray*)&g0::tensor_dimension58, 37632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 37632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 43904), (TfLiteIntArray*)&g0::tensor_dimension59, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 37632), (TfLiteIntArray*)&g0::tensor_dimension59, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 37632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 37632), (TfLiteIntArray*)&g0::tensor_dimension69, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2352), (TfLiteIntArray*)&g0::tensor_dimension70, 2352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 2352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_63_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_63_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_63_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_63_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_63_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
