/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 31.07.2025 18:53:43

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 638944;
#else
constexpr int kTensorArenaSize = 637920;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,160,160,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 15018, -21185, -26184, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00031688529998064041, 0.00022075083688832819, 0.00033005201839841902, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 68,80,99,-47,-30,-6,-12,7,-13,39,20,57,-5,-74,77,52,-51,66,127,90,7,-37,48,-60,-77,93,-38,14,59,31,-12,4, 
  /* [1][0][][] */ 51,-49,-66,16,-6,127,-12,-8,114,-42,-7,-92,-61,98,25,-58,90,-42,-22,-94,-115,12,107,62,10,12,5,-8,-65,-52,-11,-27, 
  /* [2][0][][] */ -10,27,-77,53,61,-9,-18,84,75,29,86,-79,-21,-41,59,50,-43,-28,-21,-73,31,78,-25,-52,61,-35,-1,-75,14,-59,61,-127, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0045626545324921608, 0.003178468206897378, 0.0047522350214421749, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -632, 290, 88, -603, -574, 48, -562, -70, -41, -446, -21, 1296, -522, -91, -496, -125, -162, -644, 1798, -514, -96, -454, -382, -552, -723, -332, -1126, -680, -614, -9, -283, -98, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.4314503611531109e-05, 5.4989668569760397e-05, 4.2628773371689022e-05, 4.3582247599260882e-05, 4.2566327465465292e-05, 4.8020265239756554e-05, 4.4087042624596506e-05, 5.0776259740814567e-05, 4.3193918827455491e-05, 4.5258162572281435e-05, 5.9336776757845655e-05, 9.0882153017446399e-05, 4.3147731048520654e-05, 4.8763984523247927e-05, 4.2951174691552296e-05, 4.3861789890797809e-05, 4.4516320485854521e-05, 4.4452499423641711e-05, 8.0971920397132635e-05, 4.3498941522557288e-05, 4.0536157030146569e-05, 4.88701080030296e-05, 4.5698645408265293e-05, 4.6394565288210288e-05, 4.5888533350080252e-05, 4.4095748307881877e-05, 5.0062000809703022e-05, 4.4043623347533867e-05, 4.3787178583443165e-05, 4.4839631300419569e-05, 4.234040534356609e-05, 4.4884563976665959e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -49,-64,82,-11,69,-12,-102,-110,41,-102,-120,-14,38,-7,-51,36,-68,-49,-80,-71,-83,-118,-12,90,-126,-8,58,-67,92,-9,-36,-93,60,-78,-109,46,-121,-91,-97,10,59,-98,-111,88,35,-119,95,-32,0,-69,-55,88,-91,-66,-102,87,9,48,109,-124,-89,68,-58,22,-5,0,51,72,43,76,67,-127,84,-116,33,64,-120,-3,-76,11,36,4,73,-22,-74,-55,-100,85,12,98,-32,-122,-3,43,13,0, 
  /* [1][0][][] */ -69,28,-28,3,-49,90,37,5,55,-74,-83,92,11,-24,27,50,102,-32,41,71,-46,4,40,31,30,7,-26,107,15,-25,74,-67,67,73,12,20,60,41,-19,-56,-54,3,-23,-72,-30,21,-33,-41,-13,-61,78,38,12,44,-62,-36,38,61,9,73,-66,127,-60,-41,-60,24,69,24,75,18,26,3,-91,61,-21,46,52,-20,-29,46,-66,57,-49,-108,22,97,-55,-65,56,56,82,7,57,85,9,8, 
  /* [2][0][][] */ 30,31,-32,99,-94,-44,96,89,-102,77,-41,118,59,-24,86,-119,-54,-24,0,56,-109,-8,116,25,-24,71,115,33,-81,61,74,83,-47,-30,-61,-118,-82,87,105,-29,-127,-84,3,-13,-88,104,-40,-83,103,35,67,-104,-53,42,20,7,-49,65,-69,3,-42,57,-52,116,69,38,57,85,-109,52,33,-86,29,-75,25,40,-65,-20,8,17,34,-109,-21,-58,-2,-97,-28,-46,81,109,-23,-8,-68,-99,-68,-68, 
  /* [3][0][][] */ 71,-10,15,-39,-53,28,-125,35,35,21,59,-17,78,88,61,-2,89,84,-69,19,109,-102,-78,-125,-31,-120,-98,79,32,-81,76,17,-81,-41,-35,-23,-107,-25,49,36,-27,-99,-103,-5,67,28,-42,-89,51,-89,55,7,80,28,89,-106,-127,-123,-110,-73,-96,16,-32,47,78,-36,-76,-47,-36,-82,-10,93,18,-114,47,-68,31,83,81,-80,-98,-120,26,91,19,36,-53,-110,-90,42,-22,-93,86,-115,-84,24, 
  /* [4][0][][] */ 47,90,-17,45,-40,-51,22,3,57,78,-17,39,21,-46,-23,-75,-39,-13,-91,4,102,-102,72,16,-32,-15,56,-86,-63,23,-79,-57,38,106,6,-114,-67,-15,-127,43,-59,-72,-77,-103,26,98,26,46,4,-56,-21,-86,-105,39,-98,12,32,-103,11,0,4,-92,-50,-83,-59,49,-11,-40,21,-95,-112,-92,-69,13,85,40,53,-38,-17,-71,-1,-53,-106,-27,-10,60,80,-3,-124,-84,40,40,22,94,-105,-18, 
  /* [5][0][][] */ 88,-79,53,71,73,-112,25,61,90,-105,0,-73,62,94,34,35,56,55,-95,104,27,44,14,-25,-82,-56,-11,-99,44,57,17,-79,-61,1,-63,15,-110,-26,71,18,-76,-45,37,88,-31,23,37,-46,-100,127,61,35,45,17,41,-13,118,38,-52,-36,27,-94,24,-82,5,92,-24,13,77,-1,86,-62,-41,58,-30,-69,18,-46,9,81,94,37,24,98,-69,71,-3,39,58,-83,82,85,-16,24,67,-86, 
  /* [6][0][][] */ 5,-57,104,71,-85,-75,-11,56,-24,-92,-4,-98,72,44,102,-126,30,-8,-25,91,-86,-124,96,48,-70,-92,-18,-63,-40,-118,33,-87,-95,-127,-46,-115,-19,27,-109,69,72,43,11,-26,-122,91,-98,-55,-92,12,-35,-76,46,-64,82,-38,5,-19,-80,101,-105,-11,54,-67,-58,54,89,-55,62,-20,-102,-16,45,-80,-99,-50,-89,-107,-64,-37,21,-38,34,-37,-80,-95,-50,-103,71,81,76,4,-62,-75,61,-40, 
  /* [7][0][][] */ 109,38,-27,-33,-79,84,-8,-1,107,0,-77,27,56,-71,44,60,29,32,-13,127,53,33,-16,77,-57,74,56,36,-48,59,-25,2,-10,25,51,45,-109,76,-15,-9,90,-56,83,41,69,-5,93,-89,22,-30,-88,-75,-54,80,36,26,71,-84,-46,-63,21,5,85,-88,-92,-40,60,49,-91,34,16,82,70,26,39,44,-61,30,-76,4,88,-27,-3,-62,70,35,-91,94,79,6,122,11,-52,-87,0,-43, 
  /* [8][0][][] */ 22,33,-67,-93,102,-2,-74,-5,5,35,48,81,61,-34,-83,-67,-72,101,-97,47,35,-28,75,108,-105,93,55,47,-64,54,-86,127,54,-29,38,-6,101,13,18,74,88,107,-103,-118,-5,-22,-12,111,10,-48,-10,7,-58,4,-16,-97,67,105,-108,101,118,6,42,88,2,-40,-23,96,-71,57,15,5,80,61,-1,14,-34,98,82,71,38,85,-106,-77,29,41,78,-29,40,-30,-92,104,-75,-111,-38,51, 
  /* [9][0][][] */ -15,-1,102,33,108,-62,-58,-127,29,76,-21,51,-41,-84,-106,-34,5,-8,-110,-46,-7,85,-109,-110,96,-13,-23,21,-18,-44,-96,89,66,-9,19,-19,-56,3,-43,-56,33,-74,41,-94,69,10,-111,41,41,-3,-89,-47,55,-80,-71,93,74,-63,-24,-10,-87,122,74,-73,-65,-4,89,29,-30,89,97,-97,-4,79,-72,-100,-76,-117,-48,91,22,19,86,12,-52,-107,26,-25,84,18,-37,113,114,-5,48,-39, 
  /* [10][0][][] */ -31,39,70,-45,-27,62,88,18,37,23,25,-30,78,65,-18,7,-43,76,-76,-4,-4,25,30,-44,28,29,-63,-94,-18,16,-79,-85,32,78,83,9,-55,11,-36,41,-13,96,-69,-48,-39,-41,8,-36,-28,12,33,-13,18,22,-16,-24,-106,-18,-25,-46,16,60,102,34,26,-44,-67,14,14,3,-106,-37,63,57,-84,74,-15,30,58,-18,70,6,53,80,-76,59,76,2,37,10,41,-127,-42,-113,-29,-35, 
  /* [11][0][][] */ 34,33,14,59,38,121,52,8,54,127,-33,67,-50,-30,57,-24,31,-8,53,-9,-10,59,55,-30,-1,-59,11,54,39,-61,37,-16,36,-17,50,29,22,57,-32,-52,-14,48,-51,37,-19,-33,-43,-46,81,46,-7,60,-56,-51,13,19,17,-33,-37,16,-52,83,3,42,-18,60,-6,-21,59,15,-33,-53,6,49,5,23,-49,64,-10,55,-41,-24,-47,-50,53,9,11,-21,-60,24,-22,-63,-7,49,-35,4, 
  /* [12][0][][] */ -7,59,-66,-19,61,3,-48,12,-77,43,-28,5,-65,0,32,-88,-109,-40,31,-98,14,-21,8,82,-82,-58,85,-86,88,-5,-48,101,-88,-77,-70,8,-12,-89,-48,33,102,29,-119,-54,-33,-94,-55,104,-54,-124,-104,87,51,-6,-103,67,-42,-58,19,61,49,118,-12,72,88,21,-58,114,40,101,23,59,69,104,-26,-8,-45,25,-127,-106,-65,93,29,5,-48,18,45,102,-103,-122,100,28,91,-26,23,62, 
  /* [13][0][][] */ 108,-45,71,75,120,68,68,64,61,-100,11,-38,121,70,56,-37,-105,-58,-89,48,62,-30,101,-48,-51,40,7,-3,-77,-36,76,53,15,94,-36,40,-86,-16,49,61,-50,69,-44,11,-38,30,7,-28,26,127,7,-84,-80,38,95,-62,-21,29,-16,-64,-18,70,-64,7,-7,-53,-86,65,-25,-9,74,2,-79,31,-76,-40,-83,54,67,-44,48,-83,80,26,-69,-88,85,114,-10,-42,-87,61,107,-44,68,-20, 
  /* [14][0][][] */ -62,-117,80,73,79,-33,-25,-106,-83,-44,60,74,-35,-104,-102,-93,-64,-83,24,13,-57,23,-14,53,-121,-86,-49,27,-114,-114,-92,31,84,-43,-38,-12,85,103,51,-119,-21,-124,17,79,55,-124,54,-92,102,34,79,43,108,-41,-26,1,-56,-6,46,85,-35,-95,-40,42,-104,-21,68,-115,-109,-112,-96,79,-6,67,32,-81,53,-119,46,16,35,-32,-126,-44,-127,-105,-127,98,99,-4,86,-45,58,89,-25,43, 
  /* [15][0][][] */ 2,-37,-10,77,98,-58,60,-97,65,-2,-73,9,93,-1,-88,-112,92,10,-118,17,41,20,73,108,80,53,34,103,10,35,58,-102,12,6,-61,-15,-60,102,104,-74,10,106,-54,-25,23,-83,-51,-81,-10,-88,-14,27,-108,-107,-50,-15,88,41,-67,110,-52,-60,-12,113,-43,95,-71,-5,-67,3,68,-80,3,-11,62,-105,-13,59,103,75,-81,49,-111,-68,-121,-41,-95,33,79,62,-127,-48,52,109,-114,105, 
  /* [16][0][][] */ -58,4,76,-65,83,85,-56,52,43,45,-103,54,34,-40,-52,-54,102,76,37,84,108,70,-42,45,-24,57,-65,41,-97,53,44,32,-127,76,44,63,-45,60,-16,-69,25,-44,72,88,59,104,106,-13,-61,-68,50,118,-29,121,73,52,49,88,69,13,115,71,29,47,89,17,-40,74,55,94,-38,-7,29,84,53,77,2,90,-110,-2,14,-78,56,18,14,95,100,19,74,18,-53,123,75,-27,-71,8, 
  /* [17][0][][] */ 17,-119,31,67,-53,-120,-78,-108,30,-99,68,41,91,45,-125,33,18,39,97,100,-104,-26,0,-65,10,51,-87,44,94,-63,-44,60,-30,-37,11,-7,-59,82,-98,-42,-107,-54,-30,-25,-7,-3,67,-121,73,101,-26,10,-20,60,83,-85,-127,69,-97,-122,17,-98,56,113,-97,-86,29,-111,-116,-19,93,16,1,-127,-79,55,101,-61,28,-66,-3,-29,-85,-104,-122,57,64,-47,6,61,-96,-127,-26,86,-2,7, 
  /* [18][0][][] */ -76,69,122,9,-84,10,-16,-4,12,121,-32,8,-69,27,104,-29,53,-9,81,-100,59,14,55,16,44,-45,-2,102,29,-73,16,-16,82,1,3,-46,53,29,-67,39,-13,14,-17,45,-36,17,8,29,63,-60,-49,4,-32,-29,17,60,-49,0,77,-50,23,127,-43,14,-107,-49,24,53,27,-41,2,58,-30,-24,7,-23,37,80,30,-32,-25,-2,19,-45,79,-4,50,15,-51,-11,-7,13,20,21,-4,34, 
  /* [19][0][][] */ 8,19,81,34,56,-95,88,87,85,-72,20,-18,-100,25,-63,52,63,-110,97,48,-32,72,-62,5,79,-91,23,-65,-97,-123,-74,35,73,-89,29,-11,0,-78,-56,-103,35,-122,-90,-1,-93,18,64,-99,-35,53,-49,33,-31,4,0,-19,25,86,-10,-33,43,-76,89,84,-78,-11,-31,-4,-16,45,75,-58,-66,-127,-63,-81,-30,-118,8,101,49,-119,-37,67,-93,-15,-1,-13,78,20,-2,53,-44,106,59,-51, 
  /* [20][0][][] */ -18,72,101,105,-96,114,18,59,13,15,-95,17,-37,87,44,-83,-45,-45,-107,-38,19,-44,-76,-73,76,-80,-112,79,21,4,-44,107,127,41,1,59,54,-40,-22,-123,-96,-40,-100,-107,-34,-73,-81,107,67,-110,-119,34,38,104,53,3,101,69,91,94,104,-37,-86,-29,-41,-75,-51,5,-96,-90,-61,78,-80,-97,41,23,106,89,114,110,84,-6,91,-36,61,120,-20,69,16,93,12,58,21,50,-15,15, 
  /* [21][0][][] */ 117,55,28,-108,119,-96,61,30,1,-65,-59,24,57,41,-56,-76,-112,-4,-16,102,108,-54,41,-87,54,-83,-10,21,26,42,-13,0,-47,30,-126,-123,63,102,-53,-16,12,15,36,-29,-60,-64,-47,79,-55,13,51,81,1,96,-39,28,-42,56,-100,93,81,-104,47,-22,92,41,-46,-45,-76,14,1,84,28,-7,46,40,-85,-54,52,59,27,98,37,-44,19,-77,58,-35,-78,75,108,-118,-21,-127,87,-44, 
  /* [22][0][][] */ 26,-59,-86,-101,75,-73,94,47,-102,82,-77,-113,82,-114,-112,-90,25,71,-117,-58,73,-81,19,21,84,-11,-119,74,-66,-75,-70,-101,28,51,-1,2,-9,-18,-57,-118,-4,-20,-6,83,49,-115,83,-27,-67,-94,-8,-18,-77,-92,-44,28,-29,-42,-14,-41,94,-87,-76,-127,-56,13,-119,-56,100,88,-44,-12,-73,5,53,-101,33,-61,51,75,94,-100,-85,-118,68,73,82,-33,-64,28,-74,58,9,3,-31,81, 
  /* [23][0][][] */ 50,-94,-14,37,74,-127,-11,-105,38,-83,66,55,0,-113,4,-50,67,-46,-102,80,72,-91,81,-47,-24,-27,62,-1,51,45,54,-43,-56,27,-2,17,73,-16,-108,-9,-108,-13,-4,-114,-74,-94,97,13,57,-114,-103,-54,62,-69,-59,70,-99,-32,82,26,-120,-103,-62,-31,31,23,-124,-118,50,-27,86,-80,-19,-44,-53,-105,28,-36,72,93,-62,-61,2,-107,74,-7,91,-30,-98,28,77,-13,82,-65,-42,64, 
  /* [24][0][][] */ -89,-63,-115,-81,-94,-116,-82,-104,44,94,61,23,89,41,-54,-127,-94,23,4,-59,73,-93,-69,-52,34,-43,52,36,81,40,-13,-72,-4,-7,31,10,-68,-96,42,-37,-86,-110,80,-12,4,-51,25,50,-95,-64,-36,-1,46,40,49,-86,-22,55,11,-16,68,-23,19,71,-103,74,-61,-100,-111,32,-73,-42,-53,23,73,78,44,-88,-116,-93,-92,-105,-77,-125,-15,42,-30,-109,7,-118,-8,-80,-34,9,-103,13, 
  /* [25][0][][] */ -102,-65,-83,-22,85,-66,-108,50,31,-103,-48,16,67,-11,-114,-32,-78,43,53,-118,56,72,-20,-63,5,-65,-113,38,78,-81,28,105,77,-122,33,60,93,-71,-15,-29,-94,85,-115,-3,83,30,50,29,-109,90,-79,0,51,-36,-63,-2,-23,38,-104,64,104,37,44,27,10,65,-25,-21,-97,-20,-31,-119,27,-127,67,16,68,63,6,1,39,40,-51,70,-82,-56,-112,-97,-31,-46,111,14,-124,-21,-32,-96, 
  /* [26][0][][] */ 25,-122,-43,-35,-103,-31,-33,-36,-115,-127,68,50,-90,-64,-15,-35,73,3,-90,-81,-11,38,62,-13,23,33,-11,16,-12,-14,-101,-23,-49,-75,-111,-110,-80,50,-68,71,-107,65,27,3,-85,41,-58,64,-43,3,-24,62,-13,-62,-28,-114,57,36,17,-1,-19,-106,32,-39,77,-40,-72,26,-97,48,50,61,46,-105,-101,-17,18,-116,-106,-14,-47,43,48,-85,45,-23,-61,-10,-93,74,-16,-2,-69,75,21,55, 
  /* [27][0][][] */ -3,-5,-74,-113,-127,-81,-82,-29,27,85,22,-114,-37,41,65,-42,50,-31,50,-96,-105,-4,-41,-37,-115,30,-121,-12,50,15,-45,-23,49,53,-103,-96,-99,-77,-121,71,-106,3,12,3,82,10,52,86,75,57,42,-87,-98,-98,-20,-48,84,-37,-124,-89,-70,-72,-48,40,26,-59,-123,87,33,-6,-125,-6,46,-66,-21,-97,32,-77,71,87,68,-40,97,-68,-86,-95,-46,16,-61,-18,-43,-63,40,8,70,38, 
  /* [28][0][][] */ 74,-17,112,35,-110,-62,-110,-86,-40,-111,43,80,-77,-94,-12,85,76,93,-70,89,-42,9,-120,-88,-115,72,-90,-36,-84,-75,-9,-1,-79,2,68,60,3,-122,-53,17,85,26,-109,35,-122,-23,-2,31,12,-62,-78,-46,-74,15,34,31,69,-26,61,39,-16,-58,-106,30,46,57,-35,97,-73,23,-118,-57,52,60,-23,-103,-99,-77,-98,37,-86,-105,93,-8,47,-127,51,-95,-115,-85,-18,-64,-21,45,-107,-56, 
  /* [29][0][][] */ 30,56,82,-47,-115,46,-112,4,86,-13,-90,-76,56,-107,-42,-51,-82,89,53,-71,-79,-29,60,8,-42,5,-49,8,-92,-26,96,-17,93,-7,-55,-44,6,90,-15,79,38,96,-53,82,-5,92,-61,-28,28,-12,32,-98,61,-116,103,46,-86,38,-54,105,-127,119,-105,-28,-70,-66,54,69,87,-97,47,-78,98,65,77,29,96,-48,-30,39,-13,-90,-16,-88,59,111,39,60,-43,85,55,63,-107,49,-21,57, 
  /* [30][0][][] */ 22,-77,-74,29,-100,22,-76,-22,111,-20,-11,-44,-102,12,46,10,-11,31,93,-109,39,-111,-122,5,-115,15,-75,115,-14,-110,-98,1,-85,-79,-122,-62,9,-27,-10,17,81,-86,-21,89,92,-51,95,51,-77,75,18,-107,95,-56,-22,93,-82,-56,-83,-57,-107,-10,-80,-28,-110,-98,-103,87,-62,106,47,-38,-91,97,32,-94,-60,-78,-84,-64,22,26,-107,-24,-116,19,-113,105,-40,-127,74,54,-36,-5,6,-72, 
  /* [31][0][][] */ 70,-88,72,109,43,75,-56,-99,-34,-20,-80,-78,117,-124,-44,100,-52,-89,27,38,53,39,-24,102,38,-117,32,100,-73,-79,42,96,36,16,-86,-10,101,-34,-73,-114,50,-71,-38,30,-2,-60,-46,19,72,12,83,-35,-127,-64,-82,16,-104,57,-2,113,-46,22,75,-75,61,102,-38,-84,66,-122,-94,3,-97,-47,24,18,-62,-36,47,103,-79,-49,43,61,52,92,-98,8,9,-56,-79,-62,6,95,-13,-27, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018833663780242205, 0.0023370608687400818, 0.0018117227591574192, 0.0018522455357015133, 0.0018090688390657306, 0.0020408611744642258, 0.0018736992496997118, 0.0021579910535365343, 0.0018357414519414306, 0.0019234719220548868, 0.002521812915802002, 0.0038624913431704044, 0.0018337784567847848, 0.0020724693313241005, 0.0018254248425364494, 0.0018641260685399175, 0.0018919435096904635, 0.0018892312655225396, 0.0034413065295666456, 0.0018487049965187907, 0.0017227865755558014, 0.0020769794937223196, 0.0019421923207119107, 0.0019717689137905836, 0.0019502626964822412, 0.0018740692175924778, 0.0021276350598782301, 0.0018718539504334331, 0.0018609550315886736, 0.0019056843593716621, 0.0017994671361520886, 0.0019075939198955894, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1851, 3821, 7656, 2832, -3365, -2804, 13296, 1565, 2274, -1460, 13027, -538, -7248, 2353, 16032, 7413, 11705, 4892, -4003, -2584, 5112, 34953, 23352, 22373, 817, 1313, 3340, 5189, 2110, -5293, 7803, -2968, -64, 3767, 2, 1115, 9817, 3933, -1364, 4681, 6599, 6874, 6382, 7261, 3483, 4958, 1915, 9772, 5049, -2877, -5914, 291, -236, -1193, 1171, -50, 120, -915, -5000, 8445, -1395, 1342, -1016, -2225, -5073, 8491, 18584, 2285, -2830, 992, 1044, 2889, 2012, -837, 397, 7662, -505, 15457, 17043, -841, 7778, 2209, -696, 1483, 19871, 7099, 6099, 1099, 8335, 3718, -341, -8142, 628, -2321, -1997, -1831, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00033606943907216191, 0.00040724113932810724, 0.0003107951779384166, 0.00031571020372211933, 0.0003178972692694515, 0.00050741498125717044, 0.00024744347319938242, 0.00041124047129414976, 0.00025754992384463549, 0.00043250084854662418, 0.00015101722965482622, 0.00019928875553887337, 0.00036195339635014534, 0.0011798207415267825, 0.00019321498984936625, 0.00015714913024567068, 0.00015929178334772587, 0.00029224666650407016, 0.0004654133808799088, 0.00066223269095644355, 0.00011930840264540166, 7.7493074059020728e-05, 0.00013093426241539419, 7.2771763370838016e-05, 0.00021155920694582164, 0.00036738257040269673, 0.00087068986613303423, 0.00020771140407305211, 0.0002428400912322104, 0.00037753069773316383, 0.00018780732352752239, 0.00026599669945426285, 0.00022220838582143188, 0.00030121079180389643, 0.00026779973995871842, 0.00021255789033602923, 0.00018687493866309524, 0.00027199086616747081, 0.00047847890527918935, 0.00037995242746546865, 0.00018431713397148997, 0.00037628901191055775, 0.00023534982756245881, 0.00031975258025340736, 0.00053866009693592787, 0.0002023783017648384, 0.00025862353504635394, 0.00021343637490645051, 0.0002674698771443218, 0.00045105800381861627, 0.00027791911270469427, 0.00019134144531562924, 0.00062712165527045727, 0.00026025110855698586, 0.00065260275732725859, 0.00028370777727104723, 0.00054520356934517622, 0.00030753048486076295, 0.00031729761394672096, 0.00021653984731528908, 0.00052514072740450501, 0.00052683177636936307, 0.00026317106676287949, 0.00036923063453286886, 0.00037899773451499641, 0.00022253479983191937, 0.0001173240234493278, 0.00017768227553460747, 0.00041634796070866287, 0.00032877564080990851, 0.00036104605533182621, 0.00017227868374902755, 0.00064972788095474243, 0.00049782101996243, 0.00032048823777586222, 0.00028023406048305333, 0.00029688855283893645, 0.00012113426782889292, 0.00010574456246104091, 0.00027015592786483467, 0.00018601803458295763, 0.00014874822227284312, 0.00021876653772778809, 0.00016825967759359628, 9.1281333880033344e-05, 0.00032797970925457776, 0.00038355539436452091, 0.00022286761668510735, 8.3598410128615797e-05, 0.0005513266078196466, 0.00038696316187269986, 0.00023859030625317246, 0.00027803494594991207, 0.00041586768929846585, 0.00034605644759722054, 0.00027003599097952247, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -48,47,2,-127,-67,-44,-3,-99,-68,9,13,34,-17,-52,4,29, 
  /* [1][0][][] */ -56,3,-35,8,-33,-13,-1,-57,64,29,-54,31,12,14,21,-127, 
  /* [2][0][][] */ 7,31,-40,31,72,38,-46,-63,127,0,24,1,-37,55,-103,10, 
  /* [3][0][][] */ -11,-92,28,-81,-7,4,-34,31,116,3,127,87,41,54,-33,92, 
  /* [4][0][][] */ -66,127,29,31,73,0,-77,79,8,103,-21,-2,-83,-33,-18,9, 
  /* [5][0][][] */ -37,34,38,16,-8,64,-14,65,-61,52,-14,4,36,-52,-127,16, 
  /* [6][0][][] */ -54,-74,127,-85,13,21,-80,77,-60,-72,41,-20,-6,82,-48,7, 
  /* [7][0][][] */ -3,101,5,-24,127,47,-82,-18,102,70,13,18,55,4,34,42, 
  /* [8][0][][] */ -16,-111,21,-88,7,-57,39,-99,8,84,99,-22,28,127,94,26, 
  /* [9][0][][] */ 28,-46,3,113,36,-2,18,-44,-43,127,37,-19,-22,-50,-13,-5, 
  /* [10][0][][] */ -8,57,-73,-127,17,-10,-6,26,21,-32,-7,-42,-30,-44,26,17, 
  /* [11][0][][] */ -56,6,52,-7,127,-1,93,-83,-88,114,6,-1,5,122,-80,-75, 
  /* [12][0][][] */ 127,-9,-62,3,53,-103,25,-5,-23,33,-13,-73,87,37,-6,-38, 
  /* [13][0][][] */ -17,31,-26,18,13,-127,-5,25,17,-10,-5,2,-19,2,25,9, 
  /* [14][0][][] */ 42,-51,110,-1,34,51,-127,-83,10,-38,21,51,91,-52,-56,-61, 
  /* [15][0][][] */ -51,78,-72,-69,31,-21,122,66,-46,20,41,-19,-34,76,127,-20, 
  /* [16][0][][] */ 36,46,127,99,50,58,90,73,-63,66,23,2,45,-10,-22,-64, 
  /* [17][0][][] */ -40,-115,-15,25,-64,-19,-59,2,-127,-27,16,-51,9,36,59,-22, 
  /* [18][0][][] */ 11,29,0,103,4,-61,41,24,87,7,-47,-11,-42,127,91,-22, 
  /* [19][0][][] */ 29,5,23,11,127,-3,-46,-28,-39,-25,-10,-81,17,-25,-1,-25, 
  /* [20][0][][] */ 71,-6,-69,-54,17,-127,19,0,-68,33,-70,-47,-13,-9,46,14, 
  /* [21][0][][] */ 17,-41,107,-25,6,6,4,118,-21,23,127,21,91,101,44,106, 
  /* [22][0][][] */ -66,32,-27,127,-42,21,83,62,-19,70,-22,23,12,-10,15,-66, 
  /* [23][0][][] */ 93,26,90,-123,127,-5,-106,54,30,4,80,-82,-60,13,-79,78, 
  /* [24][0][][] */ -127,21,14,-4,-2,101,20,-16,4,23,121,4,-65,24,39,-57, 
  /* [25][0][][] */ 23,35,7,10,17,1,59,-52,-22,-127,7,-29,-24,-30,24,36, 
  /* [26][0][][] */ -13,-11,6,11,-24,12,-83,-25,-70,-16,11,-26,27,127,-23,31, 
  /* [27][0][][] */ -22,24,40,127,59,-32,1,-63,88,72,-27,8,19,125,-42,17, 
  /* [28][0][][] */ -12,37,82,95,105,-9,55,42,-81,-31,-74,7,21,117,34,-127, 
  /* [29][0][][] */ -3,9,47,30,114,0,-4,50,-9,-21,-26,-127,11,-4,-27,-51, 
  /* [30][0][][] */ -49,74,-22,114,-62,18,80,-123,-24,68,-22,18,127,38,51,87, 
  /* [31][0][][] */ -52,-40,26,-51,-55,-3,-57,-127,16,79,-49,-126,-16,-18,74,-7, 
  /* [32][0][][] */ -103,-38,8,59,45,40,39,15,-20,1,-127,42,53,-2,34,18, 
  /* [33][0][][] */ -29,-35,-37,-11,-98,-10,-70,-33,46,34,-44,-71,19,-127,121,5, 
  /* [34][0][][] */ 52,0,40,2,36,-12,-41,55,-83,-42,84,0,6,-16,5,127, 
  /* [35][0][][] */ -33,46,-67,7,0,-23,28,-127,75,117,-97,-8,10,-18,67,-122, 
  /* [36][0][][] */ -19,-27,38,127,25,30,36,19,23,31,5,36,7,40,-75,-75, 
  /* [37][0][][] */ -42,-80,53,-73,-8,6,-103,-57,-105,-22,12,6,14,-127,25,-69, 
  /* [38][0][][] */ 30,82,12,-37,127,11,-28,1,70,31,14,2,26,2,32,23, 
  /* [39][0][][] */ -23,68,-19,-127,-7,2,-36,25,34,-65,-52,-31,7,58,52,30, 
  /* [40][0][][] */ -34,-13,-22,-85,18,-54,-75,-3,-62,-42,-25,-53,-10,-27,127,-54, 
  /* [41][0][][] */ -37,-21,-42,-32,2,-43,26,-19,-52,32,-31,-40,-127,-14,44,19, 
  /* [42][0][][] */ 127,113,-54,-33,-58,-63,-10,-56,-10,18,51,-64,-46,42,117,-77, 
  /* [43][0][][] */ -27,55,-49,-8,40,-6,127,-39,37,53,-33,-12,64,-115,-58,-27, 
  /* [44][0][][] */ -31,9,-1,-22,81,-9,-64,-127,1,4,-34,3,-9,-33,76,-27, 
  /* [45][0][][] */ 34,88,-127,-4,15,-40,106,-53,-5,26,5,-53,22,-40,30,5, 
  /* [46][0][][] */ 9,15,-24,-89,-8,8,30,-23,-127,-20,23,1,-37,-127,69,-22, 
  /* [47][0][][] */ 46,56,17,-20,127,-22,-20,8,-52,39,-11,7,-14,4,124,-19, 
  /* [48][0][][] */ -127,-99,-10,48,62,26,18,-14,12,-8,-102,56,69,14,43,31, 
  /* [49][0][][] */ 25,19,71,32,127,-7,24,64,-69,-14,8,-62,39,40,20,-7, 
  /* [50][0][][] */ 52,26,-127,27,78,-103,-19,0,21,9,-5,12,38,-17,-39,-47, 
  /* [51][0][][] */ -35,46,66,43,24,5,11,25,-104,127,17,-111,16,-126,-18,63, 
  /* [52][0][][] */ 21,69,-34,50,27,-21,48,46,64,34,-73,-40,-19,127,65,15, 
  /* [53][0][][] */ -8,-42,-21,-40,-104,-21,-70,-9,-7,-6,-11,-92,21,-97,127,24, 
  /* [54][0][][] */ 21,12,-29,14,127,63,-119,-14,-27,36,-3,-39,25,-32,-2,-36, 
  /* [55][0][][] */ 60,-21,21,21,44,-32,-86,-127,-20,-93,-116,28,-20,-14,14,-43, 
  /* [56][0][][] */ -24,28,21,-13,22,-13,-86,54,-8,127,-23,-18,24,-1,13,2, 
  /* [57][0][][] */ -2,8,-26,-33,-52,-50,127,61,-62,48,11,-24,14,2,108,12, 
  /* [58][0][][] */ 62,11,-122,21,37,117,11,60,-127,-59,9,-16,17,54,-36,-5, 
  /* [59][0][][] */ -102,47,127,33,-77,-55,115,127,29,16,12,-6,13,17,56,-13, 
  /* [60][0][][] */ -8,11,-72,-24,5,-127,4,-21,-45,-15,12,-50,13,-32,47,25, 
  /* [61][0][][] */ 25,-15,55,127,58,7,70,42,-77,-1,9,60,-14,48,40,-98, 
  /* [62][0][][] */ -61,127,1,-73,-17,-27,-95,61,-36,-59,-59,-71,-55,-86,-21,-34, 
  /* [63][0][][] */ -62,-7,-8,127,-97,27,-49,-41,-54,-9,4,-69,54,48,10,39, 
  /* [64][0][][] */ -18,54,18,59,108,14,-34,78,52,63,-50,-41,-15,-127,58,-47, 
  /* [65][0][][] */ -65,-42,43,-88,40,-6,76,-2,-4,80,54,-127,24,-5,-9,-28, 
  /* [66][0][][] */ 51,-20,44,-14,-6,9,-24,96,22,-75,40,64,16,127,7,52, 
  /* [67][0][][] */ 15,63,-19,-127,-6,-1,-43,26,64,-94,-13,-25,27,64,80,69, 
  /* [68][0][][] */ -51,15,127,24,34,27,19,11,-13,11,-23,-26,40,-23,56,-46, 
  /* [69][0][][] */ 80,114,-11,-21,-104,-42,-8,-51,-46,46,127,-111,-81,48,118,-82, 
  /* [70][0][][] */ 32,12,-50,-5,-12,23,46,127,-36,95,-26,9,11,53,-27,6, 
  /* [71][0][][] */ 18,-12,-10,11,-13,-79,-31,32,-27,-9,-91,10,-127,11,50,39, 
  /* [72][0][][] */ 8,10,-127,10,7,-4,-46,95,-45,-52,-8,-10,15,35,-3,-5, 
  /* [73][0][][] */ -35,17,37,-1,41,-34,-61,-127,10,-65,40,-20,13,-40,42,4, 
  /* [74][0][][] */ 12,-15,55,127,-6,8,-60,71,-51,14,-83,55,27,-100,14,-89, 
  /* [75][0][][] */ -15,28,-38,-13,-8,-24,-36,-19,40,-9,-48,-9,-18,127,-11,-11, 
  /* [76][0][][] */ 0,-40,7,31,0,-2,-11,76,34,-32,-41,-127,-6,-2,-11,-6, 
  /* [77][0][][] */ -15,34,-10,127,-40,24,97,89,-3,76,-13,14,-18,-43,-17,-35, 
  /* [78][0][][] */ 25,5,25,-127,65,-24,-61,29,2,-28,29,-58,-20,88,15,69, 
  /* [79][0][][] */ -39,-105,-69,-74,-125,3,41,-76,127,4,59,52,-6,31,46,-56, 
  /* [80][0][][] */ -37,6,85,-102,19,-35,3,-87,-89,34,-21,-127,-6,77,88,-17, 
  /* [81][0][][] */ -30,41,-111,11,53,-127,-41,49,-16,-41,39,-26,4,10,40,-1, 
  /* [82][0][][] */ 127,-25,-24,33,-14,-126,21,-20,-27,-6,-121,-19,106,4,-19,4, 
  /* [83][0][][] */ -20,105,-126,-97,-30,-34,70,-90,46,45,-20,-127,-19,38,66,99, 
  /* [84][0][][] */ -37,-30,75,5,5,6,11,-127,20,51,-41,0,80,49,14,-28, 
  /* [85][0][][] */ -82,122,57,-87,-53,6,-40,7,-32,29,-87,57,-1,-14,-127,-46, 
  /* [86][0][][] */ -8,40,-56,-16,-9,-50,127,17,-15,-29,4,-11,-21,17,117,6, 
  /* [87][0][][] */ -22,-50,25,-96,-13,-19,82,-22,7,21,-19,-127,-3,11,16,-43, 
  /* [88][0][][] */ 121,11,26,-59,43,-127,-13,12,-103,31,-58,-88,-15,26,121,82, 
  /* [89][0][][] */ 29,-36,-30,-43,29,-11,-41,1,-33,5,44,-43,127,2,1,-43, 
  /* [90][0][][] */ -25,-4,54,-44,16,-16,-73,74,21,-96,-49,-23,-53,77,31,-127, 
  /* [91][0][][] */ -22,29,9,-36,26,-27,-29,-106,3,35,-68,-127,-55,-23,17,-21, 
  /* [92][0][][] */ -12,37,50,28,-3,-127,89,1,21,-11,-8,-30,9,-44,8,13, 
  /* [93][0][][] */ 75,-1,127,-6,-59,56,16,-13,-10,13,-118,-8,-59,-13,34,-19, 
  /* [94][0][][] */ 35,-22,-7,-11,-5,-24,12,-37,-50,-23,-1,-84,127,-5,65,-43, 
  /* [95][0][][] */ 127,78,13,54,-41,-4,-30,4,26,6,62,-24,-38,16,42,-54, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00075997697422280908, 0.00092092243721708655, 0.00070282258093357086, 0.00071393721736967564, 0.00071888300590217113, 0.0011474525090306997, 0.00055956101277843118, 0.00092996645253151655, 0.00058241537772119045, 0.00097804400138556957, 0.00034150565625168383, 0.00045066539314575493, 0.00081851019058376551, 0.0026680100709199905, 0.00043693036423064768, 0.0003553721762727946, 0.00036021749838255346, 0.00066087755840271711, 0.0010524713434278965, 0.0014975524973124266, 0.00026980030816048384, 0.00017524043505545706, 0.00029609067132696509, 0.00016456381126772612, 0.0004784134216606617, 0.00083078752504661679, 0.0019689509645104408, 0.0004697121330536902, 0.00054915103828534484, 0.00085373618640005589, 0.00042470163316465914, 0.00060151668731123209, 0.00050249515334144235, 0.00068114872556179762, 0.00060559401754289865, 0.00048067182069644332, 0.00042259317706339061, 0.00061507167993113399, 0.0010820173192769289, 0.00085921259596943855, 0.0004168090526945889, 0.00085092830704525113, 0.00053221278358250856, 0.00072307855589315295, 0.0012181092752143741, 0.00045765200047753751, 0.00058484321925789118, 0.00048265838995575905, 0.00060484808636829257, 0.0010200085816904902, 0.0006284776609390974, 0.00043269360321573913, 0.0014181534061208367, 0.00058852374786511064, 0.0014757756143808365, 0.00064156798180192709, 0.0012329064775258303, 0.00069543987046927214, 0.00071752694202587008, 0.00048967648763209581, 0.0011875368654727936, 0.0011913609923794866, 0.00059512688312679529, 0.00083496671868488193, 0.00085705373203381896, 0.00050323328468948603, 0.00026531290495768189, 0.00040180518408305943, 0.00094151636585593224, 0.0007434830185957253, 0.00081645831232890487, 0.00038958567893132567, 0.0014692744007334113, 0.0011257570004090667, 0.00072474213084205985, 0.0006337125669233501, 0.00067137455334886909, 0.00027392926858738065, 0.00023912747565191239, 0.00061092223040759563, 0.00042065541492775083, 0.00033637462183833122, 0.00049471185775473714, 0.00038049722206778824, 0.0002064207656076178, 0.00074168312130495906, 0.00086736027151346207, 0.00050398590974509716, 0.00018904685566667467, 0.0012467529159039259, 0.00087506650015711784, 0.00053954072063788772, 0.00062873959541320801, 0.00094043026911094785, 0.00078256131382659078, 0.00061065098270773888, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -10521, 23373, -17298, -3103, -25895, 2311, 57620, -59907, 2033, 29229, 26258, 11850, -15208, 1441, 5545, 17709, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0004875696322415024, 0.00035916795604862273, 0.00016702106222510338, 0.0002584757748991251, 0.00039744906825944781, 0.00024156730796676129, 0.00024707152624614537, 0.00027718313504010439, 0.00025576454936526716, 0.00023659593716729432, 0.00039320421637967229, 0.0005059241084381938, 0.00025030685355886817, 0.00019604327098932117, 0.00042062849388457835, 0.00047314408584497869, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -7,-10,-1,-50,11,9,-30,-12,26,-10,-15,23,-16,-28,-25,10,1,0,-17,-13,26,-27,-1,14,-8,15,-7,127,25,-39,57,-21,7,21,32,5,42,42,-29,-16,-11,14,-13,39,13,60,21,-19,20,-25,10,2,8,-40,-16,107,-11,-4,-36,-35,14,36,31,-17,-33,-77,-10,41,12,-1,21,-7,-4,-49,-21,-33,-26,5,14,44,-6,-32,38,61,9,-3,15,-114,-4,-12,-1,-20,58,-25,-18,-10, 
  /* [1][0][][] */ 59,-68,-91,-91,127,10,70,10,-37,-29,-42,-29,5,-5,-39,3,-24,-3,31,15,-10,-11,2,-71,-8,18,-10,-98,14,-22,-33,22,24,-3,-6,-56,13,-2,-5,11,-27,-28,-44,55,-27,11,5,-14,-5,-47,-1,-56,-36,3,47,53,-41,-21,-56,-26,9,-31,25,-32,-55,116,-3,-14,-12,-79,-20,13,71,-88,-29,22,49,-56,-33,21,12,-14,-22,6,-31,8,-41,10,9,-30,-19,18,23,-42,19,78, 
  /* [2][0][][] */ -29,55,-43,21,10,45,7,88,4,-127,11,7,-33,-3,13,82,7,4,-70,56,39,65,40,36,73,0,0,-15,71,21,69,-22,22,59,-33,71,-105,-34,13,27,-9,-37,-16,-48,16,31,21,78,7,56,-4,31,90,18,-21,10,-1,6,66,-22,43,24,-12,-7,37,-20,-56,-4,0,72,-53,-22,-39,-64,34,48,11,56,51,-5,-26,-32,-3,-42,6,33,29,55,-15,7,-2,-18,-6,28,-54,-2, 
  /* [3][0][][] */ 17,14,78,6,-8,-23,-9,4,-13,-63,5,24,-16,12,5,127,17,0,16,1,93,48,14,17,49,-21,-31,23,53,30,-9,63,-69,28,20,18,-2,27,-1,25,-62,-24,11,4,8,76,-15,-27,-19,6,2,56,15,-54,-6,12,-103,30,59,17,31,74,2,-21,38,12,-22,-38,30,43,-13,-27,13,-27,51,-13,-16,16,34,36,-55,-37,5,-14,9,35,46,25,11,1,-17,0,13,91,17,-26, 
  /* [4][0][][] */ 75,21,56,-20,104,22,-16,-43,-46,-47,-27,-46,-73,6,31,51,63,-62,-68,73,-30,31,53,17,-14,38,-59,-38,27,-32,90,-39,127,58,-45,20,14,-11,-40,30,31,-80,-78,40,-16,-53,13,58,29,44,-60,19,-7,-5,1,33,-27,-14,-5,-29,20,80,79,60,21,52,-56,-29,-34,0,-12,74,23,-43,10,43,15,49,52,90,22,-24,-19,-45,-8,10,86,34,-81,3,-58,-83,15,-33,-34,7, 
  /* [5][0][][] */ 7,-1,21,29,-4,-22,28,-19,-17,-75,0,26,-22,2,2,46,0,-10,16,-8,56,83,-47,92,15,-19,0,-80,19,36,51,23,-10,27,12,-30,29,29,-3,16,-11,-8,19,-30,-17,63,25,0,-4,11,13,-2,6,5,-13,-67,-29,33,6,-4,60,37,-11,48,13,26,-31,63,7,127,-30,30,0,3,12,65,-64,12,44,31,-17,-5,0,3,3,40,20,120,2,16,-14,-25,8,55,-41,16, 
  /* [6][0][][] */ 12,-99,-33,-15,-48,56,35,63,46,23,-26,-20,-67,35,-50,6,6,37,0,-7,-37,41,-42,-8,-57,-15,16,-44,-8,11,19,26,58,-49,30,2,35,93,2,-56,-48,76,-15,-36,34,-61,-7,-47,-7,36,-4,1,-22,-88,-6,-17,-59,-100,-24,32,-17,101,127,-113,77,-83,48,-5,36,41,120,-5,-39,-23,6,36,5,-23,-68,-18,-41,42,-8,4,16,-1,55,-23,-13,36,-7,-49,-13,-42,-16,-79, 
  /* [7][0][][] */ -41,106,37,-32,127,64,45,-45,-28,-11,-10,9,-1,14,27,16,20,-20,-8,-42,18,22,57,-19,-18,8,10,13,50,-12,26,34,83,47,15,36,43,37,19,67,-91,-8,35,60,-8,4,11,45,-63,-31,12,3,17,11,-26,91,1,37,-1,31,18,-36,1,15,-36,84,-40,-68,-27,-20,-24,30,22,-31,-8,-23,6,77,61,26,-22,-33,7,-32,-17,75,40,3,7,26,-66,-73,-44,-21,37,45, 
  /* [8][0][][] */ -8,8,47,19,-127,-16,38,7,23,27,46,42,9,7,10,35,-45,11,-22,16,-3,88,-126,63,14,-38,7,-18,32,43,-8,47,51,-25,27,20,-13,39,18,30,-51,-34,-4,2,-39,79,45,-23,-55,46,17,49,-38,-19,-24,26,-67,-62,-44,-34,65,-6,-33,28,46,69,-15,-51,14,47,-45,-3,13,60,61,-1,-56,-39,-21,6,-100,9,-36,-11,38,51,109,35,34,-38,5,27,-4,46,18,-2, 
  /* [9][0][][] */ 15,-113,-80,32,26,50,-75,-16,36,16,76,89,-56,30,71,-90,40,17,63,-7,-34,-15,2,-8,-11,41,-7,10,-3,-1,8,10,25,-19,-67,52,15,29,-55,40,42,-127,-48,122,-15,-47,-6,-24,46,67,-50,-86,30,7,-3,-38,-25,50,-8,-15,37,-20,-19,59,-47,-46,-4,-30,45,60,-50,-67,68,7,29,64,68,-36,-39,-3,-4,-18,-47,25,47,-43,-19,-22,-45,-47,-71,34,-30,-32,-42,-104, 
  /* [10][0][][] */ -11,-52,-24,-17,18,-32,103,-53,80,11,36,-36,1,-24,24,-43,4,-5,-30,-16,8,73,-19,41,-47,10,-13,-127,-18,-45,95,-77,-31,27,33,-3,-14,28,8,-4,51,-8,19,-83,8,16,47,-13,-9,49,-41,-127,-53,-14,-25,-27,-9,21,9,-63,-23,34,8,16,-22,42,-20,-23,-40,27,-19,-43,-34,22,6,54,14,27,-15,11,-2,-9,-39,79,0,-44,-20,114,-11,2,1,-2,51,-6,52,-108, 
  /* [11][0][][] */ -127,28,27,4,-3,-50,-25,6,-49,-32,-19,54,18,10,-37,31,43,5,-63,-75,33,79,-15,-6,83,-19,41,4,26,44,-38,36,-27,18,3,25,-2,59,46,14,-39,0,-3,-41,80,80,66,7,60,38,7,56,34,-43,25,-25,-88,-19,0,-35,10,2,1,29,20,-32,6,-3,9,52,-22,34,-34,5,32,-10,-56,99,-80,59,-55,-14,-59,-61,127,70,63,-15,18,45,-35,-67,-24,85,-21,0, 
  /* [12][0][][] */ -21,-31,-6,71,57,3,-63,-6,46,-28,44,25,-16,0,43,22,-10,-8,61,20,17,15,-57,65,6,53,-61,127,-13,14,-51,11,-72,42,26,62,-15,-42,16,18,33,16,-11,-16,-20,71,45,21,33,38,-14,-11,-7,17,-4,-61,-11,9,42,-8,-27,96,-17,39,48,-119,-14,50,-6,-81,-11,63,5,21,30,94,-3,20,66,-18,5,25,-28,8,26,-11,56,-47,-43,-9,-8,-33,5,71,-7,-11, 
  /* [13][0][][] */ -112,52,40,-7,-91,40,0,18,-36,-38,20,75,82,5,-28,55,-43,33,-40,-18,33,44,74,-33,55,-4,4,-1,47,-9,-25,-57,-105,24,23,57,22,64,61,-4,-63,95,-17,-10,83,94,-43,47,58,15,59,127,63,-23,47,-15,-44,64,54,47,29,58,-53,32,0,10,-6,-7,-1,55,21,-70,2,-20,-41,-26,-6,42,-8,-33,18,-26,49,-47,38,-26,126,-2,10,-9,-16,-18,26,6,16,54, 
  /* [14][0][][] */ -13,-4,-53,-67,34,11,1,24,-80,36,6,-12,-12,-16,-67,-48,-83,-18,58,28,7,-84,31,-112,-26,27,-41,-26,-23,-33,-25,-15,-41,-43,3,-18,-6,-29,-4,-7,26,58,-63,23,-34,-45,-10,8,100,-26,17,-25,4,32,-69,34,20,15,-127,27,-2,10,36,8,-6,51,20,18,-46,-53,72,33,43,-12,-24,13,81,-86,-45,-99,20,-30,4,31,-5,-96,-62,-6,-36,15,48,70,-2,-9,19,-19, 
  /* [15][0][][] */ -5,-72,-19,-24,16,-7,8,-65,-11,20,6,-43,16,-6,21,-24,-60,4,-16,24,-30,-5,-66,-23,-21,10,-9,3,-19,-11,28,-64,-8,-7,6,-5,-3,-3,-57,-3,22,-52,12,50,-26,-21,32,-26,37,4,-22,-127,-24,18,5,29,-1,-22,-16,13,-6,-24,33,-5,14,-11,2,-5,3,10,-5,5,-3,5,-3,-8,-5,-5,-16,-17,11,19,-35,54,3,-38,-31,-18,-27,40,9,82,-2,5,-9,-33, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.020721709355711937, 0.015264637768268585, 0.0070983949117362499, 0.010985220782458782, 0.016891585662961006, 0.01026661042124033, 0.010500539094209671, 0.011780283413827419, 0.010869992896914482, 0.010055326856672764, 0.016711179167032242, 0.021501773968338966, 0.010638040490448475, 0.008331838995218277, 0.017876710742712021, 0.020108623430132866, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 19156, 56292, 2125, -1244, 12749, -4023, -1133, -1134, 3141, 21666, -6083, 716, -306, 12332, 4026, -12424, -7078, -509, -3462, 6841, -13866, 24470, -4469, 11059, 23927, -443, -6158, 17039, 19055, -16405, -5347, 23933, 29973, -14240, 2324, 1370, -1121, -3897, 4952, -15899, -5740, -429, -2111, -1386, 30656, -7570, 13087, -8708, -10654, 1041, 467, -1403, -4237, 21651, -4936, 15280, 18665, 109, 51464, 623, -10892, -70, -520, 454, 47, 12425, 1788, -9683, 512, 4141, -3785, -7216, -500, 828, -4948, -7691, -1622, -4106, 38297, -11902, -1997, -12571, 632, -1269, 53583, -14397, -12778, -28123, -5087, 14064, 116, 45525, -1133, -5251, -1604, 778, };
const TfArray<96, float> quant10_scale = { 96, { 0.00013257075625006109, 0.0001026542013278231, 0.00011568347690626979, 0.00026644277386367321, 0.00031646960997022688, 0.00021175635629333556, 6.2224236899055541e-05, 8.9375076640862972e-05, 0.00028896291041746736, 0.00013259763363748789, 0.00022136073675937951, 0.00012985004286747426, 0.00030045874882489443, 0.00020323945500422269, 0.00056714843958616257, 0.00011521726992214099, 0.00015850151248741895, 0.0002284821675857529, 0.00020087057782802731, 0.00014556148380506784, 5.8449571952223778e-05, 5.4470827308250591e-05, 0.00017800334899220616, 6.2058708863332868e-05, 7.1149246650747955e-05, 0.00023961252009030432, 0.00022648001322522759, 0.00020436370687093586, 8.6909909441601485e-05, 0.00057901692343875766, 0.00043465977068990469, 0.0001659189147176221, 0.00012203775258967653, 0.00010329513315809891, 0.00021928842761553824, 0.0004715092945843935, 0.00037857040297240019, 0.00040434714173898101, 0.00019403058104217052, 4.3103860662085935e-05, 0.00021172700508031994, 0.00022638565860688686, 0.00040555369923822582, 0.00010643821588018909, 0.00033287337282672524, 0.00011284973879810423, 9.6610419859644026e-05, 0.00019400440214667469, 0.0010044595692306757, 0.00022688365424983203, 0.00045400767703540623, 0.00024718799977563322, 0.00016709770716261119, 0.00013392354594543576, 0.00017175977700389922, 0.00010502315853955224, 0.00016550759028177708, 0.00057605782058089972, 3.1725539884064347e-05, 0.00025201862445101142, 0.00030765938572585583, 0.0004481355135794729, 0.00014177394041325897, 0.0001591967447893694, 0.00015345354040618986, 0.00015804267604835331, 0.0003222798986826092, 0.0002346828841837123, 0.00020846475672442466, 0.00010269197809975594, 0.00022319932759273797, 0.00010594803461572155, 0.00038980614044703543, 0.0001808036322472617, 0.00014685624046251178, 0.00024856664822436869, 0.00012641948706004769, 6.4833351643756032e-05, 6.5787877247203141e-05, 0.00011530883784871548, 0.00036841523251496255, 0.00021287109120748937, 0.00022721424465999007, 0.00030826765578240156, 6.6997534304391593e-05, 9.158939792541787e-05, 0.00011089868348790333, 0.00057191058294847608, 0.00035563283017836511, 0.00013728630437981337, 0.00034130201674997807, 2.6370231353212148e-05, 0.000156282345415093, 0.00013792385288979858, 0.00035516195930540562, 0.00043801023275591433, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -59,-73,1,127,21,80,95,-60,-9,-28,-9,12,-21,-13,38,10,4,-42,29,23,37,-87,127,25,-50,19,47,-29,-127,-127,39,16,7,34,61,-18,-31,-6,26,2,-18,34,-105,78,27,-54,34,56,-21,52,-12,24,5,-9,21,47,-91,-49,-59,-19,-2,-7,7,39,66,-29,70,14,-17,27,31,127,25,24,26,-15,-8,26,127,20,-15,20,-26,20,119,22,-76,-15,1,-35,-7,-58,5,-28,-19,31, 126,-127,73,103,-43,127,53,-115,72,-7,-18,123,127,-104,-12,22,16,127,127,-108,127,-47,76,77,-113,-120,-67,-33,-66,47,-57,-28,-107,57,-127,-86,-45,-16,-63,65,-8,127,127,93,-52,-85,-102,-53,-14,-127,39,80,63,-31,52,88,-38,40,-62,-114,-38,-41,-60,64,70,-62,28,29,-84,34,-12,90,120,127,14,18,10,62,-34,70,62,126,127,-24,-8,59,-100,127,-115,-96,13,-124,-89,-127,-45,107, -83,-26,34,-78,13,-6,66,-3,95,-49,-27,32,-14,-18,-8,-7,6,-13,4,-4,-1,-90,35,22,-118,80,5,-58,88,54,-10,-3,-14,39,15,-34,2,42,16,17,33,21,-118,84,17,-20,39,28,-16,13,-6,14,3,-2,-2,27,-72,7,-66,51,-1,40,39,-1,-8,-43,-24,24,0,18,12,29,19,-24,-4,-9,-16,2,-81,42,-25,-15,-19,-1,-97,15,-38,-20,-45,14,-16,-67,30,-37,-18,5, 
  /* [0][1][][] */ -66,-71,70,-33,-47,93,12,127,-49,-26,6,-117,28,-121,79,59,15,-62,-20,83,84,-33,42,50,-73,2,127,-24,-31,60,127,-107,-127,101,-89,-48,-39,37,-27,98,-54,-22,-4,3,-48,127,-30,77,12,93,18,3,17,-56,30,33,127,120,-91,-87,127,-43,-34,127,65,-39,-24,-1,122,41,127,97,-45,100,-7,9,18,31,-27,26,-46,127,-81,112,3,50,-51,33,80,-127,-34,-5,127,-60,-25,0, 68,120,54,-109,127,81,73,40,-127,127,127,-45,-57,-127,-127,127,127,-64,-117,-52,112,107,-122,127,-105,-80,-41,127,-103,100,-127,-127,-73,127,112,127,127,-127,-117,127,-66,-97,98,-127,-127,-17,-127,-127,127,-112,72,42,127,127,127,-127,114,-127,-127,127,19,-77,-127,-103,-127,127,-127,127,-127,-127,-91,-91,-127,-81,127,127,-127,127,-78,127,127,27,-39,-127,53,127,95,51,127,11,127,23,-66,40,127,-127, -60,-16,-54,38,-55,-76,29,-16,26,-41,-25,104,-2,83,15,42,13,63,-12,121,39,-51,-42,17,-59,95,-66,-22,-57,-12,25,-79,-81,50,2,-18,-22,61,-68,49,127,-4,-42,5,-44,-48,11,53,6,117,-11,14,-27,-75,6,22,94,6,-37,20,-34,127,98,-54,-43,12,24,-7,-86,127,3,-95,-2,-56,-21,-25,28,42,81,-18,-80,-42,52,15,-41,-4,60,26,24,54,-55,17,-43,98,-28,-8, 
  /* [0][2][][] */ -72,1,-20,-19,9,-50,75,25,51,-49,-37,-27,10,9,-25,12,6,61,11,0,-19,-121,0,0,-38,-39,47,-69,58,33,44,27,7,4,-12,-45,-8,40,4,21,-20,-12,-67,84,4,59,4,42,-17,-28,1,-25,23,-6,10,27,-81,27,-19,6,21,-8,-5,-13,-3,-48,-57,16,-40,41,23,37,17,-25,44,19,38,13,-79,5,-13,-12,6,21,-127,4,27,-44,-58,-55,-43,-90,9,76,-22,-17, 127,30,-127,-36,-73,-22,39,33,-68,-28,-23,-127,-77,102,-13,27,7,-55,5,-127,113,-41,-34,14,-127,127,-47,19,-58,-28,2,-5,-76,43,30,5,-25,-17,127,75,10,-17,58,-32,-41,83,-65,-40,-31,-3,-127,-127,-44,-23,2,49,-64,-13,17,40,-8,-11,18,-53,-55,34,57,-25,112,122,-21,-68,17,-60,24,20,110,10,53,41,10,-101,-49,8,-1,9,127,39,-66,26,-38,-127,41,85,-13,26, -62,9,-38,23,11,-61,-127,18,-7,-25,-20,-17,6,-35,19,13,0,-19,7,16,-17,-127,13,21,-3,-77,22,1,-60,-42,6,12,34,-13,-7,-30,-33,30,47,-31,23,-12,-53,-27,2,74,15,22,-11,-7,-1,-10,26,-1,0,11,-72,-10,-27,-42,-8,16,102,-18,31,-4,-15,29,-1,15,2,28,-12,10,11,28,65,10,82,1,-14,-10,-14,-13,65,10,56,-38,53,27,-32,-87,-10,30,-17,-23, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0056342571042478085, 0.0043628034181892872, 0.0049165477976202965, 0.011323817074298859, 0.013449958525598049, 0.0089996447786688805, 0.0026445300318300724, 0.0037984405644237995, 0.012280923314392567, 0.0056353993713855743, 0.0094078313559293747, 0.0055186264216899872, 0.012769496068358421, 0.0086376769468188286, 0.024103807285428047, 0.0048967339098453522, 0.0067363143898546696, 0.0097104916349053383, 0.0085369991138577461, 0.0061863628216087818, 0.0024841066915541887, 0.0023150101769715548, 0.0075651421211659908, 0.0026374950539320707, 0.003023842815309763, 0.010183531790971756, 0.0096254004165530205, 0.0086854575201869011, 0.0036936711985617876, 0.024608219042420387, 0.01847304031252861, 0.0070515535771846771, 0.0051866043359041214, 0.004390043206512928, 0.0093197580426931381, 0.020039144903421402, 0.016089241951704025, 0.017184752970933914, 0.0082462998107075691, 0.0018319140654057264, 0.0089983977377414703, 0.0096213901415467262, 0.017236031591892242, 0.004523624200373888, 0.014147118665277958, 0.0047961138188838959, 0.004105942789465189, 0.0082451868802309036, 0.042689532041549683, 0.0096425553783774376, 0.019295325502753258, 0.010505490005016327, 0.0071016522124409676, 0.0056917504407465458, 0.007299790158867836, 0.0044634840451180935, 0.0070340721867978573, 0.024482456967234612, 0.0013483354123309255, 0.010710790753364563, 0.013075524009764194, 0.019045758992433548, 0.0060253925621509552, 0.0067658615298569202, 0.0065217753872275352, 0.0067168134264647961, 0.013696895912289619, 0.0099740223959088326, 0.0088597517460584641, 0.0043644090183079243, 0.0094859711825847626, 0.0045027914457023144, 0.016566760838031769, 0.0076841539703309536, 0.0062413900159299374, 0.010564082302153111, 0.0053728283382952213, 0.0027554172556847334, 0.002795984735712409, 0.0049006254412233829, 0.015657646581530571, 0.0090470211580395699, 0.0096566053107380867, 0.013101374730467796, 0.0028473951388150454, 0.0038925493136048317, 0.0047131939791142941, 0.024306198582053185, 0.015114394947886467, 0.005834667943418026, 0.014505335129797459, 0.0011207348434254527, 0.0066419998183846474, 0.0058617638424038887, 0.01509438268840313, 0.018615433946251869, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1234, 4151, 11784, 35568, 24789, -4635, -1758, 6210, 26957, -2416, 6856, 6607, 6813, 12510, 45642, 832, 3334, 8644, 15073, 6498, -1071, 1022, 11047, -1865, 4026, -513, 11732, 7963, 4153, 72931, 51588, 13552, 13438, -321, 15839, 3171, 1658, 7459, 25194, -925, 9952, 9877, 42378, -2431, 26827, 7504, 6361, 14204, 53304, 14338, 1380, 13420, -3715, -70, -2670, 4334, -888, 12800, 6534, 12973, 7276, 20698, 8438, 4410, 15933, 4951, 7334, -7601, 6434, -3235, 6101, 17868, 33047, 8178, -3148, -3210, 6733, 53, 1295, -2016, 22196, 11009, 3662, 14332, 2610, -104, 19315, 33421, 12219, 8226, 6899, -1, 8029, 10174, 6100, 10829, };
const TfArray<96, float> quant12_scale = { 96, { 0.00026552085182629526, 0.00029363948851823807, 0.00016420494648627937, 6.5525884565431625e-05, 0.00012025723844999447, 0.00022329762578010559, 0.00046104262582957745, 0.00025011930847540498, 8.5944629972800612e-05, 0.00043034600093960762, 0.00039274542359635234, 0.00013704535376746207, 0.00016574774053879082, 0.00018766836728900671, 5.271151167107746e-05, 0.00040966359665617347, 0.00018325017299503088, 0.00013493849837686867, 0.00013829636736772954, 0.00021094563999213278, 0.00024557442520745099, 0.00052344240248203278, 0.00016348437929991633, 0.00035941728856414557, 0.00066052918555215001, 0.00017045807908289135, 0.00019110270659439266, 0.00018284503312315792, 0.00039706466486677527, 4.9611415306571871e-05, 5.5140928452601656e-05, 0.00017176933761220425, 0.0001374327257508412, 0.00028470254619605839, 0.00012211587454658002, 0.00016519575729034841, 0.00028070085681974888, 0.000198250578250736, 0.00010700837447075173, 0.00045387417776510119, 0.00018307300342712551, 0.00015125407662708312, 6.3365936512127519e-05, 0.00038277549901977181, 0.00012006084580207244, 0.00017599196871742606, 0.00024635059526190162, 0.00019320854335092008, 7.6443400757852942e-05, 0.00013984180986881256, 0.00012571971456054598, 0.00012916064588353038, 0.00027571461396291852, 0.00029460963560268283, 0.00037267396692186594, 0.00025321435532532632, 0.00020421569934114814, 0.00014283228665590286, 0.00031584195676259696, 0.00011391677981009707, 0.00022301518765743822, 6.8256355007179081e-05, 0.00019302824512124062, 0.00022288596665021032, 0.00016228949243668467, 0.0003280782257206738, 0.0001703614107100293, 0.00016306020552292466, 0.00027250047423876822, 0.00019559686188586056, 0.00017742629279382527, 9.9338125437498093e-05, 6.4481784647796303e-05, 0.00014178849232848734, 0.00048185588093474507, 0.00037375488318502903, 0.00022965250536799431, 0.00034509389661252499, 0.00054334435844793916, 0.00025540112983435392, 9.5430696092080325e-05, 0.00014570500934496522, 0.00021475333778653294, 0.00013697841495741159, 0.00043401290895417333, 0.00024862791178748012, 0.00012441501894500107, 0.00011060460383305326, 0.00011906869622180238, 0.0002720954071264714, 0.00017666786152403802, 0.00034199081710539758, 0.0001839455944718793, 0.0001533929753350094, 0.00018536423158366233, 0.00014251646643970162, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -26,69,-28,-8,-22,56,42,17,58,21,-67,70,20,-127,-44,-119, 
  /* [1][0][][] */ -7,38,-41,-19,-6,-16,127,-101,-38,56,-48,-18,29,-45,10,-11, 
  /* [2][0][][] */ -88,112,-28,-4,22,49,-20,52,-9,75,13,-3,-15,19,127,-44, 
  /* [3][0][][] */ -66,-24,51,54,-108,68,16,-12,8,72,-62,-26,127,-16,-69,-88, 
  /* [4][0][][] */ -49,-89,46,127,-35,40,-31,-9,27,-48,-1,58,45,126,1,-94, 
  /* [5][0][][] */ 30,-39,73,-33,36,45,12,86,-29,33,-24,-16,16,15,-127,18, 
  /* [6][0][][] */ 27,-24,52,26,74,36,-71,-41,-3,-19,11,-60,127,-12,-22,29, 
  /* [7][0][][] */ -28,-31,127,25,-59,-56,17,-7,-68,45,-51,-15,34,-27,46,-39, 
  /* [8][0][][] */ 2,-15,37,85,-97,16,42,55,-63,19,9,-40,20,-30,-105,-127, 
  /* [9][0][][] */ 48,-127,2,73,-8,0,-1,-24,50,6,47,82,-30,6,-44,-77, 
  /* [10][0][][] */ -42,1,-62,-19,-82,-36,13,34,94,127,52,8,-49,13,66,-5, 
  /* [11][0][][] */ 75,58,-106,-76,60,-72,-111,-54,-11,-16,-17,11,20,-107,127,-22, 
  /* [12][0][][] */ 92,-42,-36,-44,-51,9,-14,-19,-74,-44,-1,-57,-9,127,-2,113, 
  /* [13][0][][] */ 27,-22,-78,-13,17,-80,-14,8,22,-15,32,-2,49,14,127,42, 
  /* [14][0][][] */ -43,-127,100,34,12,35,8,70,32,89,38,-67,64,37,-42,87, 
  /* [15][0][][] */ -6,-13,29,93,-18,-3,127,-8,17,-112,9,-2,32,-9,14,-41, 
  /* [16][0][][] */ 10,-127,-86,45,-22,-50,66,-109,122,111,52,38,-27,53,94,112, 
  /* [17][0][][] */ -44,-93,25,51,35,-1,-34,-86,46,60,-97,21,-26,75,-56,-127, 
  /* [18][0][][] */ -97,76,-12,48,-119,-88,-19,-84,19,-127,-16,10,-95,-88,32,14, 
  /* [19][0][][] */ -16,-34,21,-33,21,-73,-77,87,-10,-127,3,-19,-37,66,78,43, 
  /* [20][0][][] */ 28,5,116,-113,26,41,-99,14,-86,-7,0,51,45,29,-127,92, 
  /* [21][0][][] */ -10,11,-31,-2,8,-37,-55,-32,33,34,-46,-21,-76,-58,127,-62, 
  /* [22][0][][] */ 14,16,-19,-31,19,-87,-4,-52,-32,6,-46,-127,-73,34,91,23, 
  /* [23][0][][] */ -4,13,24,-6,-20,14,-7,16,5,-2,102,18,127,-11,-11,-32, 
  /* [24][0][][] */ 5,-1,3,-45,-23,-11,-1,46,-37,10,34,-127,42,-59,6,46, 
  /* [25][0][][] */ -17,-47,-23,55,19,66,-73,-115,127,125,-55,26,-67,-35,-50,-39, 
  /* [26][0][][] */ 22,-9,18,-127,83,-13,42,71,110,-9,75,-38,23,-1,-10,102, 
  /* [27][0][][] */ 96,-12,36,-39,21,-51,-14,-41,-31,41,-127,-55,12,-3,-7,59, 
  /* [28][0][][] */ -127,-16,-35,-50,30,13,27,-3,-20,3,-21,-62,20,-11,-47,26, 
  /* [29][0][][] */ -103,20,-49,113,-41,48,94,-18,-32,-11,-127,-26,117,-57,12,-32, 
  /* [30][0][][] */ 80,13,127,-60,82,56,7,9,-17,-93,109,-34,5,0,-52,112, 
  /* [31][0][][] */ 10,-127,-3,-70,-6,-70,-5,-19,9,55,114,31,28,107,36,125, 
  /* [32][0][][] */ -20,49,-47,11,-127,2,-40,-75,-59,-32,47,33,-10,47,60,35, 
  /* [33][0][][] */ 2,-25,30,114,29,-92,-28,-61,-83,101,127,-30,-16,29,46,100, 
  /* [34][0][][] */ 23,-63,75,55,115,7,-127,3,-67,86,-80,86,-6,-88,0,-19, 
  /* [35][0][][] */ 38,95,-87,-10,29,-127,-51,30,25,5,-45,38,17,35,80,69, 
  /* [36][0][][] */ -61,-90,-127,21,47,71,-54,17,-51,3,31,-20,17,12,46,22, 
  /* [37][0][][] */ 40,13,28,-22,-42,-34,44,-127,-16,43,-79,61,-64,-86,7,-61, 
  /* [38][0][][] */ -127,9,-50,55,-70,63,51,38,7,-4,31,20,14,-18,10,-112, 
  /* [39][0][][] */ -44,-8,36,52,21,-36,-127,53,-16,44,21,-28,-21,-22,-14,-18, 
  /* [40][0][][] */ -48,62,-23,31,-33,-9,127,13,-96,1,-14,-74,-2,-29,-112,13, 
  /* [41][0][][] */ 19,29,-73,-74,-2,45,95,127,-95,81,-43,-80,-31,73,-43,-32, 
  /* [42][0][][] */ 13,115,-99,26,117,1,-1,-40,127,-7,-23,-46,-92,-41,-44,2, 
  /* [43][0][][] */ -19,54,-4,-13,-17,-44,-1,-127,-37,37,-6,9,-36,1,9,14, 
  /* [44][0][][] */ 11,2,-47,-36,-52,-43,75,-49,127,23,86,17,47,51,30,79, 
  /* [45][0][][] */ -30,34,-36,-127,10,-29,67,70,48,-69,-40,-88,-31,18,-74,122, 
  /* [46][0][][] */ -72,-4,11,127,-110,62,-25,-8,-90,25,-40,24,32,-2,1,15, 
  /* [47][0][][] */ -18,-75,-30,70,13,4,-14,-11,21,83,127,66,-39,-29,59,21, 
  /* [48][0][][] */ 46,-37,60,-99,124,30,-127,10,-34,-30,48,73,-87,47,35,13, 
  /* [49][0][][] */ -69,-11,127,75,-31,78,-37,-46,120,36,-38,71,78,37,21,-119, 
  /* [50][0][][] */ 127,115,-7,-107,73,12,-7,-24,116,20,48,34,-16,-4,-18,63, 
  /* [51][0][][] */ 67,62,-1,-98,127,-41,-56,-44,-10,-69,45,-6,-52,-25,10,31, 
  /* [52][0][][] */ -30,11,13,52,18,19,-56,13,-48,127,-65,-24,23,40,-54,-51, 
  /* [53][0][][] */ 47,62,55,-61,4,37,17,-6,-74,-61,-29,39,-3,-100,-127,-4, 
  /* [54][0][][] */ -18,-15,24,47,46,-21,-5,-46,28,48,-20,-28,-9,127,-33,-18, 
  /* [55][0][][] */ -33,127,27,-24,48,-24,21,-7,-33,1,22,-41,-25,-33,68,-8, 
  /* [56][0][][] */ -16,-24,41,-20,87,52,-41,68,22,-32,127,54,38,52,35,91, 
  /* [57][0][][] */ 28,-30,53,127,-18,48,-12,35,10,54,39,-28,-23,21,14,65, 
  /* [58][0][][] */ 54,127,-21,-92,43,11,44,-5,69,-25,-91,21,2,-47,77,38, 
  /* [59][0][][] */ 65,60,49,-117,-20,112,65,98,-29,-44,-7,-127,-93,-34,-120,68, 
  /* [60][0][][] */ 77,45,100,-70,-85,110,24,-127,-26,-1,-72,3,19,-17,15,-49, 
  /* [61][0][][] */ -15,-15,-4,104,-102,22,72,127,40,74,27,20,127,102,20,-12, 
  /* [62][0][][] */ 12,49,5,-70,-11,-49,-9,-33,-73,-9,-21,-126,-42,-48,127,13, 
  /* [63][0][][] */ -2,31,26,-58,-21,32,-51,-127,-44,76,34,9,94,-29,45,-56, 
  /* [64][0][][] */ 7,-70,68,80,-3,127,-53,-104,-2,-121,-35,-47,40,-33,-13,-71, 
  /* [65][0][][] */ -53,-8,33,-13,-21,127,15,-5,-28,8,4,18,-11,-10,-46,-26, 
  /* [66][0][][] */ -14,-43,127,33,29,21,4,92,34,74,30,-43,18,35,-90,-62, 
  /* [67][0][][] */ -20,-2,-3,124,68,-50,-60,-127,118,-58,-122,40,-97,58,-98,-42, 
  /* [68][0][][] */ 23,-11,-57,127,-13,-26,13,-22,-18,-34,21,17,-10,92,96,47, 
  /* [69][0][][] */ -56,-47,-29,36,14,-67,-16,111,84,63,127,60,111,68,34,41, 
  /* [70][0][][] */ -16,35,-13,-88,-106,-43,117,-4,-127,10,-70,3,-26,60,122,-34, 
  /* [71][0][][] */ 22,24,-50,-34,38,-45,4,-7,24,-64,-65,-50,11,-76,127,20, 
  /* [72][0][][] */ 44,54,-43,-33,20,-117,-22,-127,15,-54,-31,-11,22,25,37,61, 
  /* [73][0][][] */ -70,-94,-17,-1,-127,-12,41,-75,43,49,-42,-73,12,-51,29,-55, 
  /* [74][0][][] */ -36,50,-12,95,-76,-29,-127,103,-55,-49,1,12,-10,-16,-13,6, 
  /* [75][0][][] */ -72,43,-30,-26,17,2,21,115,-11,32,26,-4,-127,111,37,12, 
  /* [76][0][][] */ -127,-23,-19,-34,74,-67,-107,-98,-26,29,31,-67,2,10,106,-15, 
  /* [77][0][][] */ -9,-6,-50,-15,-39,-38,-5,-47,127,-38,-31,-5,-5,32,61,-43, 
  /* [78][0][][] */ -51,-127,-41,42,19,36,-11,-1,24,-17,-42,75,16,8,-3,56, 
  /* [79][0][][] */ -36,-10,-19,-64,50,-87,71,-47,26,-10,54,14,9,7,127,-38, 
  /* [80][0][][] */ 80,-37,127,-117,-40,-19,-86,-55,-27,-100,15,-12,-69,94,28,27, 
  /* [81][0][][] */ 18,-2,39,42,30,127,-8,-11,16,-10,-6,19,75,26,-60,36, 
  /* [82][0][][] */ -127,-19,60,-46,41,13,21,39,-44,3,33,-79,17,-78,-88,35, 
  /* [83][0][][] */ -33,29,-6,-75,-48,-52,15,2,-99,27,-4,-127,23,-76,-41,37, 
  /* [84][0][][] */ 86,61,20,-20,-44,-13,-22,9,-3,17,100,-66,-127,7,60,-106, 
  /* [85][0][][] */ 101,71,15,-62,46,25,-39,107,-57,-100,-127,73,-14,27,25,-93, 
  /* [86][0][][] */ 27,84,-66,-61,-23,17,-12,10,-74,-76,1,-46,-86,-76,-66,127, 
  /* [87][0][][] */ 127,3,53,-27,-55,-3,55,4,26,10,-112,1,60,5,5,8, 
  /* [88][0][][] */ 8,72,62,127,35,-20,-32,-32,111,-44,-20,6,-33,48,46,-10, 
  /* [89][0][][] */ 58,47,-112,-39,-30,20,15,-53,3,-10,-3,-82,33,44,-10,-127, 
  /* [90][0][][] */ 8,-22,28,-71,-27,26,97,17,20,-53,127,-3,99,-43,-2,71, 
  /* [91][0][][] */ 56,-11,15,-96,-47,-76,40,-1,54,17,69,114,13,-7,0,127, 
  /* [92][0][][] */ 19,-40,9,85,26,43,-83,-127,71,-54,2,-28,36,-82,-33,-6, 
  /* [93][0][][] */ 43,76,51,-104,27,7,32,127,51,-43,7,-56,-70,75,-48,96, 
  /* [94][0][][] */ -127,-41,-4,31,98,-62,-58,3,51,-18,84,-31,41,48,-36,-68, 
  /* [95][0][][] */ 21,44,26,-127,26,-22,-22,-39,52,-74,-34,-99,-48,-2,-11,6, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.00080175482435151935, 0.00088666059309616685, 0.00049582589417695999, 0.00019785902986768633, 0.00036312337033450603, 0.00067425949964672327, 0.0013921436620876193, 0.00075524899875745177, 0.00025951454881578684, 0.0012994534336030483, 0.0011859164806082845, 0.00041381601477041841, 0.00050048442790284753, 0.00056667497847229242, 0.00015916531265247613, 0.00123700185213238, 0.00055333401542156935, 0.00040745423757471144, 0.00041759348823688924, 0.00063696200959384441, 0.0007415255531668663, 0.0015805631410330534, 0.00049365009181201458, 0.0010852803243324161, 0.0019945043604820967, 0.00051470758626237512, 0.00057704513892531395, 0.000552110665012151, 0.0011989586055278778, 0.00014980440028011799, 0.00016650107863824815, 0.000518666987773031, 0.00041498569771647453, 0.00085967499762773514, 0.00036873563658446074, 0.0004988177097402513, 0.00084759172750636935, 0.00059862853959202766, 0.00032311768154613674, 0.00137049809563905, 0.00055279902881011367, 0.00045672003761865199, 0.00019133694877382368, 0.0011558117112144828, 0.00036253035068511963, 0.00053141743410378695, 0.00074386922642588615, 0.00058340386021882296, 0.00023082505504135042, 0.00042226005461998284, 0.00037961761699989438, 0.00039000768447294831, 0.00083253550110384822, 0.00088959006825461984, 0.0011253096163272858, 0.00076459470437839627, 0.00061664055101573467, 0.00043128995457664132, 0.00095370219787582755, 0.0003439779975451529, 0.00067340664099901915, 0.00020610382489394397, 0.0005828594439662993, 0.00067301647504791617, 0.0004900420899502933, 0.00099065026734024286, 0.00051441567484289408, 0.00049236929044127464, 0.00082283018855378032, 0.000590615498367697, 0.00053574849152937531, 0.00029995694058015943, 0.00019470629922579974, 0.0004281381843611598, 0.0014549903571605682, 0.0011285734362900257, 0.00069344841176643968, 0.0010420300532132387, 0.0016406582435593009, 0.00077119778143242002, 0.00028815824771299958, 0.00043996429303660989, 0.00064845953602343798, 0.00041361388866789639, 0.0013105259276926517, 0.00075074570486322045, 0.00037567800609394908, 0.00033397669903934002, 0.00035953448968939483, 0.00082160707097500563, 0.00053345836931839585, 0.0010326601332053542, 0.00055543385678902268, 0.00046317855594679713, 0.00055971753317862749, 0.00043033633846789598, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -4351, -14565, 24935, 33851, 42251, 9333, -55114, -6060, 21753, 12865, 51347, 27408, -15199, 35736, 48175, -31923, };
const TfArray<16, float> quant14_scale = { 16, { 0.0003346067969687283, 0.0003397338732611388, 0.00025822716997936368, 0.00017838901840150356, 0.00027384504210203886, 0.00029749659006483853, 0.00019716202223207802, 0.00035556673537939787, 0.00020617856353055686, 0.00021991186076775193, 0.00028469669632613659, 0.00051045318832620978, 0.00029991418705321848, 0.00028895278228446841, 0.00045429661986418068, 0.00031032570404931903, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 1,-5,-18,19,21,63,2,7,53,27,-16,-22,-6,6,59,45,20,-29,-55,-11,123,-83,-28,-55,-66,-41,-86,-90,-34,-15,97,62,109,31,-7,-9,-4,-12,12,8,-39,-3,0,-26,-8,-15,-33,13,20,51,13,22,-44,-11,-20,-12,-16,63,-47,-25,-64,0,-12,-10,38,-48,61,-2,41,3,11,-18,-42,24,-14,-62,2,-72,23,54,-2,6,-57,-57,-8,49,25,-7,90,15,-2,-42,17,38,-7,127, 
  /* [1][0][][] */ 30,-68,71,47,-23,-36,-37,-54,-7,-50,-32,15,25,-51,-29,-28,-67,13,17,2,-29,-74,-9,26,73,-12,-67,-21,11,52,22,46,-10,12,-25,52,-40,-41,55,-48,-5,-51,35,-8,-19,54,32,-15,42,25,22,-30,33,-32,52,11,15,4,-11,-76,53,-52,0,-36,28,-78,38,70,0,34,-32,-34,-32,28,20,22,-25,71,7,2,25,29,-44,34,-127,23,3,31,-32,-34,17,-4,0,-33,30,15, 
  /* [2][0][][] */ -12,24,-44,-43,14,-18,23,28,62,29,-1,7,-23,-5,37,42,-29,-10,12,-23,-17,-72,-15,-32,-48,13,-66,38,23,-4,79,-29,-7,-92,-60,7,26,127,-48,12,-18,-18,2,8,-32,-53,-49,-16,23,29,-23,-21,8,-6,-15,-61,8,51,19,13,-35,26,72,101,-30,-60,52,-76,8,-9,-9,47,-46,10,-38,4,34,-20,-14,-41,31,69,14,46,-12,-17,-5,-33,-7,65,-16,-48,-27,-15,14,56, 
  /* [3][0][][] */ -45,17,-93,32,44,-32,37,-24,-46,26,2,-2,-8,20,53,6,83,-63,2,-20,-8,10,-16,15,21,7,4,57,24,-93,-27,3,36,-16,-8,-12,-16,44,-58,59,-2,-34,45,-20,-14,-33,0,57,-127,53,13,36,-101,-48,-27,-85,58,27,-23,65,-29,71,-9,45,-27,-45,-29,13,65,9,7,75,-80,-46,-16,-12,-15,-72,24,-73,23,-50,30,84,98,35,57,-21,12,-67,-18,4,1,7,-3,-18, 
  /* [4][0][][] */ 39,-22,49,-41,-18,-19,-39,19,-32,-15,-65,2,9,51,3,18,22,-9,-28,-54,-14,18,52,5,-46,1,62,9,19,-102,6,-35,-2,50,-36,33,-5,0,71,4,-60,-26,-78,-35,14,27,-35,-108,-51,72,-31,-39,-52,-17,55,-7,18,-57,9,-22,11,41,-27,24,3,-127,51,-3,-61,36,-25,25,-11,-14,-10,11,-19,37,98,20,-5,59,118,1,-4,2,-13,51,83,55,3,1,-10,-14,0,-28, 
  /* [5][0][][] */ 7,32,-32,-3,7,-6,15,107,46,14,-29,-22,-11,37,41,50,14,-16,2,-24,-29,-2,-1,-18,15,21,5,56,59,-27,19,59,-19,-14,-38,-19,-22,-18,-25,26,-30,-39,2,-2,42,4,6,-9,21,11,9,4,-30,-21,5,-2,0,-19,-39,19,-36,13,29,-1,5,33,13,-13,7,-10,-2,29,-1,5,-1,-7,18,1,-11,62,-26,-44,26,47,8,-9,34,-17,-23,-12,-1,-127,-21,-39,-1,-89, 
  /* [6][0][][] */ -27,36,15,-7,-13,-55,-2,6,-7,10,47,-23,1,-25,-7,-82,-7,-58,55,32,28,-66,-51,2,127,-114,-28,-3,23,84,30,-3,-54,73,-26,-5,13,-33,-58,-20,-58,-58,-35,-42,36,-28,101,-41,80,65,-32,50,13,-33,16,-56,25,5,-66,29,30,21,-25,-40,-13,70,-4,83,-54,-40,26,-44,22,86,107,-10,20,30,24,35,-51,-19,95,-47,35,112,76,-88,35,-66,-87,-20,-81,14,4,74, 
  /* [7][0][][] */ 62,17,-2,-4,0,-7,1,-44,7,-18,-50,3,-28,-21,41,6,63,-20,-43,-23,39,-30,-27,-25,-20,-4,12,-22,4,11,4,27,-7,-60,1,2,30,-35,-7,-11,6,-30,-35,-2,-3,28,-8,17,-3,31,17,22,-20,10,-5,-52,-17,-21,-42,1,4,-5,47,19,-29,58,9,-29,35,-2,8,6,4,13,-16,15,48,17,-1,-14,-44,8,43,-8,-1,127,8,25,-73,38,-22,-3,-34,1,-9,-24, 
  /* [8][0][][] */ -29,57,15,1,15,-9,51,54,6,50,-54,11,-29,14,-5,6,58,8,-93,-23,51,73,-74,45,-99,-33,6,87,68,-74,-33,20,2,-4,6,11,-13,117,-52,63,-70,-23,51,-127,0,40,52,-38,-3,71,-24,120,-113,63,-1,-60,23,-38,-38,8,-1,31,5,64,-58,10,27,-35,39,-22,31,67,-52,14,73,-18,-7,-93,31,-49,-19,-28,36,34,-14,76,56,-65,43,-20,-40,57,41,8,0,29, 
  /* [9][0][][] */ -29,-26,36,-10,2,17,-11,-4,29,-2,22,-23,-6,-27,-25,14,-22,46,45,-40,-40,-15,18,0,12,0,10,-13,11,-42,-85,5,-23,67,7,-13,-21,-12,-96,2,19,29,6,-53,11,-4,64,-44,-24,-30,16,6,42,-19,43,-5,14,18,14,-19,-13,17,-15,-13,1,127,26,35,-39,19,-11,21,-44,-25,-45,47,31,-30,36,2,41,17,33,-25,-19,27,-9,48,-9,-73,-4,-32,24,11,49,-70, 
  /* [10][0][][] */ 76,2,22,-5,71,-127,2,-62,62,77,-17,-14,-54,39,6,-3,-10,40,-34,34,-85,-7,-19,-63,-107,-20,-44,81,-13,78,32,27,5,9,-2,-39,57,92,-34,-31,0,20,23,-28,-39,-29,-44,-9,-63,-69,-25,9,5,-8,49,3,-15,12,53,2,-16,40,10,61,6,42,10,9,82,-2,50,56,-86,11,-98,9,31,-15,13,-33,72,62,-79,-75,66,-8,100,6,-32,35,7,-51,59,32,-15,-123, 
  /* [11][0][][] */ 48,47,-43,4,-4,29,78,31,12,-13,-25,-62,-3,-5,56,46,20,-11,-127,-10,18,31,-36,18,-49,-27,-32,24,27,-8,-51,19,0,-26,-9,21,-2,67,-1,67,-6,-7,90,-97,30,-60,-37,-32,-102,17,-6,13,37,23,-21,-20,-10,-9,-21,13,-1,30,41,33,-65,54,-1,-21,25,-18,22,36,-57,-33,-1,18,2,-36,-29,-15,-38,-20,103,63,48,-9,-15,-43,35,-1,-11,-14,-7,-6,-30,22, 
  /* [12][0][][] */ -37,20,3,-10,16,48,25,9,127,38,13,-28,-13,47,-24,2,4,35,31,45,27,15,-72,0,31,26,18,17,-23,-7,-39,-50,-24,4,2,-16,17,38,0,73,-44,-27,30,3,20,-5,-15,1,41,-3,-51,-18,-20,-19,24,39,87,-10,54,3,-34,27,26,-15,0,70,-12,-6,-15,-50,2,63,-8,11,-114,33,77,-47,38,-65,-30,-4,73,33,11,-40,-23,7,28,39,-16,0,-51,-3,21,22, 
  /* [13][0][][] */ 23,2,-54,16,33,-23,52,-15,-11,31,28,11,5,8,-2,1,69,-96,-86,-20,1,-23,18,-22,-20,-6,40,28,-35,-48,-12,9,10,-17,35,-9,56,6,35,52,-37,12,30,50,10,-19,-7,-127,5,-18,47,11,-5,-2,-40,-36,-40,45,10,47,-21,52,-15,27,-22,-41,-56,-120,48,19,32,-25,-25,24,11,1,-18,-6,45,-3,35,-34,-17,14,40,39,20,-21,3,33,18,23,26,27,-16,-2, 
  /* [14][0][][] */ -127,-95,58,33,-44,-28,-38,-29,-14,-21,26,31,98,-42,-104,-17,25,10,-1,-1,-35,1,49,2,-114,21,61,-26,-52,-37,-21,-28,-13,46,44,-75,-3,-9,26,-4,17,16,-29,-22,22,107,67,47,-118,9,45,31,-51,12,9,-11,25,-2,68,39,39,15,-55,18,3,-61,-63,52,11,70,-35,-65,-66,-23,37,54,-57,55,57,23,111,11,-9,6,-13,-35,18,16,44,-47,63,35,50,41,12,-3, 
  /* [15][0][][] */ 88,-9,38,16,-14,49,4,-46,-7,15,50,-13,-53,25,14,-7,17,11,33,6,59,-1,-78,-29,-30,-41,11,-18,-32,104,20,-82,-21,-18,64,1,53,-16,-45,-127,-8,26,-2,35,24,41,-12,-25,47,-42,-26,-23,48,-52,41,-61,-54,-41,39,29,-83,3,40,3,65,-26,-46,34,-11,18,1,-75,75,82,6,-12,38,-26,71,10,-53,35,16,42,-14,8,3,-57,-16,44,-10,28,-64,39,37,23, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.014220788143575191, 0.014438689686357975, 0.010974653996527195, 0.0075815329328179359, 0.011638414114713669, 0.012643604539334774, 0.008379385806620121, 0.015111586079001427, 0.0087625887244939804, 0.0093462541699409485, 0.012099608778953552, 0.021694259718060493, 0.012746352702379227, 0.012280493043363094, 0.019307605922222137, 0.013188842684030533, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 11148, -12247, 3117, 88536, -5892, -3299, -11891, -277, -3209, -112, 2678, -2014, 2833, 808, 6967, -6313, -1064, 19085, 29557, 2008, 4910, -3153, -3442, 498, 14478, 1674, 112, -4937, -8128, -6434, 6151, -10982, 1645, -582, 1839, 18182, 1112, -11387, 21913, 1851, -320, 345, -14043, -7827, -8432, 63447, 446, 34127, 24949, -16358, 862, 10824, 3774, -917, -6868, 3254, -15319, -844, 137, -9388, 16, 2, -23772, -1190, 1676, 9612, 32651, 21095, -14612, -19, -11743, -3122, 63718, 6749, -1000, 969, 24696, 28977, 386, -17355, -1673, -15538, 2206, -4689, 687, 718, 1279, -1499, 1319, -5037, 272, 653, 2426, 640, 41, 45506, };
const TfArray<96, float> quant16_scale = { 96, { 0.00026399432681500912, 7.5154464866500348e-05, 0.00026819511549547315, 2.4593931811978109e-05, 0.00016947662516031414, 0.00017099162505473942, 0.00038773095002397895, 9.1870751930400729e-05, 0.00013714490341953933, 0.00049915735144168139, 0.00018867220205720514, 0.00036721679498441517, 0.00010201473196502775, 0.00045213091652840376, 0.00014248196384869516, 0.00013709133781958371, 0.00014818232739344239, 0.00027460051933303475, 6.5791900851763785e-05, 0.00024270580615848303, 4.4403837819118053e-05, 0.0002054701471934095, 0.00012201120262034237, 0.00031696265796199441, 0.00027861949638463557, 0.00022008732776157558, 0.00019316634279675782, 0.00018275440379511565, 0.00010027924872701988, 0.00014064730203244835, 0.00013743268209509552, 0.00017980588017962873, 0.00012682384112849832, 0.00012318106018938124, 0.0002990809443872422, 0.00012479026918299496, 0.00042598278378136456, 0.00012203138612676412, 5.0696984544629231e-05, 0.00026290200185030699, 0.00024509939248673618, 0.00039413484046235681, 0.0003556377487257123, 0.00016049790428951383, 0.00015418490511365235, 5.2080627938266844e-05, 0.0002214790292782709, 9.9174343631602824e-05, 0.00010031082638306543, 0.00012839007831644267, 0.00016486183449160308, 9.9686745670624077e-05, 0.00025899318279698491, 0.00027898262487724423, 0.00032300199382007122, 0.0005796420737169683, 0.00021418782125692815, 0.00031561733339913189, 0.00013591143942903727, 7.6212272688280791e-05, 0.00047367671504616737, 0.00017613360250834376, 0.00018930273654405028, 0.00015962349425535649, 0.00025067827664315701, 0.00033949926728382707, 7.9851815826259553e-05, 9.2837544798385352e-05, 0.00043759978143498302, 0.00024228398979175836, 0.00029230630025267601, 7.3761490057222545e-05, 9.0619963884819299e-05, 0.00018374323553871363, 0.00022132309095468372, 0.00032217719126492739, 0.00056600035168230534, 6.1507285863626748e-05, 0.00028835007105953991, 0.00010322709567844868, 0.00022322303266264498, 0.00014203519094735384, 0.00010920530621660873, 0.00011414100299589336, 0.00016852410044521093, 0.00010163328261114657, 0.00014198281860444695, 0.00022050942061468959, 0.00023287876683752984, 0.00016021687770262361, 0.0001808567758416757, 0.00013465961092151701, 0.00015034491661936045, 0.00054795079631730914, 0.028047198429703712, 8.6175336036831141e-05, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -14,29,-18,114,-9,20,-61,-59,6,-6,91,1,-5,-11,2,51,-3,9,-51,-1,89,-2,38,-33,-1,22,37,57,20,17,24,46,-2,20,8,-14,-1,70,-66,-40,15,9,29,15,-86,-66,29,-7,-12,-17,-9,-6,55,6,-11,-4,-5,-40,27,-33,25,2,127,36,-15,-13,15,-50,72,31,8,33,73,-22,86,2,12,-126,33,60,-8,27,127,-8,34,31,-30,-17,29,-7,-20,82,-11,22,0,14, -48,20,-7,11,49,-13,-3,-127,24,16,-127,-1,-19,-16,8,94,7,-32,-12,-18,84,-92,127,23,-60,-30,-104,-15,24,27,-49,19,110,15,-6,-2,-30,127,-48,-127,2,-19,-15,11,44,-127,127,-46,-79,53,46,2,41,-64,31,53,32,46,-105,81,127,36,28,-28,44,-36,-94,3,41,-34,-22,72,-41,-30,101,-7,-25,-58,-32,59,-65,76,-1,12,-11,49,62,-35,-25,65,-17,71,-127,-32,27,-127, 2,7,-24,-70,14,9,46,16,-7,-2,9,79,-8,-11,-12,24,-13,19,-32,12,37,30,29,-38,-4,-29,8,14,2,13,45,-70,33,12,19,-19,8,24,-25,-32,-2,6,-6,3,24,-28,24,-5,11,-2,-4,-5,12,5,-4,6,0,51,-15,4,11,-15,29,-20,-26,-22,22,-42,-102,-12,34,15,-118,-23,8,11,7,-19,2,10,-19,38,-4,1,-40,27,27,31,-18,-8,18,-4,1,6,-2,-44, 
  /* [0][1][][] */ -40,91,-16,43,-75,-22,-11,-36,33,93,-53,-17,-34,-29,-3,75,127,-39,-100,-16,65,-127,-21,12,-33,-44,-127,3,57,38,-50,27,-118,-84,-71,6,63,5,-48,40,-20,87,0,-4,34,-52,-12,-33,127,50,-7,20,46,10,-38,-21,29,16,-118,127,-39,-93,29,127,-59,-30,-88,121,-29,127,-19,91,-47,-31,46,8,-44,-68,127,59,127,39,24,9,127,27,-98,45,-41,-34,-108,41,89,99,27,-56, 127,127,127,127,-37,-127,127,30,127,-127,25,-127,-107,127,127,127,-19,-127,-32,-127,127,25,-53,127,127,127,-54,-127,127,127,-127,127,-12,-127,-123,127,-127,-47,113,113,-127,-127,127,127,127,-117,-106,127,-16,127,-127,-127,-127,127,127,-127,127,-127,-34,36,-101,-31,-52,-70,127,127,-59,127,127,-114,-123,127,-50,127,-127,-127,-127,127,-76,127,-35,127,102,127,-39,-127,-27,-100,-127,-120,-25,-127,-24,-127,-127,124, -26,85,-34,10,127,76,-19,46,13,25,-17,-5,-26,-30,-10,13,-96,-23,-127,35,46,82,-5,-124,-31,-49,120,74,37,50,71,17,117,-54,127,0,55,19,-67,10,31,20,-13,-1,-23,-53,-13,-46,85,21,-15,41,-5,-5,-71,-15,24,23,127,-94,-1,127,14,-33,-106,-23,-86,107,14,-20,127,43,-24,-39,35,44,-35,-9,-49,2,-39,10,82,29,-88,34,127,-41,30,-17,127,-10,-107,31,32,18, 
  /* [0][2][][] */ -17,-41,-24,-56,2,5,35,41,-4,10,-18,54,36,-40,-12,0,43,-4,-20,24,-13,27,-22,-29,-5,-30,14,12,1,6,50,-76,-29,84,-33,-29,41,-35,-97,10,19,18,-31,18,11,-70,-18,-5,-5,19,28,-8,9,0,-17,10,-6,61,-49,38,-13,-16,25,20,-1,-14,-1,-55,-52,23,-1,-4,-127,-40,-7,22,4,-11,59,29,37,25,-37,23,13,27,-18,14,9,38,21,-7,24,40,-5,-30, -29,-35,-28,23,-38,79,-22,71,-1,-2,63,-16,127,-11,-22,-35,-1,-36,-80,20,-17,77,-44,-114,-45,-58,104,76,5,53,52,-5,-127,77,3,-24,-24,-28,-127,-5,48,-3,-9,30,-26,-37,-17,-48,-57,44,64,20,-6,-78,43,60,16,35,83,-53,14,-67,10,2,24,-27,-127,-55,-8,-28,-48,20,23,-37,-37,-9,-49,26,-56,1,47,41,15,1,5,53,-97,127,20,127,-32,-16,109,-22,49,85, -20,-46,-25,29,18,69,-46,17,2,0,-3,4,24,-51,-12,-14,-41,-4,-14,19,-16,9,-26,-5,-4,8,-4,59,4,8,35,42,-3,59,25,-25,1,-22,-47,11,21,-8,25,10,-78,-14,-17,2,0,-5,4,-1,-5,9,-11,-1,0,-50,48,-29,-31,39,22,-25,-7,-4,7,-53,41,8,84,-20,20,-60,-8,27,3,15,-15,15,-27,37,96,-17,-21,52,40,1,115,21,12,-19,15,-24,-6,-57, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.011219758540391922, 0.0031940648332238197, 0.011398292146623135, 0.0010452420683577657, 0.0072027561254799366, 0.0072671440429985523, 0.016478564590215683, 0.0039045070298016071, 0.0058286581188440323, 0.021214187145233154, 0.0080185681581497192, 0.015606713481247425, 0.0043356260284781456, 0.01921556331217289, 0.006055483128875494, 0.0058263815008103848, 0.0062977485358715057, 0.011670521460473537, 0.0027961558662354946, 0.010314996354281902, 0.0018871630309149623, 0.0087324809283018112, 0.0051854760386049747, 0.013470913283526897, 0.011841327883303165, 0.0093537112697958946, 0.0082095693796873093, 0.0077670621685683727, 0.0042618680745363235, 0.0059775104746222496, 0.0058408891782164574, 0.0076417494565248489, 0.0053900131024420261, 0.0052351946942508221, 0.012710940092802048, 0.0053035863675177097, 0.018104268237948418, 0.0051863337866961956, 0.0021546217612922192, 0.011173334904015064, 0.010416723787784576, 0.016750730574131012, 0.015114603564143181, 0.0068211606703698635, 0.0065528582781553268, 0.0022134266328066587, 0.009412858635187149, 0.0042149093933403492, 0.0042632101103663445, 0.0054565784521400928, 0.0070066279731690884, 0.0042366865091025829, 0.011007210239768028, 0.011856760829687119, 0.013727584853768349, 0.024634787812829018, 0.0091029824689030647, 0.013413736596703529, 0.0057762358337640762, 0.0032390216365456581, 0.02013126015663147, 0.0074856779538094997, 0.008045366033911705, 0.0067839985713362694, 0.010653826408088207, 0.014428718946874142, 0.0033937022089958191, 0.0039455955848097801, 0.018597990274429321, 0.010297069326043129, 0.012423017062246799, 0.003134863218292594, 0.0038513485342264175, 0.0078090871684253216, 0.0094062313437461853, 0.013692530803382397, 0.024055013433098793, 0.0026140597183257341, 0.01225487794727087, 0.0043871514499187469, 0.0094869788736104965, 0.0060364953242242336, 0.0046412255614995956, 0.0048509924672544003, 0.0071622743271291256, 0.004319414496421814, 0.0060342699289321899, 0.009371650405228138, 0.0098973475396633148, 0.0068092173896729946, 0.0076864128932356834, 0.0057230331003665924, 0.0063896588981151581, 0.023287909105420113, 1.1920058727264404, 0.0036624516360461712, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 12948, 1130, 5066, -659, 5538, 3430, 18309, 10128, -1225, 12785, 6439, 1897, 11168, 29356, 16, -2498, 9045, 12818, 2824, -391, -553, 12969, 4939, 5584, 8541, 7563, 9184, 2934, -117, -539, 12936, 12119, 8241, 3262, 13720, -519, 17823, 11882, 1638, 9191, 1071, 15495, 12150, 4947, 3289, 13213, 13202, 6400, 5823, 3356, 1228, -614, 15676, 5567, 8351, 18802, -76, 12953, 1831, 2654, 26599, 7780, 2762, 8518, 3868, 6510, 4905, -769, 27268, 7860, 7891, -1135, -1854, 3426, 3895, 3893, 21018, 17688, 17291, -2177, 4266, -6812, -2947, 306, 3836, 5520, 6133, 4631, 8979, 3926, 6629, 4144, 11924, 40735, -13621, 15947, };
const TfArray<96, float> quant18_scale = { 96, { 0.00020468924776650965, 0.00038198946276679635, 0.00024880576529540122, 0.00081472576130181551, 0.00027508032508194447, 0.0002778150956146419, 0.00017333672440145165, 0.00035169057082384825, 0.00029798128525726497, 0.00013220928667578846, 0.00021368512534536421, 0.00036334621836431324, 0.00027679899358190596, 0.00016743908054195344, 0.00039663352072238922, 0.00025724142324179411, 0.00023864847025834024, 0.00018665504467207938, 0.00024401860719081014, 0.00038084422703832388, 0.00061055057449266315, 0.00019217793305870146, 0.00031278101960197091, 0.00013304670574143529, 0.00020724341447930783, 0.00028289321926422417, 0.00015384433208964765, 0.00026697307475842535, 0.00071424333145841956, 0.00044267371413297951, 0.00010594243212835863, 0.00015526737843174487, 0.00021560542518272996, 0.00031629373552277684, 0.0001370781974401325, 0.00059630203759297729, 0.00013096306065563112, 0.00020928056619595736, 0.0002953633083961904, 0.00012925200280733407, 0.00042211974505335093, 0.00012452602095436305, 0.00018032951629720628, 0.00015515463019255549, 0.00035914877662435174, 0.0002390030276728794, 0.00021058863785583526, 0.00021082151215523481, 0.00025750100030563772, 0.00025209467275999486, 0.00030213265563361347, 0.00094108394114300609, 0.00017613520321901888, 0.00030705836252309382, 0.00027871044585481286, 0.00011019865632988513, 0.00056807487271726131, 0.00014263097546063364, 0.0003641205548774451, 0.00063537230016663671, 6.5130232542287558e-05, 0.0001706134935375303, 0.00031754924566484988, 0.00031369022326543927, 0.00024245480017270893, 0.00018734918558038771, 0.00041669100755825639, 0.00033742169034667313, 0.00010143944382434711, 0.00014685199130326509, 0.00023797422181814909, 0.00048274139408022165, 0.00023447608691640198, 0.00039438132080249488, 0.00015421173884533346, 0.00031562769436277449, 0.00012120901374146342, 0.00025680442922748625, 0.00010014560393756256, 0.00053111434681341052, 0.00020038153161294758, 0.00030179746681824327, 0.00018458235717844218, 0.00064857682446017861, 0.00036537720006890595, 0.00026848292327485979, 0.00025809148792177439, 0.00025109003763645887, 0.00018358269880991429, 0.00036088208435103297, 0.00020191777730360627, 0.00041430036071687937, 0.00017274483980145305, 6.8125940742902458e-05, 0.00022474268916994333, 0.00020028535800520331, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 16,-22,43,127,-18,-55,44,-99,17,10,-49,-37,18,23,16,-37, 
  /* [1][0][][] */ 27,78,27,-51,127,-12,7,-24,72,56,11,46,-2,-59,126,-26, 
  /* [2][0][][] */ -2,-60,31,32,-68,71,2,39,-25,-47,-1,32,-4,-2,-7,-127, 
  /* [3][0][][] */ 53,93,-15,10,-89,-44,2,-26,-28,-11,127,-85,-84,47,-32,25, 
  /* [4][0][][] */ 1,-79,123,33,-21,127,-88,21,-28,-69,17,29,-42,-59,16,10, 
  /* [5][0][][] */ 99,-40,-26,18,-46,-45,-40,8,7,-17,-127,0,62,9,40,-4, 
  /* [6][0][][] */ -67,-74,-8,127,-13,5,-60,7,-95,-18,-102,37,38,6,36,1, 
  /* [7][0][][] */ 32,9,-105,38,73,-127,-47,3,-8,-21,-31,-24,-76,-60,-24,-44, 
  /* [8][0][][] */ 41,-64,13,13,-12,66,-118,-41,-33,-3,-98,4,-127,38,4,-5, 
  /* [9][0][][] */ 65,-127,58,76,47,48,3,-31,95,-103,31,-42,25,100,-48,62, 
  /* [10][0][][] */ -55,-94,-17,-49,99,127,-98,55,117,-87,-29,75,-18,10,-45,-34, 
  /* [11][0][][] */ -45,-20,-79,-14,-6,28,8,18,4,-127,-88,48,-25,39,-115,-27, 
  /* [12][0][][] */ 33,-41,32,76,-50,38,-2,-83,127,-55,-99,84,29,111,55,55, 
  /* [13][0][][] */ 127,29,-19,-89,46,-46,24,-91,60,-12,-26,35,-1,-22,-46,-24, 
  /* [14][0][][] */ -68,51,-71,-28,78,-127,42,-71,58,55,-30,-74,3,70,15,2, 
  /* [15][0][][] */ -98,8,114,64,75,-79,-35,39,30,2,-31,-67,-127,-121,-33,81, 
  /* [16][0][][] */ -37,127,-16,52,17,90,78,62,-34,62,63,-3,52,27,-11,-81, 
  /* [17][0][][] */ -71,10,-33,-63,-48,2,24,78,-57,127,-24,-9,-20,50,77,2, 
  /* [18][0][][] */ -10,127,-39,-20,9,-14,23,-34,62,107,-54,73,-4,-82,85,-87, 
  /* [19][0][][] */ 16,14,12,53,33,55,21,28,36,-5,-70,29,-127,3,-35,22, 
  /* [20][0][][] */ 10,-10,-41,-127,30,34,-9,-62,-12,28,-77,-97,55,8,67,-34, 
  /* [21][0][][] */ 87,93,127,52,-14,19,106,22,-38,36,34,-24,8,7,2,-74, 
  /* [22][0][][] */ 98,-45,19,11,37,37,-12,23,127,29,28,2,17,78,-22,34, 
  /* [23][0][][] */ -91,-12,-90,12,-127,-42,38,59,-109,-46,32,-51,45,30,-32,55, 
  /* [24][0][][] */ 18,-31,18,-42,18,-2,-71,7,51,-23,78,45,3,58,127,40, 
  /* [25][0][][] */ -100,-44,-71,-127,19,14,-11,-17,-100,-5,-16,26,-13,8,70,32, 
  /* [26][0][][] */ -10,-9,-33,-52,-41,-48,-67,31,-79,-26,-1,-41,-21,-124,127,74, 
  /* [27][0][][] */ -127,-4,-8,8,-1,13,1,34,-9,23,50,14,13,1,1,-11, 
  /* [28][0][][] */ -23,9,20,16,3,0,-10,84,6,3,-43,2,-127,-21,-7,44, 
  /* [29][0][][] */ -11,37,41,-9,23,-13,22,-22,-127,7,-34,-11,-32,4,-81,0, 
  /* [30][0][][] */ 74,-60,-121,-118,63,-46,-55,84,-44,-60,13,-45,-127,34,-113,25, 
  /* [31][0][][] */ 68,-56,-93,-40,62,-8,-59,34,0,-67,-123,-27,86,-54,-59,127, 
  /* [32][0][][] */ -127,52,4,-15,30,108,41,41,32,-18,59,40,-10,27,14,-3, 
  /* [33][0][][] */ 8,-92,52,-94,-12,-127,-33,-90,-88,113,-49,-34,48,-6,115,92, 
  /* [34][0][][] */ -71,-98,25,-127,-64,-95,-56,-14,-112,-79,-17,-62,7,33,6,0, 
  /* [35][0][][] */ 23,-13,29,60,32,10,6,-76,-101,23,15,11,1,127,13,-31, 
  /* [36][0][][] */ -59,-23,-20,16,23,40,36,60,-18,-53,127,54,-4,-14,85,11, 
  /* [37][0][][] */ 2,2,127,-52,-118,-73,-47,-11,64,14,56,-34,68,-61,125,71, 
  /* [38][0][][] */ -36,-127,16,85,74,-3,-114,94,-47,-58,-5,127,121,38,-24,-29, 
  /* [39][0][][] */ 23,-21,-46,-127,6,-33,42,70,28,4,47,3,-28,-1,64,53, 
  /* [40][0][][] */ 79,3,32,74,35,107,28,7,26,-24,22,39,46,-19,-127,-7, 
  /* [41][0][][] */ -108,-31,14,-127,-13,-16,-62,-10,-88,-36,47,-81,-6,-63,-28,71, 
  /* [42][0][][] */ 0,37,30,127,-43,-19,-113,12,-26,-24,11,-83,-97,42,-77,-17, 
  /* [43][0][][] */ -26,126,10,115,37,69,31,-56,-4,127,21,26,43,-17,37,33, 
  /* [44][0][][] */ 5,-23,-127,40,44,85,-23,52,-1,11,48,-79,-7,-28,-75,-16, 
  /* [45][0][][] */ -100,69,-61,-127,-58,-58,110,-77,-86,47,2,14,-26,-25,24,-73, 
  /* [46][0][][] */ 121,12,96,-36,87,73,-5,20,92,-5,-36,127,-9,90,114,-91, 
  /* [47][0][][] */ -22,-71,66,-47,1,82,-44,100,103,-10,42,57,71,-127,116,33, 
  /* [48][0][][] */ 52,-41,26,-127,-10,7,-22,59,20,-101,-12,-37,36,72,-2,100, 
  /* [49][0][][] */ -14,-8,33,127,124,32,-25,71,-59,20,14,13,-49,45,60,-18, 
  /* [50][0][][] */ -37,23,106,86,-63,102,-25,-127,11,-86,69,-50,53,0,6,-32, 
  /* [51][0][][] */ 7,100,-19,3,-40,-9,19,-16,18,33,2,127,-14,3,53,-35, 
  /* [52][0][][] */ -17,23,116,-15,34,-69,29,-47,-89,-19,13,48,-21,90,-127,-6, 
  /* [53][0][][] */ 9,-18,28,-127,-39,43,-4,8,3,12,3,-8,27,37,-15,62, 
  /* [54][0][][] */ 18,3,-5,-40,-37,42,-44,5,7,-39,-7,38,26,127,60,-3, 
  /* [55][0][][] */ -59,-2,-29,20,-24,-22,-38,-93,-16,8,-24,11,-5,-60,13,-127, 
  /* [56][0][][] */ 29,36,36,16,-6,-6,6,127,4,-49,8,-30,57,15,-41,50, 
  /* [57][0][][] */ 88,-90,127,76,-85,-8,-17,-104,-15,-34,-87,-75,53,44,12,-20, 
  /* [58][0][][] */ 53,46,72,127,-66,-15,-8,-26,3,-20,113,-15,-44,12,-41,-99, 
  /* [59][0][][] */ 83,-29,-15,7,-6,-44,-76,7,-7,46,-127,-22,-8,-16,36,-2, 
  /* [60][0][][] */ -39,38,-74,-58,9,-28,13,127,-68,-27,71,41,-60,-4,98,-17, 
  /* [61][0][][] */ -127,92,55,44,-65,52,-111,-65,54,-65,107,-66,79,-6,-35,-110, 
  /* [62][0][][] */ 67,-30,-77,91,46,89,-29,31,-120,-127,26,13,-43,-52,-56,29, 
  /* [63][0][][] */ -79,-7,127,-1,20,13,25,-46,-2,41,-61,75,7,3,43,-18, 
  /* [64][0][][] */ -12,-4,-23,-15,77,36,85,-127,85,63,20,79,-40,-27,26,-14, 
  /* [65][0][][] */ 44,19,-44,-23,52,-30,-26,-47,-37,-127,-9,-79,-50,-37,63,42, 
  /* [66][0][][] */ -127,-40,14,36,-17,36,4,-31,-57,-27,-32,-3,5,10,12,69, 
  /* [67][0][][] */ 44,36,61,37,104,52,-21,67,127,51,-26,15,31,-10,-59,-9, 
  /* [68][0][][] */ 23,41,-21,127,-44,-47,-70,-86,-25,54,6,-60,-31,-32,-32,-102, 
  /* [69][0][][] */ 85,35,-22,127,38,-67,5,-114,91,112,85,35,-23,-55,43,44, 
  /* [70][0][][] */ 8,-35,68,-3,68,49,-4,15,127,4,40,-9,-31,75,-19,60, 
  /* [71][0][][] */ -63,69,37,90,37,-127,-41,80,17,-74,36,59,1,-15,-24,44, 
  /* [72][0][][] */ -100,6,-35,34,-37,2,-35,-54,-8,-60,-127,60,63,23,19,87, 
  /* [73][0][][] */ 0,-1,17,127,-28,13,11,1,11,-10,-45,27,67,48,-11,-36, 
  /* [74][0][][] */ 4,51,-54,-61,-2,39,63,-34,22,-76,-92,-17,-127,11,103,43, 
  /* [75][0][][] */ -10,-9,-16,127,16,31,4,-64,-3,17,-3,18,3,9,-28,-16, 
  /* [76][0][][] */ 45,6,-16,30,12,3,-10,-19,-10,-127,-15,-6,-7,-14,-24,-25, 
  /* [77][0][][] */ 127,9,78,89,-30,-27,-15,-15,118,78,-8,65,100,-29,30,91, 
  /* [78][0][][] */ 17,-35,36,-22,-48,42,-2,115,-12,-68,14,-79,40,127,1,45, 
  /* [79][0][][] */ 0,44,42,27,-3,46,-56,-49,14,-42,72,25,127,-13,-22,-40, 
  /* [80][0][][] */ -109,-66,-44,127,43,118,79,-10,-43,-38,-105,-32,85,-26,-46,52, 
  /* [81][0][][] */ 70,-11,-88,66,127,-15,51,-15,62,-48,-115,-60,26,-15,-96,27, 
  /* [82][0][][] */ 124,127,35,59,-114,29,-106,-34,-39,0,70,-37,-97,70,32,-72, 
  /* [83][0][][] */ 127,29,0,-15,-7,1,-5,15,16,-16,56,-37,-44,1,-31,-60, 
  /* [84][0][][] */ -51,6,-127,-11,6,-29,25,-32,-49,-46,-13,2,20,-22,-19,-34, 
  /* [85][0][][] */ 8,-3,-85,-71,16,0,75,127,15,74,-2,-111,9,38,45,-28, 
  /* [86][0][][] */ 127,-23,-28,-20,-55,-10,-49,10,6,-7,-118,-4,18,39,-72,21, 
  /* [87][0][][] */ -93,92,35,-54,3,20,-127,99,-15,-71,-44,-8,-14,-103,119,-50, 
  /* [88][0][][] */ 22,-94,-115,-47,3,-39,7,-127,5,40,-74,52,-11,17,120,-59, 
  /* [89][0][][] */ 10,4,12,-86,29,23,-28,33,-5,-127,30,-13,-5,19,-4,49, 
  /* [90][0][][] */ 57,23,-127,74,70,-29,77,-29,103,16,-42,62,3,1,10,67, 
  /* [91][0][][] */ 19,-18,-48,-35,0,-127,-47,11,-17,-27,-29,4,9,25,5,43, 
  /* [92][0][][] */ 49,24,88,96,127,41,56,-6,-1,6,3,36,12,80,-24,55, 
  /* [93][0][][] */ 127,-60,-90,-91,-125,-116,4,87,-92,2,-46,-12,44,25,72,96, 
  /* [94][0][][] */ -13,-23,107,96,91,75,-50,86,6,-35,-32,38,-8,97,-49,-127, 
  /* [95][0][][] */ -127,22,67,39,15,37,-16,31,50,4,111,18,-9,111,-51,3, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.00064291153103113174, 0.0011997964465990663, 0.00078147777821868658, 0.0025589843280613422, 0.00086400390136986971, 0.00087259354768320918, 0.00054443592671304941, 0.0011046301806345582, 0.00093593390192836523, 0.00041525813867338002, 0.00067116681020706892, 0.001141239539720118, 0.00086940213805064559, 0.00052591192070394754, 0.0012457921402528882, 0.00080797343980520964, 0.00074957456672564149, 0.00058626761892810464, 0.00076644169166684151, 0.0011961993295699358, 0.0019176873611286283, 0.00060361454961821437, 0.0009824185399338603, 0.00041788839735090733, 0.00065093394368886948, 0.00088854355271905661, 0.00048321197391487658, 0.0008385396795347333, 0.0022433775011450052, 0.0013904004590585828, 0.00033275617170147598, 0.00048768162378109992, 0.00067719828803092241, 0.00099345168564468622, 0.00043055095011368394, 0.0018729339353740215, 0.00041134384809993207, 0.00065733247902244329, 0.00092771102208644152, 0.00040596953476779163, 0.0013258422259241343, 0.00039112562080845237, 0.00056639965623617172, 0.00048732751747593284, 0.0011280557373538613, 0.00075068819569423795, 0.00066144100856035948, 0.00066217244602739811, 0.00080878869630396366, 0.00079180789180099964, 0.00094897294184193015, 0.0029558646492660046, 0.00055322569096460938, 0.00096444418886676431, 0.00087540579261258245, 0.00034612460876815021, 0.0017842748202383518, 0.00044799174065701663, 0.0011436716886237264, 0.001995650352910161, 0.00020456851052585989, 0.00053588248556479812, 0.00099739513825625181, 0.00098527432419359684, 0.00076152989640831947, 0.00058844784507527947, 0.0013087909901514649, 0.0010598128428682685, 0.00031861267052590847, 0.00046124961227178574, 0.0007474567973986268, 0.0015162496129050851, 0.00073646946111693978, 0.0012387181632220745, 0.00048436594079248607, 0.0009913597023114562, 0.00038070720620453358, 0.00080660084495320916, 0.00031454881536774337, 0.0016681849956512451, 0.00062938133487477899, 0.00094792019808664918, 0.0005797574995085597, 0.0020371247082948685, 0.0011476187501102686, 0.00084328203229233623, 0.00081064336700364947, 0.00078865245450288057, 0.00057661766186356544, 0.0011334998998790979, 0.00063420657534152269, 0.0013012822018936276, 0.00054257683223113418, 0.0002139777789125219, 0.00070589769165962934, 0.000629079295322299, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -22125, -320, -7960, -12354, 1486, -14989, 1155, -20436, 4311, 14835, 44102, -3800, -16781, -18307, 39891, -3425, };
const TfArray<16, float> quant20_scale = { 16, { 0.00064481474692001939, 0.00082609592936933041, 0.00083948369137942791, 0.0009656115435063839, 0.00075279118027538061, 0.00091821572277694941, 0.0010479610646143556, 0.00049482943722978234, 0.00067281740484759212, 0.00057048472808673978, 0.00070879986742511392, 0.00058115704450756311, 0.00077818206045776606, 0.0014340415364131331, 0.00034757200046442449, 0.00037138344487175345, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 3,-2,-18,-8,18,-18,10,80,-49,7,2,-18,29,-15,-12,-3,11,-13,-4,23,81,13,22,127,-18,63,-21,-19,23,-25,28,-48,-38,35,17,-41,13,46,6,12,-68,-37,44,56,55,-3,-104,-71, 
  /* [1][0][][] */ -33,-29,14,22,-16,2,1,53,-73,-44,-5,-43,-20,-28,21,-18,-18,89,-9,4,25,-4,-15,-9,20,-41,-9,20,-14,-93,-35,32,-28,-12,39,-7,1,-34,7,15,-11,-22,127,18,-8,10,22,-20, 
  /* [2][0][][] */ -29,-4,-32,-40,1,-69,-7,-11,8,30,32,37,4,12,-25,7,7,-15,-19,-17,0,-11,13,-127,-18,76,12,10,16,-20,29,9,-13,63,14,-7,31,9,37,6,-67,16,-7,-14,2,-4,18,-2, 
  /* [3][0][][] */ -16,53,8,-30,5,6,7,11,-23,2,4,30,-127,20,12,0,3,11,-11,-13,-40,0,8,9,-17,-16,10,31,15,9,14,-11,8,12,11,16,-2,25,52,8,9,-5,20,-26,5,-5,14,-4, 
  /* [4][0][][] */ 24,-28,-15,11,7,27,0,-10,-23,-4,-4,-12,10,16,-7,1,5,-9,-68,-4,-7,17,-7,62,-15,-22,-1,44,13,-63,10,4,25,-33,20,-127,5,15,2,2,-11,26,10,-23,-21,-33,1,1, 
  /* [5][0][][] */ 37,26,-30,57,-19,2,5,38,17,17,53,17,0,76,-8,-3,-21,23,37,19,15,-26,2,-29,8,-42,41,-16,8,-10,-18,0,67,-127,-10,27,-22,6,21,-4,-99,60,28,-10,34,9,-113,7, 
  /* [6][0][][] */ 41,-8,32,5,-34,-5,13,-12,-10,-13,-16,4,-16,-14,8,17,-18,-41,127,15,8,-8,8,-30,25,-6,25,-15,-20,-11,-17,-24,-7,-16,31,-43,-22,-29,62,-2,12,-18,-23,18,-11,-4,13,0, 
  /* [7][0][][] */ -25,-3,-31,14,-12,82,-3,40,22,40,-10,127,120,-4,-1,3,-16,-30,-15,-14,-39,-16,-24,72,8,-26,-81,-40,-10,-52,0,-14,-31,11,-48,3,-30,-67,86,-52,24,27,-62,-63,37,-20,-39,44, 
  /* [8][0][][] */ -31,-23,-2,-2,6,-5,-2,27,13,-67,-22,36,59,39,16,-15,-3,71,-10,13,-36,34,-1,2,33,8,14,33,0,109,-3,12,0,12,-11,-121,-115,68,19,59,25,-18,127,-12,9,-9,23,8, 
  /* [9][0][][] */ -32,-6,-13,46,-17,-24,-4,3,80,-24,23,83,-64,15,29,13,3,17,-43,-26,37,47,-30,-25,0,4,29,-9,9,32,-11,13,-13,30,73,-127,9,-110,-96,7,-31,21,41,3,-8,-2,-2,-55, 
  /* [10][0][][] */ -9,-19,-21,-127,63,86,25,-25,7,47,38,41,56,-50,-23,37,36,-35,44,1,30,-23,38,55,-36,-105,11,-42,55,26,60,-66,-54,-61,25,3,1,-56,-11,-47,-30,-79,-25,15,32,28,25,-49, 
  /* [11][0][][] */ 26,100,-17,53,14,-71,-71,-40,13,48,1,-13,4,84,34,-41,34,67,27,-26,-28,-100,34,7,30,-30,44,-20,26,-48,29,-63,52,2,-39,-99,82,42,-4,-104,-3,38,127,-57,38,-56,35,39, 
  /* [12][0][][] */ 127,-9,-15,16,12,31,9,94,41,-1,-32,10,-7,24,-1,10,10,14,7,10,15,-4,15,10,-6,14,18,7,14,28,-10,-12,-4,-59,-17,34,-5,4,-31,12,-27,-71,4,-112,-57,6,95,8, 
  /* [13][0][][] */ 15,2,6,5,8,-11,-5,-1,2,-1,-7,17,1,0,1,-2,17,13,20,-7,23,-10,19,0,7,-1,19,127,16,-9,5,-10,-1,1,-57,25,8,-3,3,-14,-8,-6,3,6,9,-5,-20,-19, 
  /* [14][0][][] */ 66,-53,53,-33,86,23,64,-114,-53,-66,-15,127,-42,-18,37,39,76,38,-49,87,19,66,76,-6,28,58,-70,-125,59,-41,72,43,18,62,-116,-35,-38,38,73,43,-34,1,53,7,-35,-23,44,-72, 
  /* [15][0][][] */ 37,-113,-43,-61,58,16,67,-82,-31,-14,-25,-37,99,-17,-97,86,35,21,29,-51,-109,-29,33,10,-87,0,-5,41,56,14,7,-87,1,33,88,104,-58,-127,-38,-45,121,82,98,-46,-19,-45,13,43, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.027404626831412315, 0.035109076648950577, 0.035678055137395859, 0.041038490831851959, 0.031993623822927475, 0.039024166762828827, 0.044538345187902451, 0.021030250936746597, 0.028594739735126495, 0.024245599284768105, 0.030123993754386902, 0.024699173867702484, 0.033072736114263535, 0.060946762561798096, 0.014771809801459312, 0.015783796086907387, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 8712, 51313, -1500, 59467, 3472, 143765, -3645, 52474, 5350, 31623, 24004, 8306, 14893, 33994, -715, -3708, 169, 3275, 4065, 674, -474, -4997, 3045, -11091, -6909, 54160, 156030, 113764, 173, 8057, -2431, 1151, 22549, 5131, 60033, 5, 89421, 4096, 34180, 5468, 2576, 59427, 488, 5563, 46536, 1121, 359, 67497, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.9028865507571027e-05, 2.8939062758581713e-05, 0.00017663708422333002, 4.1981551476055756e-05, 0.00016272182983811945, 5.6376404245384037e-05, 0.00014599318092223257, 0.00011077219096478075, 6.2769089709036052e-05, 3.7795187381561846e-05, 4.0005201299209148e-05, 6.3481333199888468e-05, 2.7420492187957279e-05, 5.1770628488156945e-05, 0.00017264197231270373, 0.00014020568050909787, 0.00020038694492541254, 7.3453622462693602e-05, 9.1969763161614537e-05, 0.00013918083277530968, 8.1015750765800476e-05, 0.00021537352586165071, 0.00011152594379382208, 8.5601925093214959e-05, 8.1957863585557789e-05, 7.569450099254027e-05, 2.7938393031945452e-05, 6.0704478528350592e-05, 0.00017225249030161649, 7.0368369051720947e-05, 0.00013081762881483883, 0.00017351766291540116, 4.3302359699737281e-05, 6.6976441303268075e-05, 2.1627200112561695e-05, 4.7033328883117065e-05, 6.4482461311854422e-05, 7.3410461482126266e-05, 0.00015458543202839792, 7.670734339626506e-05, 8.3452287071850151e-05, 9.4503535365220159e-05, 7.3694383900146931e-05, 6.225484685273841e-05, 2.7096006306237541e-05, 0.00018836668459698558, 0.00010560437658568844, 2.388237408013083e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-105,110,67,53,-37,110,-78,78,-98,-65,56,54,-58,-79,-103,102,71,53,79,80,-75,-93,57,-28,-41,-77,-76,-67,70,-59,-116,-20,44,69,81,-71,54,-56,-21,56,-66,61,68,-99,13,82,-50, 80,-96,127,81,-77,-70,-56,-96,115,-100,-49,85,80,-109,-102,103,-42,86,86,127,92,-111,52,70,-48,-78,-74,-89,60,94,-27,-127,-71,78,81,97,-83,81,-87,-13,77,-95,84,95,-82,-127,92,-105, 35,-58,77,33,25,-43,-49,-45,51,-38,10,45,34,-81,-55,0,-53,40,43,70,49,-51,27,30,-30,-40,-57,-27,39,43,102,-89,-91,45,38,39,-34,38,-43,-10,46,-50,46,56,-6,-12,36,-94, 
  /* [0][1][][] */ 96,-122,-42,91,52,-81,127,-99,86,-127,-66,84,93,-94,-10,-127,127,111,76,-41,92,104,-127,70,74,-82,-109,-103,-127,84,-69,-15,-87,72,108,99,-92,82,-85,86,78,-97,90,99,-87,105,94,-107, 127,-127,-61,127,-127,-127,-82,-127,127,-127,-127,127,127,-127,-20,112,-67,127,127,-45,127,127,62,127,127,-127,-127,-127,54,127,-37,10,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-15,127,-127, 67,-83,-40,67,36,-64,-41,-64,52,-66,-56,58,61,-55,-13,13,-62,57,67,-28,65,65,46,65,68,-63,-77,-42,39,58,127,14,-59,73,51,53,-60,66,-59,53,69,-70,62,66,-53,-69,60,-64, 
  /* [0][2][][] */ 54,-74,-53,47,24,-64,74,-56,52,-97,-9,52,75,-76,85,-81,64,52,42,-48,30,-5,-72,24,-30,-51,-74,-58,-74,40,-49,93,-72,41,64,51,-33,48,-49,-91,50,-61,63,58,-20,21,43,-101, 84,-71,-57,76,-60,-74,-64,-87,63,-99,-67,75,88,-52,127,41,-53,60,73,-58,66,-10,41,62,-43,-70,-101,-68,33,71,-37,113,-58,68,70,65,-54,68,-69,-110,73,-73,81,75,-73,46,69,-59, 52,-53,-33,47,31,-29,-23,-48,27,-46,-50,41,49,-8,70,27,-35,28,36,-42,38,9,37,35,-28,-32,-57,-25,38,46,57,67,-12,41,25,22,-35,43,-27,-61,33,-45,40,42,-61,6,36,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0025087266694754362, 0.0012299101799726486, 0.007507076021283865, 0.0017842159140855074, 0.0069156773388385773, 0.0023959970567375422, 0.0062047098763287067, 0.0047078179195523262, 0.002667686203494668, 0.0016062954673543572, 0.0017002209788188338, 0.0026979565154761076, 0.0011653709225356579, 0.0022002516780048609, 0.0073372838087379932, 0.0059587415307760239, 0.0085164448246359825, 0.0031217788346111774, 0.0039087147451937199, 0.0059151849709451199, 0.0034431694075465202, 0.009153374470770359, 0.0047398526221513748, 0.003638081718236208, 0.0034832090605050325, 0.0032170161139219999, 0.0011873816838487983, 0.0025799402501434088, 0.007320730946958065, 0.0029906556010246277, 0.0055597489699721336, 0.0073745003901422024, 0.0018403502181172371, 0.002846498740836978, 0.00091915600933134556, 0.0019989165011793375, 0.002740504452958703, 0.0031199445948004723, 0.0065698805265128613, 0.003260062076151371, 0.003546722000464797, 0.0040164003148674965, 0.0031320112757384777, 0.0026458310894668102, 0.0011515802470967174, 0.0080055836588144302, 0.0044881859794259071, 0.0010150008602067828, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 69, 485, 3508, 341, 5812, 17843, 1852, -253, -858, -641, 931, 1034, 1698, 758, 14234, 1700, 2130, -1323, -290, 3125, -903, 8010, 7737, 6773, 3884, -155, 5748, 3706, 5571, -301, 9512, 4106, 292, -150, 4160, 2900, -850, 250, -1239, 3415, 589, -762, -540, 491, 716, 3812, 1365, 578, };
const TfArray<48, float> quant24_scale = { 48, { 0.00055673462338745594, 0.0015327651053667068, 0.0002053768839687109, 0.00047692083171568811, 0.00036811752943322062, 0.00023650108778383583, 0.0006024265312589705, 0.00040672000613994896, 0.00033862676355056465, 0.0010553516913205385, 0.0010885901283472776, 0.00040339279803447425, 0.00066387897823005915, 0.0009934217669069767, 0.00025519868358969688, 0.00069895968772470951, 0.00029113233904354274, 0.00041148727177642286, 0.00031954480800777674, 0.00030310009606182575, 0.00052805000450462103, 0.00031858435249887407, 0.00047070783330127597, 0.00021692430891562253, 0.00041982997208833694, 0.00041131532634608448, 0.0012182343052700162, 0.00050842436030507088, 0.00033481826540082693, 0.00060719565954059362, 0.00029352909768931568, 0.000282403634628281, 0.00088635872816666961, 0.0003762445121537894, 0.00092621281510218978, 0.00066722161136567593, 0.0014316029846668243, 0.00049420399591326714, 0.00031021164613775909, 0.00048710062401369214, 0.00028758923872373998, 0.00029644064488820732, 0.00046903383918106556, 0.00037590856663882732, 0.0023682124447077513, 0.00037613912718370557, 0.00028735006344504654, 0.0018339398084208369, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,8,1,70,-17,34,28,-22, 
  /* [1][0][][] */ 23,12,67,-5,17,-45,78,127, 
  /* [2][0][][] */ -55,74,36,20,-127,-49,42,-23, 
  /* [3][0][][] */ 83,29,-17,-127,-114,-16,63,3, 
  /* [4][0][][] */ -73,24,2,-11,71,-70,127,31, 
  /* [5][0][][] */ -110,-16,-7,-2,-127,33,-7,87, 
  /* [6][0][][] */ -3,-127,58,-26,25,18,-23,31, 
  /* [7][0][][] */ -76,-7,2,63,127,-40,-27,17, 
  /* [8][0][][] */ 127,40,-15,-120,-7,-33,-79,-99, 
  /* [9][0][][] */ 28,-127,18,-21,16,93,-88,44, 
  /* [10][0][][] */ -94,-32,-10,7,-127,95,53,-8, 
  /* [11][0][][] */ 127,-17,30,8,-59,-68,-31,-127, 
  /* [12][0][][] */ -6,1,69,4,11,-78,127,37, 
  /* [13][0][][] */ 40,7,-27,-34,127,113,104,-38, 
  /* [14][0][][] */ 127,2,-36,-11,-64,-32,-30,-4, 
  /* [15][0][][] */ -8,-127,18,-24,57,3,-10,30, 
  /* [16][0][][] */ -27,-13,26,-19,-127,16,38,-11, 
  /* [17][0][][] */ -1,127,-116,-10,48,-114,88,-77, 
  /* [18][0][][] */ 127,-84,-75,-2,0,54,21,100, 
  /* [19][0][][] */ 127,-41,-34,38,23,-48,58,21, 
  /* [20][0][][] */ 127,37,-7,126,15,45,-15,-58, 
  /* [21][0][][] */ 55,79,-39,23,-6,95,-127,-71, 
  /* [22][0][][] */ -127,47,22,-18,-66,-15,-40,-34, 
  /* [23][0][][] */ -76,-59,31,17,-127,51,112,-3, 
  /* [24][0][][] */ 127,-27,-57,-13,-61,-7,34,26, 
  /* [25][0][][] */ 34,-12,-2,-9,127,30,82,-24, 
  /* [26][0][][] */ -8,-103,76,-37,-18,-117,127,-111, 
  /* [27][0][][] */ -16,-127,27,-19,4,-52,25,-8, 
  /* [28][0][][] */ -40,12,17,-1,18,-22,127,62, 
  /* [29][0][][] */ -15,45,-20,-9,-15,24,-127,-125, 
  /* [30][0][][] */ 93,-24,-41,-5,-83,20,-127,-118, 
  /* [31][0][][] */ -29,-33,3,-26,-16,-111,127,66, 
  /* [32][0][][] */ -79,22,51,-31,-115,-127,-76,55, 
  /* [33][0][][] */ -35,13,3,11,-127,-63,-50,36, 
  /* [34][0][][] */ 29,-119,66,-36,28,127,-87,43, 
  /* [35][0][][] */ -26,-50,-127,-6,5,-64,38,-58, 
  /* [36][0][][] */ 0,127,31,15,-1,18,-12,-10, 
  /* [37][0][][] */ -127,30,-1,-8,77,-32,-21,-118, 
  /* [38][0][][] */ -127,-28,-42,-2,35,19,11,82, 
  /* [39][0][][] */ 32,-17,45,15,-27,-127,123,90, 
  /* [40][0][][] */ -29,-16,-17,-44,-105,127,121,-26, 
  /* [41][0][][] */ -127,37,3,-76,-63,-87,-100,41, 
  /* [42][0][][] */ -46,-127,-101,22,7,50,-107,-109, 
  /* [43][0][][] */ -103,-6,-11,-127,112,102,119,27, 
  /* [44][0][][] */ 127,-10,-1,-54,65,-67,-23,46, 
  /* [45][0][][] */ 8,-127,-23,12,49,-115,87,19, 
  /* [46][0][][] */ 105,-19,-1,-31,127,-54,-28,-1, 
  /* [47][0][][] */ 127,26,-7,76,0,26,14,-43, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00074970000423491001, 0.0020640247967094183, 0.00027656095335260034, 0.00064222258515655994, 0.00049570784904062748, 0.00031847285572439432, 0.00081122881965711713, 0.00054769002599641681, 0.0004559954977594316, 0.0014211388770490885, 0.0014658977743238211, 0.00054320960771292448, 0.00089398084674030542, 0.0013377438299357891, 0.00034365110332146287, 0.00094122055452316999, 0.00039203942287713289, 0.0005541096325032413, 0.00043029972584918141, 0.00040815523243509233, 0.00071107328403741121, 0.00042900635162368417, 0.00063385616522282362, 0.00029211072251200676, 0.00056534394389018416, 0.00055387808242812753, 0.0016404768684878945, 0.00068464531796053052, 0.00045086696627549827, 0.0008176509290933609, 0.00039526689215563238, 0.00038028531707823277, 0.0011935725342482328, 0.00050665164599195123, 0.0012472401140257716, 0.00089848204515874386, 0.0019277996616438031, 0.00066549616167321801, 0.00041773164412006736, 0.00065593072213232517, 0.00038726828643120825, 0.0003991875855717808, 0.00063160195713862777, 0.00050619925605133176, 0.0031890398822724819, 0.00050650973571464419, 0.00038694619433954358, 0.0024695871397852898, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -48577, 50306, -12563, -5118, -1068, 9207, 3939, 60647, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0005287193926051259, 0.00057157262926921248, 0.0013566705165430903, 0.0014712001429870725, 0.00079598638694733381, 0.00040756762609817088, 0.00071720685809850693, 0.00089823990128934383, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -33,-14,-12,4,-4,13,-12,33,-77,109,-40,61,127,8,101,-1,-5,-36,6,6,-6,-10,-34,-63,-1,-77,19,33,5,18,3,-35,-9,-51,80,45,15,46,-13,-15,101,3,27,-33,-11,-75,-11,-16, 
  /* [1][0][][] */ -3,48,118,18,4,-49,24,-99,71,-12,27,23,-18,34,-6,-127,49,-114,29,2,-28,75,22,-28,-18,-15,19,10,8,-32,23,2,1,14,31,-29,-44,-62,111,-90,-18,25,-6,15,-10,-46,70,1, 
  /* [2][0][][] */ 4,-62,24,-47,43,43,-16,-27,-26,7,-8,2,0,62,22,0,-65,123,-27,-41,-11,27,-48,-5,127,23,-7,-10,-21,-28,-7,-45,-35,-2,6,21,14,-8,-14,-13,9,-26,-41,-11,5,44,-4,-46, 
  /* [3][0][][] */ 5,-64,6,5,-5,-22,-23,35,-9,-10,5,21,0,-13,32,20,-1,-27,-24,-11,-12,11,-18,6,22,51,-13,12,9,27,127,-6,20,-22,-4,-30,-32,-14,9,-5,8,8,-15,23,-29,-1,9,9, 
  /* [4][0][][] */ -120,5,-8,-5,8,-42,3,36,7,-6,15,-12,-31,12,-22,-7,22,48,37,16,-25,-38,-5,-10,-18,34,22,93,12,13,-11,-51,13,-127,-69,37,13,-3,-13,7,-55,11,-22,9,-47,8,1,10, 
  /* [5][0][][] */ -28,8,16,28,-1,6,10,13,43,20,-11,47,4,-41,-32,-11,46,-124,6,-11,81,-73,-33,95,22,3,-89,-20,-47,-43,43,-17,4,-124,35,-58,33,-60,-53,-4,18,-46,31,-21,127,-31,-8,22, 
  /* [6][0][][] */ -13,-40,-10,-12,65,-25,-3,-30,-5,24,43,30,-15,72,28,-75,-36,36,-23,-31,-5,27,9,-83,-2,-15,-41,-51,-7,-3,-4,-2,-13,-65,29,50,-29,-4,2,-63,2,-19,20,54,127,-17,23,6, 
  /* [7][0][][] */ -6,30,-94,14,15,35,3,34,2,-15,51,-12,5,-25,-20,-8,3,-127,38,-76,87,21,7,-64,-1,-41,-5,38,0,13,-12,3,5,-4,5,-49,-16,-73,-29,-74,-3,-33,50,53,-62,15,12,-12, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.022470572963356972, 0.024291835725307465, 0.057658497244119644, 0.062526002526283264, 0.033829420804977417, 0.017321623861789703, 0.030481290072202682, 0.038175195455551147, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -54185, -814, 9101, -549, -233, -4307, 71, 52606, 601, 39349, -4872, 26479, -8344, -1074, 18780, 8713, 1499, 15655, 41237, 13741, -2805, -1134, -53, 14651, -8227, 23404, 48416, 39015, 3579, 1061, -2625, 1390, 1341, 12025, -5870, 14792, -13123, 15546, -23201, 90573, 19859, 25893, 9717, -4040, 11891, 905, 696, -2332, };
const TfArray<48, float> quant28_scale = { 48, { 0.00037643717951141298, 0.00025324238231405616, 0.00016782440070528537, 0.00025164330145344138, 0.00013899938494432718, 0.00012819241965189576, 0.0010506587568670511, 6.7373832280281931e-05, 0.00015128610539250076, 0.00013254169607535005, 8.3384657045826316e-05, 0.00017085240688174963, 0.00023143747239373624, 0.00019169459119439125, 0.00015759280358906835, 0.0001654217776376754, 0.00026414557942189276, 0.00028380195726640522, 5.8282075769966468e-05, 0.00024702877271920443, 0.00021345238201320171, 0.00024827310699038208, 0.00018344796262681484, 0.00011776382598327473, 0.00016520313511136919, 0.00015151620027609169, 0.0005297359311953187, 7.8567558375652879e-05, 0.00013790892262477428, 0.00069205521140247583, 0.00010387878137407824, 0.00020365360251162201, 0.00071387324715033174, 0.00018729157454799861, 0.00020217626297380775, 0.00018760978127829731, 0.00031838231370784342, 0.00015615009760949761, 0.00028180560912005603, 2.4090806618914939e-05, 0.00016333468374796212, 5.2676146879093722e-05, 0.00018399095279164612, 0.00013694247172679752, 0.00026593293296173215, 0.00015030201757326722, 0.00022082623036112636, 9.0461493527982384e-05, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 2,-7,19,108,5,80,3,26,17,5,11,4,-5,-13,-43,4,-6,7,-24,-104,-4,-22,127,-6,-5,4,-9,14,-5,5,9,98,20,29,38,-31,2,36,-1,-2,20,-66,-4,-1,18,6,-3,-7, 124,8,13,-127,31,84,15,9,127,127,12,41,-50,-28,6,6,127,-57,-59,-62,-86,26,-113,13,19,69,-35,-83,24,21,11,-127,3,-62,127,8,-41,-47,-13,102,-79,-111,-33,7,-39,-5,-127,25, -29,-2,6,16,2,66,10,15,27,4,-10,29,-13,-8,8,1,-113,28,-5,61,-25,-12,-18,-2,-3,-61,-6,28,-13,4,3,-25,6,-24,17,-18,0,46,40,-12,52,33,-15,15,-44,5,-3,5, 
  /* [0][1][][] */ 127,10,0,-98,19,-29,38,-20,14,7,-17,53,-5,-3,14,-39,2,-49,-58,-74,17,-70,-125,-8,1,102,-12,-127,-8,33,9,-114,18,-51,-6,127,0,59,-40,45,-63,-127,45,-81,-51,-11,-7,-10, 37,-127,-127,117,-127,-127,-121,-127,-125,-97,127,-127,127,127,35,-127,-86,127,127,-100,127,127,112,127,127,-127,-127,30,-127,-127,96,126,-127,127,-30,-45,127,-127,127,119,127,-86,127,127,127,-116,106,108, 57,7,47,-11,11,-63,48,14,-20,13,-105,-8,3,-41,127,-2,65,-65,-74,77,18,-44,12,-25,0,4,-36,70,22,38,8,0,32,-46,6,70,-2,62,79,-3,-83,2,-97,-29,21,-16,-8,7, 
  /* [0][2][][] */ -53,-9,25,-20,16,34,-30,19,3,-31,14,29,14,-14,-52,9,5,21,-22,101,14,-28,-15,-3,-7,30,0,57,-13,1,45,-31,-12,-41,-37,-43,3,32,10,-8,9,-4,45,-34,-43,25,-8,21, 68,126,74,19,25,-20,127,33,9,-8,39,22,2,-3,-103,18,-62,-57,-48,111,-26,50,12,25,34,-58,-40,34,73,-3,127,20,87,-24,3,-39,-23,-16,-13,127,-28,-15,-49,46,15,-26,6,-127, -38,-1,6,-3,14,-4,-55,5,-25,-16,-40,-44,28,-15,-21,4,34,23,-19,-127,28,-12,7,0,-10,9,-10,-53,-17,4,12,11,-14,88,-40,-24,0,34,27,-47,4,6,-42,12,-51,127,-5,0, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.015998579561710358, 0.010762801393866539, 0.0071325367316603661, 0.010694839991629124, 0.0059074736200273037, 0.0054481779225170612, 0.044652998447418213, 0.0028633878100663424, 0.0064296592026948929, 0.005633021704852581, 0.0035438479389995337, 0.0072612268850207329, 0.0098360925912857056, 0.0081470198929309845, 0.0066976943053305149, 0.0070304251275956631, 0.011226186528801918, 0.012061582878232002, 0.0024769881274551153, 0.010498722083866596, 0.0090717263519763947, 0.010551607236266136, 0.0077965380623936653, 0.0050049624405801296, 0.0070211328566074371, 0.0064394380897283554, 0.022513777017593384, 0.0033391211181879044, 0.0058611291460692883, 0.029412345960736275, 0.0044148480519652367, 0.0086552780121564865, 0.030339613556861877, 0.0079598920419812202, 0.0085924910381436348, 0.0079734157770872116, 0.013531248085200787, 0.006636379286646843, 0.011976738460361958, 0.0010238592512905598, 0.0069417236372828484, 0.002238736255094409, 0.0078196153044700623, 0.0058200550265610218, 0.01130214985460043, 0.0063878358341753483, 0.0093851145356893539, 0.0038446134421974421, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 38680, 6337, 7016, 8230, 1190, 14861, -2648, -17, 1052, 1996, 3149, 276, 1748, -509, 2236, -1839, 4692, 14493, -267, 46328, 3075, 3696, 8143, -381, 3748, 5375, 19009, 9235, -111, -2546, 199, 3808, -2324, 8702, 2893, 8739, 9329, 3337, 23774, 2260, -693, 2463, 2444, 2893, 9588, 2400, -1505, 2620, };
const TfArray<48, float> quant30_scale = { 48, { 0.00010934101737802848, 0.00034186471020802855, 0.00021414794900920242, 0.00041734008118510246, 0.0016522237565368414, 0.00031957647297531366, 0.00070670706918463111, 0.0013744698371738195, 0.00054107059258967638, 0.00072871713200584054, 0.00071173557080328465, 0.00042214724817313254, 0.00055653916206210852, 0.00068291608477011323, 0.00028369977371767163, 0.0019461603369563818, 0.00034287126618437469, 0.00030053799855522811, 0.0020014578476548195, 5.8996505686081946e-05, 0.00033056907705031335, 0.00027834094362333417, 0.00047950161388143897, 0.00099109753500670195, 0.00034117628820240498, 0.00022577175695914775, 0.00021845956507604569, 0.00040135130984708667, 0.00085560203297063708, 0.0010608774609863758, 0.00064594030845910311, 0.00024141164612956345, 0.00087289727525785565, 0.00023260984744410962, 0.00035003130324184895, 0.00023150467313826084, 0.00039603913319297135, 0.00037541025085374713, 9.6833326097112149e-05, 0.0019703155849128962, 0.00075357424793764949, 0.0011022054823115468, 0.00030905113089829683, 0.00048516909009777009, 0.00014383632515091449, 0.00043504760833457112, 0.00074284977745264769, 0.0010274563683196902, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 61,8,47,4,127,-15,-41,-3, 
  /* [1][0][][] */ -12,-7,21,127,-10,17,-12,-22, 
  /* [2][0][][] */ 89,-127,-14,59,-28,-96,99,-17, 
  /* [3][0][][] */ 127,-93,-18,11,-29,-15,26,41, 
  /* [4][0][][] */ 24,-24,127,-13,-17,-61,51,-76, 
  /* [5][0][][] */ 116,-36,22,1,127,32,-12,18, 
  /* [6][0][][] */ -15,72,48,75,46,127,-101,-102, 
  /* [7][0][][] */ -9,127,-25,-2,43,-19,32,17, 
  /* [8][0][][] */ 127,96,18,-5,-10,-58,-18,-39, 
  /* [9][0][][] */ -127,-12,-15,20,6,2,-1,4, 
  /* [10][0][][] */ -107,-31,1,127,36,47,-15,23, 
  /* [11][0][][] */ -127,46,59,-116,7,-6,-66,-29, 
  /* [12][0][][] */ 127,19,-34,16,-45,-47,31,-29, 
  /* [13][0][][] */ 13,39,-127,2,-5,102,-88,75, 
  /* [14][0][][] */ -111,-28,5,54,25,78,-113,-127, 
  /* [15][0][][] */ -21,127,5,-1,11,-18,14,-45, 
  /* [16][0][][] */ 7,-127,-27,-2,-35,-51,67,-16, 
  /* [17][0][][] */ 34,127,-3,-7,-8,73,-103,-7, 
  /* [18][0][][] */ 0,45,-127,10,-56,59,-25,57, 
  /* [19][0][][] */ -119,0,-28,18,-105,-14,61,127, 
  /* [20][0][][] */ -127,-84,8,-6,48,-19,30,23, 
  /* [21][0][][] */ -65,-56,-3,-10,-127,38,-42,-27, 
  /* [22][0][][] */ -127,-4,11,-6,123,-19,-4,32, 
  /* [23][0][][] */ -33,-62,-27,-3,-2,72,-127,-84, 
  /* [24][0][][] */ -10,65,-127,3,10,61,-10,112, 
  /* [25][0][][] */ 104,-44,59,127,18,-54,-53,-52, 
  /* [26][0][][] */ -7,-10,8,4,-8,127,106,-32, 
  /* [27][0][][] */ 46,10,2,5,127,12,-11,-7, 
  /* [28][0][][] */ -12,106,-44,20,39,127,-1,86, 
  /* [29][0][][] */ -26,5,-14,-29,13,63,-127,-48, 
  /* [30][0][][] */ 2,1,5,-127,-4,6,-1,-20, 
  /* [31][0][][] */ -119,-36,28,-8,-127,58,-16,48, 
  /* [32][0][][] */ -8,66,-15,-81,-23,3,-115,-127, 
  /* [33][0][][] */ -93,-12,-17,-1,-127,17,61,43, 
  /* [34][0][][] */ -93,127,1,6,67,15,0,-29, 
  /* [35][0][][] */ -61,127,-42,-10,-23,-26,17,-97, 
  /* [36][0][][] */ -31,29,13,-15,39,115,-127,-56, 
  /* [37][0][][] */ 57,-43,-4,5,-16,-127,91,-76, 
  /* [38][0][][] */ 42,-127,21,-105,-35,114,-115,71, 
  /* [39][0][][] */ -10,-123,-23,21,-25,11,-56,-127, 
  /* [40][0][][] */ 83,45,-4,-23,-44,101,-127,-29, 
  /* [41][0][][] */ -4,-112,29,5,6,107,-93,127, 
  /* [42][0][][] */ 54,-10,-13,-127,-68,25,-42,-65, 
  /* [43][0][][] */ -127,-70,17,-89,31,20,-46,30, 
  /* [44][0][][] */ 57,-6,48,29,9,127,14,-61, 
  /* [45][0][][] */ -127,-26,-19,1,2,-28,36,34, 
  /* [46][0][][] */ 40,65,127,16,26,3,16,25, 
  /* [47][0][][] */ 0,23,14,127,8,-21,31,-7, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.00025733732036314905, 0.00080458872253075242, 0.00050400354666635394, 0.00098222226370126009, 0.0038885576650500298, 0.00075213267700746655, 0.0016632560873404145, 0.0032348555978387594, 0.0012734256451949477, 0.0017150574130937457, 0.0016750907525420189, 0.00099353608675301075, 0.0013098313938826323, 0.0016072632279247046, 0.00066769582917913795, 0.0045803459361195564, 0.00080695765791460872, 0.00070732505992054939, 0.0047104903496801853, 0.00013885002408642322, 0.00077800411963835359, 0.00065508368425071239, 0.0011285212822258472, 0.0023325774818658829, 0.00080296851228922606, 0.00053136050701141357, 0.00051415106281638145, 0.00094459223328158259, 0.0020136847160756588, 0.0024968066718429327, 0.0015202396316453815, 0.0005681694601662457, 0.0020543895661830902, 0.00054745416855439544, 0.0008238090667873621, 0.00054485310101881623, 0.00093208986800163984, 0.00088353914907202125, 0.00022790010552853346, 0.0046371961943805218, 0.0017735593719407916, 0.0025940733030438423, 0.00072736100992187858, 0.001141859800554812, 0.0003385230666026473, 0.001023897435516119, 0.0017483190167695284, 0.0024181490298360586, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 586, -20620, 18226, 23136, -6098, -6204, 41685, 17868, };
const TfArray<8, float> quant32_scale = { 8, { 0.00080777204129844904, 0.00064354296773672104, 0.0010172539623454213, 0.0011700320756062865, 0.00092055107234045863, 0.00096601160475984216, 0.0006525777280330658, 0.00072013546014204621, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -15,-6,11,-108,11,28,3,11,-3,13,-1,-8,98,0,2,21,0,-31,-5,-7,92,-12,-5,-3,30,44,12,8,0,3,2,-127,2,-3,2,9,-39,-9,-22,20,3,-35,-11,6,-5,-4,3,12, 
  /* [1][0][][] */ -41,-10,-1,2,53,33,-25,91,28,15,-17,-19,-2,0,17,48,0,71,19,-58,-11,32,127,22,-39,8,50,-12,31,-19,29,-28,18,-11,-5,-33,27,-40,4,-5,-11,-2,-95,-23,-37,-10,-57,-77, 
  /* [2][0][][] */ -82,43,9,10,58,-40,20,62,-25,72,19,-30,8,0,4,76,0,9,-127,37,-6,3,19,-13,-4,-30,53,48,15,36,6,3,14,-4,-8,-34,-12,21,26,4,43,-1,-44,16,12,-57,33,6, 
  /* [3][0][][] */ 4,5,-12,2,-14,9,1,-4,65,27,-18,-16,33,0,-19,-3,0,-20,-17,-5,2,7,3,-8,4,-20,-11,13,13,-7,2,0,-50,55,-80,1,5,9,3,-127,-6,6,8,-47,-2,0,2,10, 
  /* [4][0][][] */ 6,-7,89,20,-4,-5,5,-9,1,-8,4,-10,-65,0,-11,-2,0,-19,7,0,68,-11,9,-9,-4,15,5,74,7,0,-13,106,-1,13,0,-10,-23,0,21,-22,7,-127,20,1,-4,-5,1,-14, 
  /* [5][0][][] */ 6,52,8,0,-5,18,32,19,-26,29,1,50,29,0,-127,-16,0,19,-34,21,-12,23,-13,50,-26,-6,44,-14,-20,19,19,-13,51,32,-44,-1,6,21,-32,29,19,-11,-13,22,18,58,25,24, 
  /* [6][0][][] */ -40,-51,-2,15,51,-71,-28,8,41,-41,5,84,3,0,-127,51,0,-10,69,-21,-4,10,25,-17,20,-11,-1,-14,36,-17,13,9,96,-47,17,1,-15,-2,-77,-18,-19,-19,-28,-53,-29,-86,-19,-18, 
  /* [7][0][][] */ -120,-6,-6,7,127,-2,78,40,9,6,28,-34,-19,0,78,101,0,6,9,64,-18,4,-34,54,15,-5,53,14,22,64,76,-1,-18,-21,-40,-22,-22,26,15,50,85,-5,-39,-14,63,-11,72,88, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.034330312162637711, 0.027350576594471931, 0.043233294039964676, 0.049726363271474838, 0.039123419672250748, 0.041055493056774139, 0.027734553441405296, 0.030605755746364594, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 67923, 33313, 62200, 44286, 482, 15460, 9670, 35709, 31485, 29142, 31976, 7247, -44427, -127, 46306, 1419, -204, 41410, 1928, -1404, -7947, 4244, 56870, 39834, -10040, 60908, 40122, 27772, -1910, 14322, -3413, -55507, 13487, 72704, 22866, 1285, 48038, -681, 209140, -34074, 11238, -28696, 1612, 77655, 321, 105295, -999, -26592, };
const TfArray<48, float> quant34_scale = { 48, { 8.7760206952225417e-05, 0.00010715012467699125, 0.00012033645180054009, 7.6634867582470179e-05, 0.00010763101454358548, 0.00019001011969521642, 0.00013984517136123031, 5.132655132911168e-05, 7.8248922363854945e-05, 3.1698906241217628e-05, 6.7212924477644265e-05, 2.2250729671213776e-05, 0.00016218026576098055, 0.005541567225009203, 5.3139367082621902e-05, 0.00014840211952105165, 0.0027484172023832798, 2.3989960027392954e-05, 7.7402597526088357e-05, 0.00015878590056672692, 7.455335435224697e-05, 0.0001408291282132268, 9.9823788332287222e-05, 3.6528421333059669e-05, 6.0401951486710459e-05, 4.4618162064580247e-05, 3.7445446650963277e-05, 4.9643440434010699e-05, 0.00025476716109551489, 4.183320197626017e-05, 4.9272257456323132e-05, 0.00029696786077693105, 0.00020457147911656648, 1.5418070688610896e-05, 9.3887087132316083e-05, 0.00028743600705638528, 2.1840603949385695e-05, 0.00038204970769584179, 2.1709045540774241e-05, 0.00010257835674565285, 6.0286838561296463e-05, 0.00015412190987262875, 9.1188143414910883e-05, 1.4612018276238814e-05, 0.0001921862130984664, 5.497785605257377e-05, 0.00023090127797331661, 0.00016578356735408306, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -38,-27,-13,-21,6,-44,-83,-67,-18,-55,11,77,38,-71,113,-36,-113,-94,37,-1,2,-78,-114,-80,-30,-113,-63,-30,72,17,91,26,-127,-84,-3,63,9,49,-127,84,-77,-10,113,-114,-7,-32,-86,109, 72,5,-34,-28,58,-127,-127,-71,59,-64,-103,111,37,-82,-4,64,-52,-127,58,10,8,-110,-127,-80,-2,-127,-116,-57,-55,19,-54,53,32,-122,64,76,3,72,-99,127,-127,8,127,-127,-5,-24,-126,90, -26,43,4,-4,-61,-108,-63,-23,92,2,-127,31,11,-71,-106,-9,-127,-40,27,10,-19,-84,-27,-17,-9,-31,-59,-14,-11,16,-28,8,111,-74,79,38,7,38,-13,23,-75,7,9,-91,-23,5,-57,16, 
  /* [0][1][][] */ -85,-127,-43,-44,-14,50,90,-110,-19,-111,-23,123,92,-64,28,-100,-121,-95,88,-79,45,-87,-107,-127,49,-104,-80,-31,127,-65,127,81,-41,-94,-11,95,-39,-78,-113,93,42,61,107,-111,-88,-114,84,123, 127,-78,-127,-127,127,38,85,-127,101,-127,-124,127,127,-14,-7,127,-60,-119,127,-127,127,-127,-120,-120,127,-96,-127,-127,-120,-127,-72,127,32,-127,120,127,-72,-127,-109,96,60,127,125,-120,-112,-127,127,127, -53,24,-59,-89,-122,-24,27,-44,127,-21,-87,38,57,-70,-26,-45,-37,-45,52,-74,57,-69,-32,-17,48,-8,-46,-53,24,-88,-43,19,33,-105,127,28,-41,-63,-4,-12,37,54,16,-87,-59,-39,68,33, 
  /* [0][2][][] */ -56,-112,-25,-36,-1,34,-4,-36,-32,-58,-15,62,75,-127,-127,-66,-43,-30,60,79,58,-40,-9,-59,31,-38,-19,-64,64,31,74,65,102,-39,-32,-5,-93,33,-22,31,11,36,29,-55,99,-82,6,35, 89,-72,-81,-87,83,20,8,-42,53,-68,-26,56,79,-26,18,89,-24,-42,78,120,83,-54,-12,-58,85,-52,-29,-115,-59,39,-48,117,-20,-53,60,1,-127,49,-18,-3,14,30,28,-63,127,-101,-10,40, -26,24,-37,-41,-83,-16,19,-11,62,-3,-4,38,29,-43,113,-33,-93,1,31,60,78,-24,1,10,41,7,-7,-83,-16,28,-25,45,-100,-43,70,5,-20,21,29,-40,13,34,-1,-16,63,-39,-2,14, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0037298086099326611, 0.0045538800768554211, 0.0051142992451786995, 0.0032569817267358303, 0.0045743179507553577, 0.0080754300579428673, 0.00594341941177845, 0.0021813784260302782, 0.0033255789894610643, 0.0013472035061568022, 0.0028565493412315845, 0.00094565597828477621, 0.0068926610983908176, 0.23551659286022186, 0.0022584230173379183, 0.0063070901669561863, 0.1168077290058136, 0.0010195733048021793, 0.0032896103803068399, 0.0067484006285667419, 0.0031685174908488989, 0.0059852376580238342, 0.0042425110004842281, 0.0015524579212069511, 0.0025670828763395548, 0.001896271831355989, 0.0015914314426481724, 0.0021098461002111435, 0.010827603749930859, 0.0017779110930860043, 0.0020940708927810192, 0.012621133588254452, 0.0086942873895168304, 0.00065526802791282535, 0.0039902012795209885, 0.012216030620038509, 0.00092822563601657748, 0.016237111762166023, 0.00092263444093987346, 0.004359580110758543, 0.0025621906388550997, 0.0065501811914145947, 0.0038754958659410477, 0.00062101078219711781, 0.0081679141148924828, 0.002336558885872364, 0.0098133040592074394, 0.0070458017289638519, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3324, -443, 5151, 3740, 5678, 5773, 10481, -34, -21, -226, 1905, 362, 8131, -63049396, 2123, 10430, -50896744, -91, -345, 8922, 1853, -12, -107, 273, 2195, -310, 42, 418, 3136, 953, 1497, 13679, 3285, 284, 318, -2230, 345, 2720, -69, 11321, 1334, 7027, 49, -64, 12679, -113, 10232, 7246, };
const TfArray<48, float> quant36_scale = { 48, { 0.00062533217715099454, 0.00042496048263274133, 0.00061713450122624636, 0.00046547388774342835, 0.00035492674214765429, 0.00038109213346615434, 0.00035908204154111445, 0.0016750546637922525, 0.00044312709360383451, 0.0032089811284095049, 0.00076963403262197971, 0.0025430850218981504, 0.00025932653807103634, 2.5723267960131579e-09, 0.001105522271245718, 0.00030393237830139697, 2.5723267960131579e-09, 0.0066441120579838753, 0.00068148813443258405, 0.0004573418409563601, 0.00052061537280678749, 0.0059893778525292873, 0.00051680853357538581, 0.0022668379824608564, 0.0016232673078775406, 0.0014758501201868057, 0.0033001734409481287, 0.0022630149032920599, 0.00036768711288459599, 0.0028062353376299143, 0.0019226499134674668, 0.00018261169316247106, 0.00024998615845106542, 0.01154768280684948, 0.00049162737559527159, 0.00059300829889252782, 0.0041814208962023258, 0.00042068169568665326, 0.0026928544975817204, 0.00031277749803848565, 0.0020260435994714499, 0.00032130381441675127, 0.00052087195217609406, 0.010057291015982628, 0.00039220752660185099, 0.00099742738530039787, 0.00028337514959275723, 0.00014736302546225488, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 32,-127,50,-40,34,-20,-65,38, 
  /* [1][0][][] */ 60,47,6,-127,17,11,-91,116, 
  /* [2][0][][] */ 5,-10,-18,85,34,127,43,83, 
  /* [3][0][][] */ 67,86,-72,127,-78,-11,0,47, 
  /* [4][0][][] */ -35,-127,56,11,-46,32,-62,-105, 
  /* [5][0][][] */ 23,-7,-37,36,5,-23,30,127, 
  /* [6][0][][] */ 25,-47,-72,-127,69,54,47,-43, 
  /* [7][0][][] */ 127,10,-26,-25,27,1,86,-72, 
  /* [8][0][][] */ 4,-119,19,111,1,-7,61,-127, 
  /* [9][0][][] */ 109,-127,8,-9,-17,9,-72,120, 
  /* [10][0][][] */ -119,-51,-118,-22,-8,4,-127,-10, 
  /* [11][0][][] */ -29,-42,-5,-120,-127,-18,51,-28, 
  /* [12][0][][] */ 21,4,-46,63,-61,-18,57,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -10,-34,3,17,71,127,32,45, 
  /* [15][0][][] */ 26,23,19,-127,55,8,-39,53, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ -5,57,127,59,7,4,-20,46, 
  /* [18][0][][] */ 72,-127,21,21,-11,14,-90,-21, 
  /* [19][0][][] */ -127,-12,2,83,-33,-63,-62,36, 
  /* [20][0][][] */ 30,18,-43,83,-41,-127,-2,53, 
  /* [21][0][][] */ 60,48,127,17,-7,-33,48,-14, 
  /* [22][0][][] */ -51,-16,-127,9,37,5,-66,-1, 
  /* [23][0][][] */ -88,127,-27,-21,4,-12,112,-56, 
  /* [24][0][][] */ -3,-53,-49,91,-5,-61,89,127, 
  /* [25][0][][] */ 23,34,19,9,78,127,-28,-41, 
  /* [26][0][][] */ -41,-30,-127,-24,14,6,-48,-23, 
  /* [27][0][][] */ -5,-10,-37,28,-127,82,47,52, 
  /* [28][0][][] */ 8,-13,-22,27,12,127,40,44, 
  /* [29][0][][] */ 45,-34,127,-33,27,-18,108,-31, 
  /* [30][0][][] */ -91,127,-2,-23,34,12,81,-44, 
  /* [31][0][][] */ -31,-106,-19,9,58,-76,113,127, 
  /* [32][0][][] */ 21,18,-46,127,45,72,71,112, 
  /* [33][0][][] */ 5,60,-17,-72,-34,-21,7,127, 
  /* [34][0][][] */ 2,71,-2,-127,62,-77,34,124, 
  /* [35][0][][] */ 127,51,9,-19,43,-56,72,-61, 
  /* [36][0][][] */ -42,0,40,73,-7,-48,-127,86, 
  /* [37][0][][] */ 3,-36,-19,35,50,127,59,72, 
  /* [38][0][][] */ 7,38,23,127,110,-71,-58,42, 
  /* [39][0][][] */ -2,31,28,-127,18,15,-28,108, 
  /* [40][0][][] */ 62,-19,127,-2,10,-16,86,-15, 
  /* [41][0][][] */ 9,-19,-25,42,42,127,71,64, 
  /* [42][0][][] */ -81,-2,127,11,-63,21,-24,59, 
  /* [43][0][][] */ -9,-59,7,104,-38,4,16,-127, 
  /* [44][0][][] */ 1,-15,-55,-127,21,-11,10,-73, 
  /* [45][0][][] */ -66,127,-4,-77,15,-1,78,-36, 
  /* [46][0][][] */ -127,-1,37,17,-1,5,-60,48, 
  /* [47][0][][] */ 127,21,95,0,-4,-37,114,1, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.00095708592562004924, 0.00065041222842410207, 0.00094453920610249043, 0.00071241898695006967, 0.00054322392679750919, 0.00058327068109065294, 0.00054958369582891464, 0.0025637114886194468, 0.00067821668926626444, 0.0049114227294921875, 0.0011779434280470014, 0.0038922529201954603, 0.00039690552512183785, 3.937008052901092e-09, 0.0016920284833759069, 0.00046517583541572094, 3.937008052901092e-09, 0.010168973356485367, 0.0010430340189486742, 0.00069997267564758658, 0.00079681433271616697, 0.009166887030005455, 0.00079098786227405071, 0.0034694499336183071, 0.0024844496510922909, 0.0022588241845369339, 0.0050509949214756489, 0.0034635988995432854, 0.00056275399401783943, 0.0042950105853378773, 0.0029426619876176119, 0.00027949159266427159, 0.00038260981091298163, 0.017674006521701813, 0.0007524475222453475, 0.00090761348837986588, 0.0063997651450335979, 0.00064386345911771059, 0.0041214786469936371, 0.00047871348215267062, 0.0031009085942059755, 0.00049176323227584362, 0.00079720705980435014, 0.015392925590276718, 0.00060028303414583206, 0.0015265865949913859, 0.00043371247011236846, 0.00022554265160579234, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 2167, -46327, -9775, -13163, -26552, -2754, -26705, -29880, };
const TfArray<8, float> quant38_scale = { 8, { 0.0018097569700330496, 0.0017566438764333725, 0.0023530973121523857, 0.0011197173735126853, 0.001337011344730854, 0.0020591123029589653, 0.0014436127385124564, 0.0009406076860614121, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,6,-10,127,-12,-3,-8,3,-116,-89,10,0,104,-3,0, 
  /* [1][0][][] */ 0,-29,10,95,81,13,22,4,3,-5,127,-44,0,30,-13,0, 
  /* [2][0][][] */ 0,-4,-15,-9,-43,8,14,7,3,19,-18,0,0,127,-9,0, 
  /* [3][0][][] */ 0,1,-26,-127,97,21,81,-2,-4,77,-11,38,0,-3,19,0, 
  /* [4][0][][] */ 0,52,-12,32,-71,25,127,-13,4,-67,13,-11,0,-1,6,0, 
  /* [5][0][][] */ 0,-18,0,2,-27,-24,-13,19,2,6,1,-45,0,-5,127,0, 
  /* [6][0][][] */ 0,25,-2,7,44,-30,-16,-15,5,-106,121,66,0,127,71,0, 
  /* [7][0][][] */ 0,25,-5,127,16,-11,26,-5,4,74,-51,75,0,-5,48,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.076914668083190918, 0.074657365679740906, 0.10000663250684738, 0.047587987035512924, 0.056822981685400009, 0.087512269616127014, 0.061353541910648346, 0.039975825697183609, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 26098, 7547, 10045, 8733, 116683, 10664, 66177, -10536, 5408, 27891, 15860, -445, 26898, 7805, -107, };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00010479431512067094, 0.00054822274250909686, 0.00035424105590209365, 0.00019990980217698961, 2.8446725991670974e-05, 0.00042104674503207207, 5.9382338804425672e-05, 1.8887030819314532e-05, 0.0003238916106056422, 0.00020732222765218467, 0.0009773296769708395, 0.00072724185883998871, 0.00022960950445849448, 0.00023259464069269598, 0.003907486330717802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,20,-84,-127,39,-67,80,-76,-90,-3,-5,30,-127,4,54,-73, 51,26,-127,127,127,-127,127,-127,-85,127,-127,51,-105,6,127,-25, 24,-22,81,-2,-71,65,-93,79,-95,-28,6,-15,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-27,13,-43,14,-28,15,-28,0,4,-108,-49,10,-29,-14, -78,-39,-60,-15,-7,-27,9,-27,-108,-89,21,-10,-104,-127,1,23, 14,3,57,2,3,32,-24,34,-127,6,-2,2,-21,13,-4,43, 
  /* [0][2][][] */ -115,-69,61,2,-7,38,-38,52,-76,0,1,4,40,1,-27,23, 23,-1,25,-2,-27,39,-33,21,-125,-13,0,83,-58,0,-28,-111, 21,-4,13,0,4,14,10,23,-115,4,-1,-127,107,1,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.004453758243471384, 0.023299464955925941, 0.015055244788527489, 0.0084961662068963051, 0.0012089858064427972, 0.017894485965371132, 0.0025237493682652712, 0.00080269877798855305, 0.013765393756330013, 0.0088111944496631622, 0.041536509990692139, 0.030907778069376945, 0.0097584035247564316, 0.0098852720111608505, 0.16606816649436951, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 18379, -197619, 4739, 216657, 24812, 51738, 19822, -129518, 31072, 23787, 8531494, -1073741824, 53049, 66472, -1073741824, };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00020818371558561921, 9.4415336207021028e-05, 6.2298073316924274e-05, 1.4157701116346288e-05, 0.00024391179613303393, 6.4563464547973126e-05, 0.00016223825514316559, 9.8030786830349825e-06, 3.6857141822110862e-05, 0.00013476995809469372, 6.5998290210700361e-07, 1.1533876076441629e-09, 6.942028267076239e-05, 5.3669951739721e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 58,-22,36, 28,-38,30, -59,-127,-31, 
  /* [1][1][][] */ 13,-27,2, -7,-26,-1, 18,-55,12, 
  /* [1][2][][] */ 4,-6,1, -2,-22,-4, 43,-39,16, 
  /* [2][0][][] */ 54,13,18, 90,127,26, 65,-14,46, 
  /* [2][1][][] */ 11,16,11, 57,127,-12, 40,10,28, 
  /* [2][2][][] */ 42,-69,29, 64,-50,-9, 51,-38,48, 
  /* [3][0][][] */ -8,3,5, 29,88,23, -6,-2,-14, 
  /* [3][1][][] */ -2,7,22, 67,127,54, -46,-50,-42, 
  /* [3][2][][] */ -3,-10,19, 23,20,8, 2,2,-5, 
  /* [4][0][][] */ 21,58,2, -15,40,-21, -17,2,1, 
  /* [4][1][][] */ -9,50,25, -34,68,-8, 10,48,-8, 
  /* [4][2][][] */ 38,78,70, 32,127,64, -16,36,42, 
  /* [5][0][][] */ 17,36,-68, -13,18,-82, -12,39,-34, 
  /* [5][1][][] */ -9,-16,-99, -47,-35,-127, -32,23,-29, 
  /* [5][2][][] */ 7,37,11, -11,16,-2, -11,29,-3, 
  /* [6][0][][] */ 20,-57,39, 39,-86,43, 5,-23,16, 
  /* [6][1][][] */ 32,-90,72, 55,-127,79, 5,-29,29, 
  /* [6][2][][] */ 13,-35,21, 11,-43,38, -18,1,5, 
  /* [7][0][][] */ -38,-10,2, -100,-62,13, -7,19,19, 
  /* [7][1][][] */ -12,-26,5, -127,-120,0, -15,-34,-1, 
  /* [7][2][][] */ -40,3,-11, -22,-11,5, -32,0,-6, 
  /* [8][0][][] */ 123,127,109, 117,122,59, 88,102,-101, 
  /* [8][1][][] */ 114,120,-100, 110,108,-108, 89,79,-113, 
  /* [8][2][][] */ 121,121,-104, 119,113,-111, 107,21,-116, 
  /* [9][0][][] */ -13,2,28, -5,-1,18, -2,4,-10, 
  /* [9][1][][] */ 109,127,46, 70,110,57, -35,-6,29, 
  /* [9][2][][] */ -47,-35,5, -22,-49,-15, 33,34,12, 
  /* [10][0][][] */ -25,-81,-20, 33,94,18, -10,-12,-5, 
  /* [10][1][][] */ -59,-101,-16, 78,127,13, -18,-25,-3, 
  /* [10][2][][] */ -31,-17,0, 36,25,-12, -8,2,7, 
  /* [11][0][][] */ -67,-91,-73, -37,-101,-63, 6,-108,-68, 
  /* [11][1][][] */ -96,-118,-111, -76,-127,-126, -17,-65,-67, 
  /* [11][2][][] */ -14,-47,-89, 116,125,59, -41,12,-51, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-18, -61,-111,-25, -9,-18,-6, 
  /* [13][1][][] */ 63,115,17, 58,127,26, 7,14,11, 
  /* [13][2][][] */ -7,-19,6, 2,-18,0, -1,2,-4, 
  /* [14][0][][] */ 48,-6,-44, 83,-24,-54, 29,-9,-24, 
  /* [14][1][][] */ 89,-17,-83, 127,-37,-93, 50,-18,-42, 
  /* [14][2][][] */ 54,-6,-59, 73,-16,-64, 16,-4,-28, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.053086843341588974, 0.024075908586382866, 0.015886006876826286, 0.0036102135200053453, 0.062197502702474594, 0.016463682055473328, 0.041370753198862076, 0.0024997848086059093, 0.0093985702842473984, 0.034366335719823837, 0.00016829563537612557, 2.9411381774480105e-07, 0.017702171579003334, 0.013685836456716061, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,80,80,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.65337097644805908, } };
const TfArray<1, int> quant46_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,80,80,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,81,81,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,40,40,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.42489373683929443, } };
const TfArray<1, int> quant50_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.62927699089050293, } };
const TfArray<1, int> quant53_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.74260985851287842, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,41,41,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,20,20,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.31837856769561768, } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&g0::quant54_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,20,20,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.34260070323944092, } };
const TfArray<1, int> quant61_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.33117461204528809, } };
const TfArray<1, int> quant62_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.32805797457695007, } };
const TfArray<1, int> quant65_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.44221001863479614, } };
const TfArray<1, int> quant66_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,20,20,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.069451957941055298, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,20,20,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.17223742604255676, } };
const TfArray<1, int> quant69_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 102400), (TfLiteIntArray*)&g0::tensor_dimension44, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 102400), (TfLiteIntArray*)&g0::tensor_dimension46, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 314928), (TfLiteIntArray*)&g0::tensor_dimension47, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 314928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 314928), (TfLiteIntArray*)&g0::tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 153600), (TfLiteIntArray*)&g0::tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80688), (TfLiteIntArray*)&g0::tensor_dimension49, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 80688, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80688), (TfLiteIntArray*)&g0::tensor_dimension57, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 99888), (TfLiteIntArray*)&g0::tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 76800), (TfLiteIntArray*)&g0::tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 44800), (TfLiteIntArray*)&g0::tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension58, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 38400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 38400), (TfLiteIntArray*)&g0::tensor_dimension68, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension69, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_66_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_66_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_66_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_66_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_66_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
